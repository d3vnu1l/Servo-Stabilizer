

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 18 11:54:25 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,inline
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,inline
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1,inline
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1,inline
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1,inline
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1,inline
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78  0000                     
    79                           ; Version 1.45
    80                           ; Generated 16/11/2017 GMT
    81                           ; 
    82                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F4550 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	mediumconst
   115  007EF4                     __pmediumconst:
   116                           	opt stack 0
   117  007EF4  00                 	db	0
   118  007EF5                     _dpowers:
   119                           	opt stack 0
   120  007EF5  0001               	dw	1
   121  007EF7  0000               	dw	0
   122  007EF9  000A               	dw	10
   123  007EFB  0000               	dw	0
   124  007EFD  0064               	dw	100
   125  007EFF  0000               	dw	0
   126  007F01  03E8               	dw	1000
   127  007F03  0000               	dw	0
   128  007F05  2710               	dw	10000
   129  007F07  0000               	dw	0
   130  007F09  86A0               	dw	34464
   131  007F0B  0001               	dw	1
   132  007F0D  4240               	dw	16960
   133  007F0F  000F               	dw	15
   134  007F11  9680               	dw	38528
   135  007F13  0098               	dw	152
   136  007F15  E100               	dw	57600
   137  007F17  05F5               	dw	1525
   138  007F19  CA00               	dw	51712
   139  007F1B  3B9A               	dw	15258
   140  007F1D                     __end_of_dpowers:
   141                           	opt stack 0
   142  007F1D                     __powers_:
   143                           	opt stack 0
   144  007F1D  00                 	db	0
   145  007F1E  80                 	db	128
   146  007F1F  3F                 	db	63
   147  007F20  00                 	db	0
   148  007F21  20                 	db	32
   149  007F22  41                 	db	65
   150  007F23  00                 	db	0
   151  007F24  C8                 	db	200
   152  007F25  42                 	db	66
   153  007F26  00                 	db	0
   154  007F27  7A                 	db	122
   155  007F28  44                 	db	68
   156  007F29  40                 	db	64
   157  007F2A  1C                 	db	28
   158  007F2B  46                 	db	70
   159  007F2C  50                 	db	80
   160  007F2D  C3                 	db	195
   161  007F2E  47                 	db	71
   162  007F2F  24                 	db	36
   163  007F30  74                 	db	116
   164  007F31  49                 	db	73
   165  007F32  97                 	db	151
   166  007F33  18                 	db	24
   167  007F34  4B                 	db	75
   168  007F35  BC                 	db	188
   169  007F36  BE                 	db	190
   170  007F37  4C                 	db	76
   171  007F38  6B                 	db	107
   172  007F39  6E                 	db	110
   173  007F3A  4E                 	db	78
   174  007F3B  03                 	db	3
   175  007F3C  15                 	db	21
   176  007F3D  50                 	db	80
   177  007F3E  79                 	db	121
   178  007F3F  AD                 	db	173
   179  007F40  60                 	db	96
   180  007F41  F3                 	db	243
   181  007F42  49                 	db	73
   182  007F43  71                 	db	113
   183  007F44                     __end_of__powers_:
   184                           	opt stack 0
   185  007F44                     __npowers_:
   186                           	opt stack 0
   187  007F44  00                 	db	0
   188  007F45  80                 	db	128
   189  007F46  3F                 	db	63
   190  007F47  CD                 	db	205
   191  007F48  CC                 	db	204
   192  007F49  3D                 	db	61
   193  007F4A  D7                 	db	215
   194  007F4B  23                 	db	35
   195  007F4C  3C                 	db	60
   196  007F4D  12                 	db	18
   197  007F4E  83                 	db	131
   198  007F4F  3A                 	db	58
   199  007F50  B7                 	db	183
   200  007F51  D1                 	db	209
   201  007F52  38                 	db	56
   202  007F53  C6                 	db	198
   203  007F54  27                 	db	39
   204  007F55  37                 	db	55
   205  007F56  38                 	db	56
   206  007F57  86                 	db	134
   207  007F58  35                 	db	53
   208  007F59  C0                 	db	192
   209  007F5A  D6                 	db	214
   210  007F5B  33                 	db	51
   211  007F5C  CC                 	db	204
   212  007F5D  2B                 	db	43
   213  007F5E  32                 	db	50
   214  007F5F  70                 	db	112
   215  007F60  89                 	db	137
   216  007F61  30                 	db	48
   217  007F62  E7                 	db	231
   218  007F63  DB                 	db	219
   219  007F64  2E                 	db	46
   220  007F65  E5                 	db	229
   221  007F66  3C                 	db	60
   222  007F67  1E                 	db	30
   223  007F68  42                 	db	66
   224  007F69  A2                 	db	162
   225  007F6A  0D                 	db	13
   226  007F6B                     __end_of__npowers_:
   227                           	opt stack 0
   228  007F6B                     exp@coeff:
   229                           	opt stack 0
   230  007F6B  00                 	db	0
   231  007F6C  80                 	db	128
   232  007F6D  3F                 	db	63
   233  007F6E  72                 	db	114
   234  007F6F  31                 	db	49
   235  007F70  3F                 	db	63
   236  007F71  FE                 	db	254
   237  007F72  75                 	db	117
   238  007F73  3E                 	db	62
   239  007F74  58                 	db	88
   240  007F75  63                 	db	99
   241  007F76  3D                 	db	61
   242  007F77  95                 	db	149
   243  007F78  1D                 	db	29
   244  007F79  3C                 	db	60
   245  007F7A  C5                 	db	197
   246  007F7B  AE                 	db	174
   247  007F7C  3A                 	db	58
   248  007F7D  79                 	db	121
   249  007F7E  21                 	db	33
   250  007F7F  39                 	db	57
   251  007F80  94                 	db	148
   252  007F81  80                 	db	128
   253  007F82  37                 	db	55
   254  007F83  93                 	db	147
   255  007F84  A7                 	db	167
   256  007F85  35                 	db	53
   257  007F86  56                 	db	86
   258  007F87  15                 	db	21
   259  007F88  34                 	db	52
   260  007F89                     __end_ofexp@coeff:
   261                           	opt stack 0
   262  007F89                     log@coeff:
   263                           	opt stack 0
   264  007F89  00                 	db	0
   265  007F8A  00                 	db	0
   266  007F8B  00                 	db	0
   267  007F8C  00                 	db	0
   268  007F8D  80                 	db	128
   269  007F8E  3F                 	db	63
   270  007F8F  F0                 	db	240
   271  007F90  FF                 	db	255
   272  007F91  BE                 	db	190
   273  007F92  E2                 	db	226
   274  007F93  A9                 	db	169
   275  007F94  3E                 	db	62
   276  007F95  83                 	db	131
   277  007F96  76                 	db	118
   278  007F97  BE                 	db	190
   279  007F98  AE                 	db	174
   280  007F99  2B                 	db	43
   281  007F9A  3E                 	db	62
   282  007F9B  3C                 	db	60
   283  007F9C  C3                 	db	195
   284  007F9D  BD                 	db	189
   285  007F9E  D2                 	db	210
   286  007F9F  13                 	db	19
   287  007FA0  3D                 	db	61
   288  007FA1  78                 	db	120
   289  007FA2  D3                 	db	211
   290  007FA3  BB                 	db	187
   291  007FA4                     __end_oflog@coeff:
   292                           	opt stack 0
   293  007FA4                     atan@coeff_a:
   294                           	opt stack 0
   295  007FA4  3C                 	db	60
   296  007FA5  04                 	db	4
   297  007FA6  42                 	db	66
   298  007FA7  9F                 	db	159
   299  007FA8  6A                 	db	106
   300  007FA9  42                 	db	66
   301  007FAA  90                 	db	144
   302  007FAB  01                 	db	1
   303  007FAC  42                 	db	66
   304  007FAD  4D                 	db	77
   305  007FAE  BB                 	db	187
   306  007FAF  40                 	db	64
   307  007FB0  EC                 	db	236
   308  007FB1  47                 	db	71
   309  007FB2  3E                 	db	62
   310  007FB3  8E                 	db	142
   311  007FB4  1F                 	db	31
   312  007FB5  BB                 	db	187
   313  007FB6                     __end_ofatan@coeff_a:
   314                           	opt stack 0
   315  007FB6                     atan@coeff_b:
   316                           	opt stack 0
   317  007FB6  3C                 	db	60
   318  007FB7  04                 	db	4
   319  007FB8  42                 	db	66
   320  007FB9  5A                 	db	90
   321  007FBA  8B                 	db	139
   322  007FBB  42                 	db	66
   323  007FBC  04                 	db	4
   324  007FBD  44                 	db	68
   325  007FBE  42                 	db	66
   326  007FBF  9C                 	db	156
   327  007FC0  4F                 	db	79
   328  007FC1  41                 	db	65
   329  007FC2  00                 	db	0
   330  007FC3  80                 	db	128
   331  007FC4  3F                 	db	63
   332  007FC5                     __end_ofatan@coeff_b:
   333                           	opt stack 0
   334  0000                     _PIR1bits	set	3998
   335  0000                     _SSPCON1bits	set	4038
   336  0000                     _SSPBUF	set	4041
   337  0000                     _TRISBbits	set	3987
   338  0000                     _SSPCON1	set	4038
   339  0000                     _SSPSTAT	set	4039
   340  0000                     _SSPSTATbits	set	4039
   341  0000                     _SSPCON2	set	4037
   342  0000                     _SSPCON2bits	set	4037
   343  0000                     _CCP1CON	set	4029
   344  0000                     _LATE	set	3981
   345  0000                     _LATD	set	3980
   346  0000                     _LATC	set	3979
   347  0000                     _LATB	set	3978
   348  0000                     _LATA	set	3977
   349  0000                     _TRISB	set	3987
   350  0000                     _TRISA	set	3986
   351  0000                     _TXREG1	set	4013
   352  0000                     _TXSTA1bits	set	4012
   353  0000                     _RCREG	set	4014
   354  0000                     _RCSTAbits	set	4011
   355  0000                     _RCSTA	set	4011
   356  0000                     _TXSTA	set	4012
   357  0000                     _SPBRG	set	4015
   358  0000                     _LATCbits	set	3979
   359  0000                     _SSPADD	set	4040
   360  0000                     _OSCCON	set	4051
   361  0000                     _TRISC2	set	31906
   362  0000                     _TRISC1	set	31905
   363  0000                     _RCIF	set	31989
   364  0000                     _TXIF	set	31988
   365  0000                     _TRISC7	set	31911
   366  0000                     _TRISC6	set	31910
   367  007FC5                     STR_1:
   368  007FC5  49                 	db	73	;'I'
   369  007FC6  6E                 	db	110	;'n'
   370  007FC7  69                 	db	105	;'i'
   371  007FC8  74                 	db	116	;'t'
   372  007FC9  20                 	db	32
   373  007FCA  4D                 	db	77	;'M'
   374  007FCB  50                 	db	80	;'P'
   375  007FCC  55                 	db	85	;'U'
   376  007FCD  2E                 	db	46
   377  007FCE  2E                 	db	46
   378  007FCF  2E                 	db	46
   379  007FD0  20                 	db	32
   380  007FD1  0D                 	db	13
   381  007FD2  0A                 	db	10
   382  007FD3  00                 	db	0
   383  007FD4                     STR_2:
   384  007FD4  4D                 	db	77	;'M'
   385  007FD5  50                 	db	80	;'P'
   386  007FD6  55                 	db	85	;'U'
   387  007FD7  20                 	db	32
   388  007FD8  65                 	db	101	;'e'
   389  007FD9  6E                 	db	110	;'n'
   390  007FDA  61                 	db	97	;'a'
   391  007FDB  62                 	db	98	;'b'
   392  007FDC  6C                 	db	108	;'l'
   393  007FDD  65                 	db	101	;'e'
   394  007FDE  64                 	db	100	;'d'
   395  007FDF  21                 	db	33
   396  007FE0  0D                 	db	13
   397  007FE1  0A                 	db	10
   398  007FE2  00                 	db	0
   399  007FE3                     STR_3:
   400  007FE3  4D                 	db	77	;'M'
   401  007FE4  50                 	db	80	;'P'
   402  007FE5  55                 	db	85	;'U'
   403  007FE6  20                 	db	32
   404  007FE7  66                 	db	102	;'f'
   405  007FE8  61                 	db	97	;'a'
   406  007FE9  69                 	db	105	;'i'
   407  007FEA  6C                 	db	108	;'l'
   408  007FEB  75                 	db	117	;'u'
   409  007FEC  72                 	db	114	;'r'
   410  007FED  65                 	db	101	;'e'
   411  007FEE  0D                 	db	13
   412  007FEF  0A                 	db	10
   413  007FF0  00                 	db	0
   414  007FF1                     STR_4:
   415  007FF1  25                 	db	37
   416  007FF2  66                 	db	102	;'f'
   417  007FF3  2C                 	db	44
   418  007FF4  20                 	db	32
   419  007FF5  25                 	db	37
   420  007FF6  66                 	db	102	;'f'
   421  007FF7  2C                 	db	44
   422  007FF8  20                 	db	32
   423  007FF9  25                 	db	37
   424  007FFA  66                 	db	102	;'f'
   425  007FFB  0D                 	db	13
   426  007FFC  0A                 	db	10
   427  007FFD  00                 	db	0
   428                           
   429                           ; #config settings
   430  007FFE  00                 	db	0	; dummy byte at the end
   431  0000                     
   432                           	psect	cinit
   433  004B88                     __pcinit:
   434                           	opt stack 0
   435  004B88                     start_initialization:
   436                           	opt stack 0
   437  004B88                     __initialization:
   438                           	opt stack 0
   439                           
   440                           ; Clear objects allocated to BANK1 (71 bytes)
   441  004B88  EE01  F000         	lfsr	0,__pbssBANK1
   442  004B8C  0E47               	movlw	71
   443  004B8E                     clear_0:
   444  004B8E  6AEE               	clrf	postinc0,c
   445  004B90  06E8               	decf	wreg,f,c
   446  004B92  E1FD               	bnz	clear_0
   447                           
   448                           ; Clear objects allocated to BANK0 (12 bytes)
   449  004B94  EE00  F0F3         	lfsr	0,__pbssBANK0
   450  004B98  0E0C               	movlw	12
   451  004B9A                     clear_1:
   452  004B9A  6AEE               	clrf	postinc0,c
   453  004B9C  06E8               	decf	wreg,f,c
   454  004B9E  E1FD               	bnz	clear_1
   455  004BA0                     end_of_initialization:
   456                           	opt stack 0
   457  004BA0                     __end_of__initialization:
   458                           	opt stack 0
   459  004BA0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   460  004BA2  6EF8               	movwf	tblptru,c
   461  004BA4  0100               	movlb	0
   462  004BA6  EFA8  F03B         	goto	_main	;jump to C main() function
   463                           tblptru	equ	0xFF8
   464                           postinc0	equ	0xFEE
   465                           wreg	equ	0xFE8
   466                           
   467                           	psect	bssBANK0
   468  0000F3                     __pbssBANK0:
   469                           	opt stack 0
   470  0000F3                     _z_gyro:
   471                           	opt stack 0
   472  0000F3                     	ds	2
   473  0000F5                     _y_gyro:
   474                           	opt stack 0
   475  0000F5                     	ds	2
   476  0000F7                     _x_gyro:
   477                           	opt stack 0
   478  0000F7                     	ds	2
   479  0000F9                     _z_accel:
   480                           	opt stack 0
   481  0000F9                     	ds	2
   482  0000FB                     _y_accel:
   483                           	opt stack 0
   484  0000FB                     	ds	2
   485  0000FD                     _x_accel:
   486                           	opt stack 0
   487  0000FD                     	ds	2
   488                           tblptru	equ	0xFF8
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           
   492                           	psect	bssBANK1
   493  000100                     __pbssBANK1:
   494                           	opt stack 0
   495  000100                     _last_read_time:
   496                           	opt stack 0
   497  000100                     	ds	4
   498  000104                     _base_z_gyro:
   499                           	opt stack 0
   500  000104                     	ds	3
   501  000107                     _base_y_gyro:
   502                           	opt stack 0
   503  000107                     	ds	3
   504  00010A                     _base_x_gyro:
   505                           	opt stack 0
   506  00010A                     	ds	3
   507  00010D                     _base_z_accel:
   508                           	opt stack 0
   509  00010D                     	ds	3
   510  000110                     _base_y_accel:
   511                           	opt stack 0
   512  000110                     	ds	3
   513  000113                     _base_x_accel:
   514                           	opt stack 0
   515  000113                     	ds	3
   516  000116                     _last_gyro_z_angle:
   517                           	opt stack 0
   518  000116                     	ds	3
   519  000119                     _last_gyro_y_angle:
   520                           	opt stack 0
   521  000119                     	ds	3
   522  00011C                     _last_gyro_x_angle:
   523                           	opt stack 0
   524  00011C                     	ds	3
   525  00011F                     _last_z_angle:
   526                           	opt stack 0
   527  00011F                     	ds	3
   528  000122                     _last_y_angle:
   529                           	opt stack 0
   530  000122                     	ds	3
   531  000125                     _last_x_angle:
   532                           	opt stack 0
   533  000125                     	ds	3
   534  000128                     _errno:
   535                           	opt stack 0
   536  000128                     	ds	2
   537  00012A                     _temperature:
   538                           	opt stack 0
   539  00012A                     	ds	2
   540  00012C                     _mpu6050:
   541                           	opt stack 0
   542  00012C                     	ds	15
   543  00013B                     _gz:
   544                           	opt stack 0
   545  00013B                     	ds	2
   546  00013D                     _gy:
   547                           	opt stack 0
   548  00013D                     	ds	2
   549  00013F                     _gx:
   550                           	opt stack 0
   551  00013F                     	ds	2
   552  000141                     _az:
   553                           	opt stack 0
   554  000141                     	ds	2
   555  000143                     _ay:
   556                           	opt stack 0
   557  000143                     	ds	2
   558  000145                     _ax:
   559                           	opt stack 0
   560  000145                     	ds	2
   561                           tblptru	equ	0xFF8
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           
   565                           	psect	cstackBANK0
   566  000060                     __pcstackBANK0:
   567                           	opt stack 0
   568  000060                     ??_calibrate_sensors:
   569  000060                     ?_exp:
   570                           	opt stack 0
   571  000060                     exp@x:
   572                           	opt stack 0
   573  000060                     _printf$3065:
   574                           	opt stack 0
   575  000060                     USART_Init@baud_rate:
   576                           	opt stack 0
   577                           
   578                           ; 4 bytes @ 0x0
   579  000060                     	ds	2
   580  000062                     calibrate_sensors@i:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x2
   584  000062                     	ds	1
   585  000063                     printf@ap:
   586                           	opt stack 0
   587  000063                     _exp$3068:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x3
   591  000063                     	ds	1
   592  000064                     calibrate_sensors@_x_accel:
   593                           	opt stack 0
   594  000064                     USART_Init@temp:
   595                           	opt stack 0
   596                           
   597                           ; 3 bytes @ 0x4
   598  000064                     	ds	1
   599  000065                     printf@flag:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x5
   603  000065                     	ds	1
   604  000066                     exp@exponent:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x6
   608  000066                     	ds	1
   609  000067                     printf@prec:
   610                           	opt stack 0
   611  000067                     calibrate_sensors@_y_accel:
   612                           	opt stack 0
   613                           
   614                           ; 3 bytes @ 0x7
   615  000067                     	ds	1
   616  000068                     exp@sign:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x8
   620  000068                     	ds	1
   621  000069                     ?_pow:
   622                           	opt stack 0
   623  000069                     pow@x:
   624                           	opt stack 0
   625  000069                     printf@val:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x9
   629  000069                     	ds	1
   630  00006A                     calibrate_sensors@_z_accel:
   631                           	opt stack 0
   632                           
   633                           ; 3 bytes @ 0xA
   634  00006A                     	ds	2
   635  00006C                     pow@y:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0xC
   639  00006C                     	ds	1
   640  00006D                     printf@exp:
   641                           	opt stack 0
   642  00006D                     calibrate_sensors@_x_gyro:
   643                           	opt stack 0
   644                           
   645                           ; 3 bytes @ 0xD
   646  00006D                     	ds	2
   647  00006F                     _pow$3066:
   648                           	opt stack 0
   649  00006F                     printf@tmpval:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0xF
   653  00006F                     	ds	1
   654  000070                     calibrate_sensors@_y_gyro:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x10
   658  000070                     	ds	2
   659  000072                     _pow$3067:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x12
   663  000072                     	ds	1
   664  000073                     calibrate_sensors@_z_gyro:
   665                           	opt stack 0
   666  000073                     printf@fval:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x13
   670  000073                     	ds	2
   671  000075                     pow@sign:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x15
   675  000075                     	ds	1
   676  000076                     printf@c:
   677                           	opt stack 0
   678  000076                     calibrate_sensors@num_readings:
   679                           	opt stack 0
   680  000076                     pow@yi:
   681                           	opt stack 0
   682                           
   683                           ; 4 bytes @ 0x16
   684  000076                     	ds	4
   685  00007A                     ?_sqrt:
   686                           	opt stack 0
   687  00007A                     sqrt@a:
   688                           	opt stack 0
   689                           
   690                           ; 3 bytes @ 0x1A
   691  00007A                     	ds	3
   692  00007D                     ??_sqrt:
   693                           
   694                           ; 1 bytes @ 0x1D
   695  00007D                     	ds	3
   696  000080                     sqrt@og:
   697                           	opt stack 0
   698                           
   699                           ; 3 bytes @ 0x20
   700  000080                     	ds	3
   701  000083                     sqrt@z:
   702                           	opt stack 0
   703                           
   704                           ; 3 bytes @ 0x23
   705  000083                     	ds	3
   706  000086                     sqrt@i:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x26
   710  000086                     	ds	1
   711  000087                     sqrt@q:
   712                           	opt stack 0
   713                           
   714                           ; 3 bytes @ 0x27
   715  000087                     	ds	3
   716  00008A                     sqrt@x:
   717                           	opt stack 0
   718                           
   719                           ; 3 bytes @ 0x2A
   720  00008A                     	ds	3
   721  00008D                     ?_atan:
   722                           	opt stack 0
   723  00008D                     atan@f:
   724                           	opt stack 0
   725                           
   726                           ; 3 bytes @ 0x2D
   727  00008D                     	ds	3
   728  000090                     atan@y:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x30
   732  000090                     	ds	3
   733  000093                     atan@x:
   734                           	opt stack 0
   735                           
   736                           ; 3 bytes @ 0x33
   737  000093                     	ds	3
   738  000096                     atan@recip:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x36
   742  000096                     	ds	1
   743  000097                     atan@val_squared:
   744                           	opt stack 0
   745                           
   746                           ; 3 bytes @ 0x37
   747  000097                     	ds	3
   748  00009A                     atan@val:
   749                           	opt stack 0
   750                           
   751                           ; 3 bytes @ 0x3A
   752  00009A                     	ds	3
   753  00009D                     ??_main:
   754                           
   755                           ; 1 bytes @ 0x3D
   756  00009D                     	ds	2
   757  00009F                     main@accel_angle_z:
   758                           	opt stack 0
   759                           
   760                           ; 3 bytes @ 0x3F
   761  00009F                     	ds	3
   762  0000A2                     main@accel_angle_y:
   763                           	opt stack 0
   764                           
   765                           ; 3 bytes @ 0x42
   766  0000A2                     	ds	3
   767  0000A5                     main@accel_angle_x:
   768                           	opt stack 0
   769                           
   770                           ; 3 bytes @ 0x45
   771  0000A5                     	ds	3
   772  0000A8                     main@gyro_angle_x:
   773                           	opt stack 0
   774                           
   775                           ; 3 bytes @ 0x48
   776  0000A8                     	ds	3
   777  0000AB                     main@gyro_angle_y:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x4B
   781  0000AB                     	ds	3
   782  0000AE                     main@gyro_angle_z:
   783                           	opt stack 0
   784                           
   785                           ; 3 bytes @ 0x4E
   786  0000AE                     	ds	3
   787  0000B1                     main@unfiltered_gyro_angle_x:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x51
   791  0000B1                     	ds	3
   792  0000B4                     main@unfiltered_gyro_angle_y:
   793                           	opt stack 0
   794                           
   795                           ; 3 bytes @ 0x54
   796  0000B4                     	ds	3
   797  0000B7                     main@unfiltered_gyro_angle_z:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0x57
   801  0000B7                     	ds	3
   802  0000BA                     main@RADIANS_TO_DEGREES:
   803                           	opt stack 0
   804                           
   805                           ; 3 bytes @ 0x5A
   806  0000BA                     	ds	3
   807  0000BD                     main@alphaInv:
   808                           	opt stack 0
   809                           
   810                           ; 3 bytes @ 0x5D
   811  0000BD                     	ds	3
   812  0000C0                     main@gyro_x:
   813                           	opt stack 0
   814                           
   815                           ; 3 bytes @ 0x60
   816  0000C0                     	ds	3
   817  0000C3                     main@gyro_y:
   818                           	opt stack 0
   819                           
   820                           ; 3 bytes @ 0x63
   821  0000C3                     	ds	3
   822  0000C6                     main@gyro_z:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x66
   826  0000C6                     	ds	3
   827  0000C9                     main@accel_x:
   828                           	opt stack 0
   829                           
   830                           ; 3 bytes @ 0x69
   831  0000C9                     	ds	3
   832  0000CC                     main@accel_y:
   833                           	opt stack 0
   834                           
   835                           ; 3 bytes @ 0x6C
   836  0000CC                     	ds	3
   837  0000CF                     main@accel_z:
   838                           	opt stack 0
   839                           
   840                           ; 3 bytes @ 0x6F
   841  0000CF                     	ds	3
   842  0000D2                     main@angle_x:
   843                           	opt stack 0
   844                           
   845                           ; 3 bytes @ 0x72
   846  0000D2                     	ds	3
   847  0000D5                     main@angle_y:
   848                           	opt stack 0
   849                           
   850                           ; 3 bytes @ 0x75
   851  0000D5                     	ds	3
   852  0000D8                     main@angle_z:
   853                           	opt stack 0
   854                           
   855                           ; 3 bytes @ 0x78
   856  0000D8                     	ds	3
   857  0000DB                     _main$3057:
   858                           	opt stack 0
   859                           
   860                           ; 3 bytes @ 0x7B
   861  0000DB                     	ds	3
   862  0000DE                     _main$3058:
   863                           	opt stack 0
   864                           
   865                           ; 3 bytes @ 0x7E
   866  0000DE                     	ds	3
   867  0000E1                     _main$3059:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x81
   871  0000E1                     	ds	3
   872  0000E4                     _main$3060:
   873                           	opt stack 0
   874                           
   875                           ; 3 bytes @ 0x84
   876  0000E4                     	ds	3
   877  0000E7                     _main$3061:
   878                           	opt stack 0
   879                           
   880                           ; 3 bytes @ 0x87
   881  0000E7                     	ds	3
   882  0000EA                     main@alpha:
   883                           	opt stack 0
   884                           
   885                           ; 3 bytes @ 0x8A
   886  0000EA                     	ds	3
   887  0000ED                     main@FS_SEL:
   888                           	opt stack 0
   889                           
   890                           ; 3 bytes @ 0x8D
   891  0000ED                     	ds	3
   892  0000F0                     main@dt:
   893                           	opt stack 0
   894                           
   895                           ; 3 bytes @ 0x90
   896  0000F0                     	ds	3
   897                           tblptru	equ	0xFF8
   898                           postinc0	equ	0xFEE
   899                           wreg	equ	0xFE8
   900                           
   901                           	psect	cstackCOMRAM
   902  000001                     __pcstackCOMRAM:
   903                           	opt stack 0
   904  000001                     ??_IdleI2C:
   905  000001                     ?___awmod:
   906                           	opt stack 0
   907  000001                     ?___ftpack:
   908                           	opt stack 0
   909  000001                     ?_frexp:
   910                           	opt stack 0
   911  000001                     ?_get_last_x_angle:
   912                           	opt stack 0
   913  000001                     ?_get_last_y_angle:
   914                           	opt stack 0
   915  000001                     ?_get_last_z_angle:
   916                           	opt stack 0
   917  000001                     ?_get_last_gyro_x_angle:
   918                           	opt stack 0
   919  000001                     ?_get_last_gyro_y_angle:
   920                           	opt stack 0
   921  000001                     ?_get_last_gyro_z_angle:
   922                           	opt stack 0
   923  000001                     ?___ftneg:
   924                           	opt stack 0
   925  000001                     ?__tdiv_to_l_:
   926                           	opt stack 0
   927  000001                     ?__div_to_l_:
   928                           	opt stack 0
   929  000001                     ?___lldiv:
   930                           	opt stack 0
   931  000001                     ?___llmod:
   932                           	opt stack 0
   933  000001                     putch@trash:
   934                           	opt stack 0
   935  000001                     MPU6050@address:
   936                           	opt stack 0
   937  000001                     OpenI2C@slew:
   938                           	opt stack 0
   939  000001                     ___awmod@dividend:
   940                           	opt stack 0
   941  000001                     __div_to_l_@f1:
   942                           	opt stack 0
   943  000001                     ___ftpack@arg:
   944                           	opt stack 0
   945  000001                     __tdiv_to_l_@f1:
   946                           	opt stack 0
   947  000001                     ___ftge@ff1:
   948                           	opt stack 0
   949  000001                     ___ftneg@f1:
   950                           	opt stack 0
   951  000001                     frexp@value:
   952                           	opt stack 0
   953  000001                     set_last_read_angle_data@time:
   954                           	opt stack 0
   955  000001                     ___lldiv@dividend:
   956                           	opt stack 0
   957  000001                     ___llmod@dividend:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x0
   961  000001                     	ds	1
   962  000002                     putch@byte:
   963                           	opt stack 0
   964  000002                     OpenI2C@sync_mode:
   965                           	opt stack 0
   966  000002                     WriteI2C@data_out:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x1
   970  000002                     	ds	1
   971  000003                     I2Cdev_writeBytes@regAddr:
   972                           	opt stack 0
   973  000003                     ___awmod@divisor:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x2
   977  000003                     	ds	1
   978  000004                     ?_fabs:
   979                           	opt stack 0
   980  000004                     I2Cdev_writeBytes@length:
   981                           	opt stack 0
   982  000004                     ___ftpack@exp:
   983                           	opt stack 0
   984  000004                     frexp@eptr:
   985                           	opt stack 0
   986  000004                     fabs@d:
   987                           	opt stack 0
   988  000004                     __div_to_l_@f2:
   989                           	opt stack 0
   990  000004                     __tdiv_to_l_@f2:
   991                           	opt stack 0
   992  000004                     ___ftge@ff2:
   993                           	opt stack 0
   994                           
   995                           ; 3 bytes @ 0x3
   996  000004                     	ds	1
   997  000005                     ___awmod@counter:
   998                           	opt stack 0
   999  000005                     ___ftpack@sign:
  1000                           	opt stack 0
  1001  000005                     I2Cdev_writeBytes@data:
  1002                           	opt stack 0
  1003  000005                     set_last_read_angle_data@x:
  1004                           	opt stack 0
  1005  000005                     ___lldiv@divisor:
  1006                           	opt stack 0
  1007  000005                     ___llmod@divisor:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0x4
  1011  000005                     	ds	1
  1012  000006                     ??___ftpack:
  1013  000006                     ??_frexp:
  1014  000006                     ___awmod@sign:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x5
  1018  000006                     	ds	1
  1019  000007                     ??__tdiv_to_l_:
  1020  000007                     ??___ftge:
  1021  000007                     ?___awdiv:
  1022                           	opt stack 0
  1023  000007                     I2Cdev_writeBytes@devAddr:
  1024                           	opt stack 0
  1025  000007                     ___awdiv@dividend:
  1026                           	opt stack 0
  1027  000007                     __div_to_l_@quot:
  1028                           	opt stack 0
  1029                           
  1030                           ; 4 bytes @ 0x6
  1031  000007                     	ds	1
  1032  000008                     I2Cdev_writeBytes@i:
  1033                           	opt stack 0
  1034  000008                     set_last_read_angle_data@y:
  1035                           	opt stack 0
  1036                           
  1037                           ; 3 bytes @ 0x7
  1038  000008                     	ds	1
  1039  000009                     ?___awtoft:
  1040                           	opt stack 0
  1041  000009                     ?___lltoft:
  1042                           	opt stack 0
  1043  000009                     I2Cdev_writeByte@regAddr:
  1044                           	opt stack 0
  1045  000009                     ___llmod@counter:
  1046                           	opt stack 0
  1047  000009                     ___awdiv@divisor:
  1048                           	opt stack 0
  1049  000009                     ___awtoft@c:
  1050                           	opt stack 0
  1051  000009                     ___lldiv@quotient:
  1052                           	opt stack 0
  1053  000009                     ___lltoft@c:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x8
  1057  000009                     	ds	1
  1058  00000A                     I2Cdev_writeByte@data:
  1059                           	opt stack 0
  1060  00000A                     __tdiv_to_l_@quot:
  1061                           	opt stack 0
  1062                           
  1063                           ; 4 bytes @ 0x9
  1064  00000A                     	ds	1
  1065  00000B                     I2Cdev_writeByte@devAddr:
  1066                           	opt stack 0
  1067  00000B                     ___awdiv@counter:
  1068                           	opt stack 0
  1069  00000B                     __div_to_l_@cntr:
  1070                           	opt stack 0
  1071  00000B                     set_last_read_angle_data@z:
  1072                           	opt stack 0
  1073                           
  1074                           ; 3 bytes @ 0xA
  1075  00000B                     	ds	1
  1076  00000C                     ___awdiv@sign:
  1077                           	opt stack 0
  1078  00000C                     ___awtoft@sign:
  1079                           	opt stack 0
  1080  00000C                     __div_to_l_@exp1:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0xB
  1084  00000C                     	ds	1
  1085  00000D                     ??___lltoft:
  1086  00000D                     ___lldiv@counter:
  1087                           	opt stack 0
  1088  00000D                     ___awdiv@quotient:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0xC
  1092  00000D                     	ds	1
  1093  00000E                     __tdiv_to_l_@cntr:
  1094                           	opt stack 0
  1095  00000E                     set_last_read_angle_data@x_gyro:
  1096                           	opt stack 0
  1097                           
  1098                           ; 3 bytes @ 0xD
  1099  00000E                     	ds	1
  1100  00000F                     ?___wmul:
  1101                           	opt stack 0
  1102  00000F                     __tdiv_to_l_@exp1:
  1103                           	opt stack 0
  1104  00000F                     ___wmul@multiplier:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0xE
  1108  00000F                     	ds	2
  1109  000011                     ___lltoft@exp:
  1110                           	opt stack 0
  1111  000011                     ___wmul@multiplicand:
  1112                           	opt stack 0
  1113  000011                     set_last_read_angle_data@y_gyro:
  1114                           	opt stack 0
  1115                           
  1116                           ; 3 bytes @ 0x10
  1117  000011                     	ds	2
  1118  000013                     ___wmul@product:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x12
  1122  000013                     	ds	1
  1123  000014                     set_last_read_angle_data@z_gyro:
  1124                           	opt stack 0
  1125                           
  1126                           ; 3 bytes @ 0x13
  1127  000014                     	ds	1
  1128  000015                     ?___ftadd:
  1129                           	opt stack 0
  1130  000015                     I2Cdev_readBytes@regAddr:
  1131                           	opt stack 0
  1132  000015                     ___ftadd@f1:
  1133                           	opt stack 0
  1134                           
  1135                           ; 3 bytes @ 0x14
  1136  000015                     	ds	1
  1137  000016                     I2Cdev_readBytes@length:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0x15
  1141  000016                     	ds	1
  1142  000017                     I2Cdev_readBytes@data:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x16
  1146  000017                     	ds	1
  1147  000018                     ___ftadd@f2:
  1148                           	opt stack 0
  1149                           
  1150                           ; 3 bytes @ 0x17
  1151  000018                     	ds	1
  1152  000019                     ??_I2Cdev_readBytes:
  1153                           
  1154                           ; 1 bytes @ 0x18
  1155  000019                     	ds	2
  1156  00001B                     ??___ftadd:
  1157                           
  1158                           ; 1 bytes @ 0x1A
  1159  00001B                     	ds	3
  1160  00001E                     ___ftadd@sign:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x1D
  1164  00001E                     	ds	1
  1165  00001F                     I2Cdev_readBytes@devAddr:
  1166                           	opt stack 0
  1167  00001F                     ___ftadd@exp2:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0x1E
  1171  00001F                     	ds	1
  1172  000020                     I2Cdev_readBytes@count:
  1173                           	opt stack 0
  1174  000020                     ___ftadd@exp1:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x1F
  1178  000020                     	ds	1
  1179  000021                     ?___ftmul:
  1180                           	opt stack 0
  1181  000021                     ?___ftsub:
  1182                           	opt stack 0
  1183  000021                     I2Cdev_readByte@regAddr:
  1184                           	opt stack 0
  1185  000021                     MPU6050_getMotion6@ax:
  1186                           	opt stack 0
  1187  000021                     ___ftmul@f1:
  1188                           	opt stack 0
  1189  000021                     ___ftsub@f1:
  1190                           	opt stack 0
  1191                           
  1192                           ; 3 bytes @ 0x20
  1193  000021                     	ds	1
  1194  000022                     I2Cdev_readByte@data:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x21
  1198  000022                     	ds	1
  1199  000023                     MPU6050_getMotion6@ay:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x22
  1203  000023                     	ds	1
  1204  000024                     I2Cdev_readByte@devAddr:
  1205                           	opt stack 0
  1206  000024                     ___ftmul@f2:
  1207                           	opt stack 0
  1208  000024                     ___ftsub@f2:
  1209                           	opt stack 0
  1210                           
  1211                           ; 3 bytes @ 0x23
  1212  000024                     	ds	1
  1213  000025                     I2Cdev_readBits@regAddr:
  1214                           	opt stack 0
  1215  000025                     I2Cdev_writeBit@regAddr:
  1216                           	opt stack 0
  1217  000025                     I2Cdev_writeBits@regAddr:
  1218                           	opt stack 0
  1219  000025                     MPU6050_getMotion6@az:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x24
  1223  000025                     	ds	1
  1224  000026                     I2Cdev_readBits@bitStart:
  1225                           	opt stack 0
  1226  000026                     I2Cdev_writeBit@bitNum:
  1227                           	opt stack 0
  1228  000026                     I2Cdev_writeBits@bitStart:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x25
  1232  000026                     	ds	1
  1233  000027                     ??___ftmul:
  1234  000027                     I2Cdev_readBits@length:
  1235                           	opt stack 0
  1236  000027                     I2Cdev_writeBit@data:
  1237                           	opt stack 0
  1238  000027                     I2Cdev_writeBits@length:
  1239                           	opt stack 0
  1240  000027                     MPU6050_getMotion6@gx:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x26
  1244  000027                     	ds	1
  1245  000028                     ??_I2Cdev_writeBit:
  1246  000028                     I2Cdev_writeBits@data:
  1247                           	opt stack 0
  1248  000028                     I2Cdev_readBits@data:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x27
  1252  000028                     	ds	1
  1253  000029                     ??_I2Cdev_writeBits:
  1254  000029                     MPU6050_getMotion6@gy:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x28
  1258  000029                     	ds	1
  1259  00002A                     ??_I2Cdev_readBits:
  1260  00002A                     ___ftmul@exp:
  1261                           	opt stack 0
  1262                           
  1263                           ; 1 bytes @ 0x29
  1264  00002A                     	ds	1
  1265  00002B                     MPU6050_getMotion6@gz:
  1266                           	opt stack 0
  1267  00002B                     ___ftmul@f3_as_product:
  1268                           	opt stack 0
  1269                           
  1270                           ; 3 bytes @ 0x2A
  1271  00002B                     	ds	1
  1272  00002C                     I2Cdev_writeBits@devAddr:
  1273                           	opt stack 0
  1274                           
  1275                           ; 1 bytes @ 0x2B
  1276  00002C                     	ds	1
  1277  00002D                     ??_MPU6050_getMotion6:
  1278  00002D                     I2Cdev_readBits@count:
  1279                           	opt stack 0
  1280  00002D                     I2Cdev_writeBits@mask:
  1281                           	opt stack 0
  1282  00002D                     _I2Cdev_writeBit$505:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x2C
  1286  00002D                     	ds	1
  1287  00002E                     I2Cdev_readBits@devAddr:
  1288                           	opt stack 0
  1289  00002E                     I2Cdev_writeBits@b:
  1290                           	opt stack 0
  1291  00002E                     ___ftmul@cntr:
  1292                           	opt stack 0
  1293                           
  1294                           ; 1 bytes @ 0x2D
  1295  00002E                     	ds	1
  1296  00002F                     I2Cdev_readBits@mask:
  1297                           	opt stack 0
  1298  00002F                     I2Cdev_writeBit@devAddr:
  1299                           	opt stack 0
  1300  00002F                     MPU6050_setFullScaleGyroRange@range:
  1301                           	opt stack 0
  1302  00002F                     MPU6050_setFullScaleAccelRange@range:
  1303                           	opt stack 0
  1304  00002F                     MPU6050_setClockSource@source:
  1305                           	opt stack 0
  1306  00002F                     ___ftmul@sign:
  1307                           	opt stack 0
  1308                           
  1309                           ; 1 bytes @ 0x2E
  1310  00002F                     	ds	1
  1311  000030                     ?_eval_poly:
  1312                           	opt stack 0
  1313  000030                     ?_fround:
  1314                           	opt stack 0
  1315  000030                     ?_scale:
  1316                           	opt stack 0
  1317  000030                     I2Cdev_readBits@b:
  1318                           	opt stack 0
  1319  000030                     I2Cdev_writeBit@b:
  1320                           	opt stack 0
  1321  000030                     eval_poly@x:
  1322                           	opt stack 0
  1323                           
  1324                           ; 3 bytes @ 0x2F
  1325  000030                     	ds	1
  1326  000031                     MPU6050_setSleepEnabled@enabled:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x30
  1330  000031                     	ds	1
  1331  000032                     
  1332                           ; 1 bytes @ 0x31
  1333  000032                     	ds	1
  1334  000033                     eval_poly@d:
  1335                           	opt stack 0
  1336  000033                     _fround$3063:
  1337                           	opt stack 0
  1338  000033                     _scale$3064:
  1339                           	opt stack 0
  1340                           
  1341                           ; 3 bytes @ 0x32
  1342  000033                     	ds	2
  1343  000035                     eval_poly@n:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x34
  1347  000035                     	ds	1
  1348  000036                     scale@scl:
  1349                           	opt stack 0
  1350  000036                     _fround$3062:
  1351                           	opt stack 0
  1352                           
  1353                           ; 3 bytes @ 0x35
  1354  000036                     	ds	1
  1355  000037                     ??_eval_poly:
  1356  000037                     ?___fttol:
  1357                           	opt stack 0
  1358  000037                     ___fttol@f1:
  1359                           	opt stack 0
  1360                           
  1361                           ; 3 bytes @ 0x36
  1362  000037                     	ds	2
  1363  000039                     fround@prec:
  1364                           	opt stack 0
  1365  000039                     eval_poly@res:
  1366                           	opt stack 0
  1367                           
  1368                           ; 3 bytes @ 0x38
  1369  000039                     	ds	2
  1370  00003B                     ??___fttol:
  1371                           
  1372                           ; 1 bytes @ 0x3A
  1373  00003B                     	ds	1
  1374  00003C                     ?_log:
  1375                           	opt stack 0
  1376  00003C                     ?_ldexp:
  1377                           	opt stack 0
  1378  00003C                     ldexp@value:
  1379                           	opt stack 0
  1380  00003C                     log@x:
  1381                           	opt stack 0
  1382                           
  1383                           ; 3 bytes @ 0x3B
  1384  00003C                     	ds	3
  1385  00003F                     ldexp@newexp:
  1386                           	opt stack 0
  1387  00003F                     log@exponent:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x3E
  1391  00003F                     	ds	1
  1392  000040                     ___fttol@sign1:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x3F
  1396  000040                     	ds	1
  1397  000041                     ??_ldexp:
  1398  000041                     ___fttol@lval:
  1399                           	opt stack 0
  1400                           
  1401                           ; 4 bytes @ 0x40
  1402  000041                     	ds	4
  1403  000045                     ___fttol@exp1:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x44
  1407  000045                     	ds	1
  1408  000046                     ?_printf:
  1409                           	opt stack 0
  1410  000046                     ?___altoft:
  1411                           	opt stack 0
  1412  000046                     printf@f:
  1413                           	opt stack 0
  1414  000046                     ___altoft@c:
  1415                           	opt stack 0
  1416                           
  1417                           ; 4 bytes @ 0x45
  1418  000046                     	ds	4
  1419  00004A                     ??___altoft:
  1420                           
  1421                           ; 1 bytes @ 0x49
  1422  00004A                     	ds	4
  1423  00004E                     ___altoft@exp:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0x4D
  1427  00004E                     	ds	1
  1428  00004F                     ___altoft@sign:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x4E
  1432  00004F                     	ds	1
  1433  000050                     ?___ftdiv:
  1434                           	opt stack 0
  1435  000050                     ?_floor:
  1436                           	opt stack 0
  1437  000050                     ___ftdiv@f1:
  1438                           	opt stack 0
  1439  000050                     floor@x:
  1440                           	opt stack 0
  1441                           
  1442                           ; 3 bytes @ 0x4F
  1443  000050                     	ds	1
  1444  000051                     ??_printf:
  1445                           
  1446                           ; 1 bytes @ 0x50
  1447  000051                     	ds	2
  1448  000053                     ___ftdiv@f2:
  1449                           	opt stack 0
  1450  000053                     floor@i:
  1451                           	opt stack 0
  1452                           
  1453                           ; 3 bytes @ 0x52
  1454  000053                     	ds	3
  1455  000056                     ??___ftdiv:
  1456  000056                     floor@expon:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x55
  1460  000056                     	ds	3
  1461  000059                     ___ftdiv@cntr:
  1462                           	opt stack 0
  1463                           
  1464                           ; 1 bytes @ 0x58
  1465  000059                     	ds	1
  1466  00005A                     ___ftdiv@f3:
  1467                           	opt stack 0
  1468                           
  1469                           ; 3 bytes @ 0x59
  1470  00005A                     	ds	3
  1471  00005D                     ___ftdiv@exp:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x5C
  1475  00005D                     	ds	1
  1476  00005E                     ___ftdiv@sign:
  1477                           	opt stack 0
  1478                           
  1479                           ; 1 bytes @ 0x5D
  1480  00005E                     	ds	1
  1481  00005F                     ??_initBT:
  1482  00005F                     
  1483                           ; 1 bytes @ 0x5E
  1484  00005F                     	ds	1
  1485                           tblptru	equ	0xFF8
  1486                           postinc0	equ	0xFEE
  1487                           wreg	equ	0xFE8
  1488                           
  1489 ;;
  1490 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1491 ;;
  1492 ;; *************** function _main *****************
  1493 ;; Defined at:
  1494 ;;		line 139 in file "main.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  angle_z         3  120[BANK0 ] float 
  1499 ;;  angle_y         3  117[BANK0 ] float 
  1500 ;;  angle_x         3  114[BANK0 ] float 
  1501 ;;  accel_z         3  111[BANK0 ] float 
  1502 ;;  accel_y         3  108[BANK0 ] float 
  1503 ;;  accel_x         3  105[BANK0 ] float 
  1504 ;;  gyro_z          3  102[BANK0 ] float 
  1505 ;;  gyro_y          3   99[BANK0 ] float 
  1506 ;;  gyro_x          3   96[BANK0 ] float 
  1507 ;;  unfiltered_g    3   87[BANK0 ] float 
  1508 ;;  unfiltered_g    3   84[BANK0 ] float 
  1509 ;;  unfiltered_g    3   81[BANK0 ] float 
  1510 ;;  gyro_angle_z    3   78[BANK0 ] float 
  1511 ;;  gyro_angle_y    3   75[BANK0 ] float 
  1512 ;;  gyro_angle_x    3   72[BANK0 ] float 
  1513 ;;  accel_angle_    3   69[BANK0 ] float 
  1514 ;;  accel_angle_    3   66[BANK0 ] float 
  1515 ;;  accel_angle_    3   63[BANK0 ] float 
  1516 ;;  dt              3  144[BANK0 ] float 
  1517 ;;  FS_SEL          3  141[BANK0 ] float 
  1518 ;;  alpha           3  138[BANK0 ] float 
  1519 ;;  alphaInv        3   93[BANK0 ] float 
  1520 ;;  RADIANS_TO_D    3   90[BANK0 ] float 
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  2  119[None  ] int 
  1523 ;; Registers used:
  1524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1530 ;;      Params:         0       0       0       0       0       0       0       0       0
  1531 ;;      Locals:         0      84       0       0       0       0       0       0       0
  1532 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1533 ;;      Totals:         0      86       0       0       0       0       0       0       0
  1534 ;;Total ram usage:       86 bytes
  1535 ;; Hardware stack levels required when called:    7
  1536 ;; This function calls:
  1537 ;;		_MPU6050
  1538 ;;		_MPU6050_initialize
  1539 ;;		_MPU6050_testConnection
  1540 ;;		_OpenI2C
  1541 ;;		___awtoft
  1542 ;;		___ftadd
  1543 ;;		___ftdiv
  1544 ;;		___ftmul
  1545 ;;		___ftneg
  1546 ;;		_atan
  1547 ;;		_calibrate_sensors
  1548 ;;		_get_last_gyro_x_angle
  1549 ;;		_get_last_gyro_y_angle
  1550 ;;		_get_last_gyro_z_angle
  1551 ;;		_get_last_x_angle
  1552 ;;		_get_last_y_angle
  1553 ;;		_get_last_z_angle
  1554 ;;		_initBT
  1555 ;;		_initIO
  1556 ;;		_pow
  1557 ;;		_printf
  1558 ;;		_read_gyro_accel_vals
  1559 ;;		_set_last_read_angle_data
  1560 ;;		_sqrt
  1561 ;; This function is called by:
  1562 ;;		Startup code after reset
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text0
  1567  007750                     __ptext0:
  1568                           	opt stack 0
  1569  007750                     _main:
  1570                           	opt stack 24
  1571                           
  1572                           ;main.c: 142: float RADIANS_TO_DEGREES = 180/3.14159;
  1573                           
  1574                           ;incstack = 0
  1575  007750  0E2F               	movlw	47
  1576  007752  0100               	movlb	0	; () banked
  1577  007754  6FBA               	movwf	main@RADIANS_TO_DEGREES& (0+255),b
  1578  007756  0E65               	movlw	101
  1579  007758  6FBB               	movwf	(main@RADIANS_TO_DEGREES+1)& (0+255),b
  1580  00775A  0E42               	movlw	66
  1581  00775C  6FBC               	movwf	(main@RADIANS_TO_DEGREES+2)& (0+255),b
  1582                           
  1583                           ;main.c: 143: float alpha = 0.96;
  1584  00775E  0EC3               	movlw	195
  1585  007760  6FEA               	movwf	main@alpha& (0+255),b
  1586  007762  0E75               	movlw	117
  1587  007764  6FEB               	movwf	(main@alpha+1)& (0+255),b
  1588  007766  0E3F               	movlw	63
  1589  007768  6FEC               	movwf	(main@alpha+2)& (0+255),b
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;main.c: 144: float alphaInv = (1.0-alpha);
  1593  00776A  C0EA  F001         	movff	main@alpha,___ftneg@f1
  1594  00776E  C0EB  F002         	movff	main@alpha+1,___ftneg@f1+1
  1595  007772  C0EC  F003         	movff	main@alpha+2,___ftneg@f1+2
  1596  007776  ECD5  F025         	call	___ftneg	;wreg free
  1597  00777A  C001  F015         	movff	?___ftneg,___ftadd@f1
  1598  00777E  C002  F016         	movff	?___ftneg+1,___ftadd@f1+1
  1599  007782  C003  F017         	movff	?___ftneg+2,___ftadd@f1+2
  1600  007786  0E00               	movlw	0
  1601  007788  6E18               	movwf	___ftadd@f2,c
  1602  00778A  0E80               	movlw	128
  1603  00778C  6E19               	movwf	___ftadd@f2+1,c
  1604  00778E  0E3F               	movlw	63
  1605  007790  6E1A               	movwf	___ftadd@f2+2,c
  1606  007792  EC28  F031         	call	___ftadd	;wreg free
  1607  007796  C015  F0BD         	movff	?___ftadd,main@alphaInv
  1608  00779A  C016  F0BE         	movff	?___ftadd+1,main@alphaInv+1
  1609  00779E  C017  F0BF         	movff	?___ftadd+2,main@alphaInv+2
  1610                           
  1611                           ;main.c: 145: float dt = 0.02;
  1612  0077A2  0ED7               	movlw	215
  1613  0077A4  0100               	movlb	0	; () banked
  1614  0077A6  6FF0               	movwf	main@dt& (0+255),b
  1615  0077A8  0EA3               	movlw	163
  1616  0077AA  6FF1               	movwf	(main@dt+1)& (0+255),b
  1617  0077AC  0E3C               	movlw	60
  1618  0077AE  6FF2               	movwf	(main@dt+2)& (0+255),b
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;main.c: 146: float FS_SEL = 131;
  1622  0077B0  0E00               	movlw	0
  1623  0077B2  6FED               	movwf	main@FS_SEL& (0+255),b
  1624  0077B4  0E03               	movlw	3
  1625  0077B6  6FEE               	movwf	(main@FS_SEL+1)& (0+255),b
  1626  0077B8  0E43               	movlw	67
  1627  0077BA  6FEF               	movwf	(main@FS_SEL+2)& (0+255),b
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;main.c: 148: OSCCON = 0x72;
  1631  0077BC  0E72               	movlw	114
  1632  0077BE  6ED3               	movwf	4051,c	;volatile
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;main.c: 150: initIO();
  1636  0077C0  ECB3  F025         	call	_initIO	;wreg free
  1637                           
  1638                           ;main.c: 151: initBT();
  1639  0077C4  ECFA  F025         	call	_initBT	;wreg free
  1640                           
  1641                           ;main.c: 154: _delay((unsigned long)((30)*(8000000/4000.0)));
  1642  0077C8  0E4E               	movlw	78
  1643  0077CA  0100               	movlb	0	; () banked
  1644  0077CC  6F9D               	movwf	??_main& (0+255),b
  1645  0077CE  0EEB               	movlw	235
  1646  0077D0                     u5047:
  1647  0077D0  2EE8               	decfsz	wreg,f,c
  1648  0077D2  D7FE               	bra	u5047
  1649  0077D4  2F9D               	decfsz	??_main& (0+255),f,b
  1650  0077D6  D7FC               	bra	u5047
  1651                           
  1652                           ;main.c: 156: OpenI2C(0b00001000, 0b10000000);
  1653  0077D8  0E80               	movlw	128
  1654  0077DA  6E01               	movwf	OpenI2C@slew,c
  1655  0077DC  0E08               	movlw	8
  1656  0077DE  EC83  F025         	call	_OpenI2C
  1657                           
  1658                           ;main.c: 157: SSPADD = 14;
  1659  0077E2  0E0E               	movlw	14
  1660  0077E4  6EC8               	movwf	4040,c	;volatile
  1661                           
  1662                           ;main.c: 159: MPU6050(0x68);
  1663  0077E6  0E68               	movlw	104
  1664  0077E8  ECD8  F024         	call	_MPU6050
  1665                           
  1666                           ;main.c: 160: printf("Init MPU... \r\n");
  1667  0077EC  0EC5               	movlw	low STR_1
  1668  0077EE  6E46               	movwf	printf@f,c
  1669  0077F0  0E7F               	movlw	high STR_1
  1670  0077F2  6E47               	movwf	printf@f+1,c
  1671  0077F4  ECB0  F038         	call	_printf	;wreg free
  1672                           
  1673                           ;main.c: 161: MPU6050_initialize();
  1674  0077F8  EC3E  F025         	call	_MPU6050_initialize	;wreg free
  1675                           
  1676                           ;main.c: 162: _delay((unsigned long)((30)*(8000000/4000.0)));
  1677  0077FC  0E4E               	movlw	78
  1678  0077FE  0100               	movlb	0	; () banked
  1679  007800  6F9D               	movwf	??_main& (0+255),b
  1680  007802  0EEB               	movlw	235
  1681  007804                     u5057:
  1682  007804  2EE8               	decfsz	wreg,f,c
  1683  007806  D7FE               	bra	u5057
  1684  007808  2F9D               	decfsz	??_main& (0+255),f,b
  1685  00780A  D7FC               	bra	u5057
  1686                           
  1687                           ;main.c: 163: if(MPU6050_testConnection())
  1688  00780C  EC0F  F025         	call	_MPU6050_testConnection	;wreg free
  1689  007810  0900               	iorlw	0
  1690  007812  B4D8               	btfsc	status,2,c
  1691  007814  D007               	goto	l120
  1692                           
  1693                           ;main.c: 164: printf("MPU enabled!\r\n");
  1694  007816  0ED4               	movlw	low STR_2
  1695  007818  6E46               	movwf	printf@f,c
  1696  00781A  0E7F               	movlw	high STR_2
  1697  00781C  6E47               	movwf	printf@f+1,c
  1698  00781E  ECB0  F038         	call	_printf	;wreg free
  1699  007822  D006               	goto	l121
  1700  007824                     l120:
  1701                           
  1702                           ;main.c: 165: else printf("MPU failure\r\n");
  1703  007824  0EE3               	movlw	low STR_3
  1704  007826  6E46               	movwf	printf@f,c
  1705  007828  0E7F               	movlw	high STR_3
  1706  00782A  6E47               	movwf	printf@f+1,c
  1707  00782C  ECB0  F038         	call	_printf	;wreg free
  1708  007830                     l121:
  1709                           
  1710                           ;main.c: 167: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1711  007830  0E0B               	movlw	11
  1712  007832  0100               	movlb	0	; () banked
  1713  007834  6F9E               	movwf	(??_main+1)& (0+255),b
  1714  007836  0E26               	movlw	38
  1715  007838  6F9D               	movwf	??_main& (0+255),b
  1716  00783A  0E5D               	movlw	93
  1717  00783C                     u5067:
  1718  00783C  2EE8               	decfsz	wreg,f,c
  1719  00783E  D7FE               	bra	u5067
  1720  007840  2F9D               	decfsz	??_main& (0+255),f,b
  1721  007842  D7FC               	bra	u5067
  1722  007844  2F9E               	decfsz	(??_main+1)& (0+255),f,b
  1723  007846  D7FA               	bra	u5067
  1724  007848  D000               	nop2	
  1725                           
  1726                           ;main.c: 168: calibrate_sensors();
  1727  00784A  EC02  F035         	call	_calibrate_sensors	;wreg free
  1728  00784E                     
  1729                           ;main.c: 171: LATCbits.LC2=1;
  1730  00784E  848B               	bsf	3979,2,c	;volatile
  1731                           
  1732                           ;main.c: 174: read_gyro_accel_vals();
  1733  007850  EC0F  F027         	call	_read_gyro_accel_vals	;wreg free
  1734                           
  1735                           ;main.c: 179: float gyro_x = (x_gyro - base_x_gyro)/FS_SEL;
  1736  007854  C10A  F001         	movff	_base_x_gyro,___ftneg@f1
  1737  007858  C10B  F002         	movff	_base_x_gyro+1,___ftneg@f1+1
  1738  00785C  C10C  F003         	movff	_base_x_gyro+2,___ftneg@f1+2
  1739  007860  ECD5  F025         	call	___ftneg	;wreg free
  1740  007864  C001  F018         	movff	?___ftneg,___ftadd@f2
  1741  007868  C002  F019         	movff	?___ftneg+1,___ftadd@f2+1
  1742  00786C  C003  F01A         	movff	?___ftneg+2,___ftadd@f2+2
  1743  007870  C0F7  F009         	movff	_x_gyro,___awtoft@c
  1744  007874  C0F8  F00A         	movff	_x_gyro+1,___awtoft@c+1
  1745  007878  EC25  F026         	call	___awtoft	;wreg free
  1746  00787C  C009  F015         	movff	?___awtoft,___ftadd@f1
  1747  007880  C00A  F016         	movff	?___awtoft+1,___ftadd@f1+1
  1748  007884  C00B  F017         	movff	?___awtoft+2,___ftadd@f1+2
  1749  007888  EC28  F031         	call	___ftadd	;wreg free
  1750  00788C  C015  F050         	movff	?___ftadd,___ftdiv@f1
  1751  007890  C016  F051         	movff	?___ftadd+1,___ftdiv@f1+1
  1752  007894  C017  F052         	movff	?___ftadd+2,___ftdiv@f1+2
  1753  007898  C0ED  F053         	movff	main@FS_SEL,___ftdiv@f2
  1754  00789C  C0EE  F054         	movff	main@FS_SEL+1,___ftdiv@f2+1
  1755  0078A0  C0EF  F055         	movff	main@FS_SEL+2,___ftdiv@f2+2
  1756  0078A4  EC8B  F02B         	call	___ftdiv	;wreg free
  1757  0078A8  C050  F0C0         	movff	?___ftdiv,main@gyro_x
  1758  0078AC  C051  F0C1         	movff	?___ftdiv+1,main@gyro_x+1
  1759  0078B0  C052  F0C2         	movff	?___ftdiv+2,main@gyro_x+2
  1760                           
  1761                           ;main.c: 180: float gyro_y = (y_gyro - base_y_gyro)/FS_SEL;
  1762  0078B4  C107  F001         	movff	_base_y_gyro,___ftneg@f1
  1763  0078B8  C108  F002         	movff	_base_y_gyro+1,___ftneg@f1+1
  1764  0078BC  C109  F003         	movff	_base_y_gyro+2,___ftneg@f1+2
  1765  0078C0  ECD5  F025         	call	___ftneg	;wreg free
  1766  0078C4  C001  F018         	movff	?___ftneg,___ftadd@f2
  1767  0078C8  C002  F019         	movff	?___ftneg+1,___ftadd@f2+1
  1768  0078CC  C003  F01A         	movff	?___ftneg+2,___ftadd@f2+2
  1769  0078D0  C0F5  F009         	movff	_y_gyro,___awtoft@c
  1770  0078D4  C0F6  F00A         	movff	_y_gyro+1,___awtoft@c+1
  1771  0078D8  EC25  F026         	call	___awtoft	;wreg free
  1772  0078DC  C009  F015         	movff	?___awtoft,___ftadd@f1
  1773  0078E0  C00A  F016         	movff	?___awtoft+1,___ftadd@f1+1
  1774  0078E4  C00B  F017         	movff	?___awtoft+2,___ftadd@f1+2
  1775  0078E8  EC28  F031         	call	___ftadd	;wreg free
  1776  0078EC  C015  F050         	movff	?___ftadd,___ftdiv@f1
  1777  0078F0  C016  F051         	movff	?___ftadd+1,___ftdiv@f1+1
  1778  0078F4  C017  F052         	movff	?___ftadd+2,___ftdiv@f1+2
  1779  0078F8  C0ED  F053         	movff	main@FS_SEL,___ftdiv@f2
  1780  0078FC  C0EE  F054         	movff	main@FS_SEL+1,___ftdiv@f2+1
  1781  007900  C0EF  F055         	movff	main@FS_SEL+2,___ftdiv@f2+2
  1782  007904  EC8B  F02B         	call	___ftdiv	;wreg free
  1783  007908  C050  F0C3         	movff	?___ftdiv,main@gyro_y
  1784  00790C  C051  F0C4         	movff	?___ftdiv+1,main@gyro_y+1
  1785  007910  C052  F0C5         	movff	?___ftdiv+2,main@gyro_y+2
  1786                           
  1787                           ;main.c: 181: float gyro_z = (z_gyro - base_z_gyro)/FS_SEL;
  1788  007914  C104  F001         	movff	_base_z_gyro,___ftneg@f1
  1789  007918  C105  F002         	movff	_base_z_gyro+1,___ftneg@f1+1
  1790  00791C  C106  F003         	movff	_base_z_gyro+2,___ftneg@f1+2
  1791  007920  ECD5  F025         	call	___ftneg	;wreg free
  1792  007924  C001  F018         	movff	?___ftneg,___ftadd@f2
  1793  007928  C002  F019         	movff	?___ftneg+1,___ftadd@f2+1
  1794  00792C  C003  F01A         	movff	?___ftneg+2,___ftadd@f2+2
  1795  007930  C0F3  F009         	movff	_z_gyro,___awtoft@c
  1796  007934  C0F4  F00A         	movff	_z_gyro+1,___awtoft@c+1
  1797  007938  EC25  F026         	call	___awtoft	;wreg free
  1798  00793C  C009  F015         	movff	?___awtoft,___ftadd@f1
  1799  007940  C00A  F016         	movff	?___awtoft+1,___ftadd@f1+1
  1800  007944  C00B  F017         	movff	?___awtoft+2,___ftadd@f1+2
  1801  007948  EC28  F031         	call	___ftadd	;wreg free
  1802  00794C  C015  F050         	movff	?___ftadd,___ftdiv@f1
  1803  007950  C016  F051         	movff	?___ftadd+1,___ftdiv@f1+1
  1804  007954  C017  F052         	movff	?___ftadd+2,___ftdiv@f1+2
  1805  007958  C0ED  F053         	movff	main@FS_SEL,___ftdiv@f2
  1806  00795C  C0EE  F054         	movff	main@FS_SEL+1,___ftdiv@f2+1
  1807  007960  C0EF  F055         	movff	main@FS_SEL+2,___ftdiv@f2+2
  1808  007964  EC8B  F02B         	call	___ftdiv	;wreg free
  1809  007968  C050  F0C6         	movff	?___ftdiv,main@gyro_z
  1810  00796C  C051  F0C7         	movff	?___ftdiv+1,main@gyro_z+1
  1811  007970  C052  F0C8         	movff	?___ftdiv+2,main@gyro_z+2
  1812                           
  1813                           ;main.c: 186: float accel_x = x_accel;
  1814  007974  C0FD  F009         	movff	_x_accel,___awtoft@c
  1815  007978  C0FE  F00A         	movff	_x_accel+1,___awtoft@c+1
  1816  00797C  EC25  F026         	call	___awtoft	;wreg free
  1817  007980  C009  F0C9         	movff	?___awtoft,main@accel_x
  1818  007984  C00A  F0CA         	movff	?___awtoft+1,main@accel_x+1
  1819  007988  C00B  F0CB         	movff	?___awtoft+2,main@accel_x+2
  1820                           
  1821                           ;main.c: 187: float accel_y = y_accel;
  1822  00798C  C0FB  F009         	movff	_y_accel,___awtoft@c
  1823  007990  C0FC  F00A         	movff	_y_accel+1,___awtoft@c+1
  1824  007994  EC25  F026         	call	___awtoft	;wreg free
  1825  007998  C009  F0CC         	movff	?___awtoft,main@accel_y
  1826  00799C  C00A  F0CD         	movff	?___awtoft+1,main@accel_y+1
  1827  0079A0  C00B  F0CE         	movff	?___awtoft+2,main@accel_y+2
  1828                           
  1829                           ;main.c: 188: float accel_z = z_accel;
  1830  0079A4  C0F9  F009         	movff	_z_accel,___awtoft@c
  1831  0079A8  C0FA  F00A         	movff	_z_accel+1,___awtoft@c+1
  1832  0079AC  EC25  F026         	call	___awtoft	;wreg free
  1833  0079B0  C009  F0CF         	movff	?___awtoft,main@accel_z
  1834  0079B4  C00A  F0D0         	movff	?___awtoft+1,main@accel_z+1
  1835  0079B8  C00B  F0D1         	movff	?___awtoft+2,main@accel_z+2
  1836                           
  1837                           ;main.c: 191: float accel_angle_y = atan(-1*accel_x/sqrt(pow(accel_y,2) + pow(accel_z,2)
      +                          ))*RADIANS_TO_DEGREES;
  1838  0079BC  0E00               	movlw	0
  1839  0079BE  0100               	movlb	0	; () banked
  1840  0079C0  6F6C               	movwf	pow@y& (0+255),b
  1841  0079C2  0E00               	movlw	0
  1842  0079C4  6F6D               	movwf	(pow@y+1)& (0+255),b
  1843  0079C6  0E40               	movlw	64
  1844  0079C8  6F6E               	movwf	(pow@y+2)& (0+255),b
  1845  0079CA  C0CF  F069         	movff	main@accel_z,pow@x
  1846  0079CE  C0D0  F06A         	movff	main@accel_z+1,pow@x+1
  1847  0079D2  C0D1  F06B         	movff	main@accel_z+2,pow@x+2
  1848  0079D6  EC9D  F02F         	call	_pow	;wreg free
  1849  0079DA  C069  F0DB         	movff	?_pow,_main$3057
  1850  0079DE  C06A  F0DC         	movff	?_pow+1,_main$3057+1
  1851  0079E2  C06B  F0DD         	movff	?_pow+2,_main$3057+2
  1852                           
  1853                           ;main.c: 191: float accel_angle_y = atan(-1*accel_x/sqrt(pow(accel_y,2) + pow(accel_z,2)
      +                          ))*RADIANS_TO_DEGREES;
  1854  0079E6  0E00               	movlw	0
  1855  0079E8  0100               	movlb	0	; () banked
  1856  0079EA  6F6C               	movwf	pow@y& (0+255),b
  1857  0079EC  0E00               	movlw	0
  1858  0079EE  6F6D               	movwf	(pow@y+1)& (0+255),b
  1859  0079F0  0E40               	movlw	64
  1860  0079F2  6F6E               	movwf	(pow@y+2)& (0+255),b
  1861  0079F4  C0CC  F069         	movff	main@accel_y,pow@x
  1862  0079F8  C0CD  F06A         	movff	main@accel_y+1,pow@x+1
  1863  0079FC  C0CE  F06B         	movff	main@accel_y+2,pow@x+2
  1864  007A00  EC9D  F02F         	call	_pow	;wreg free
  1865  007A04  C069  F0DE         	movff	?_pow,_main$3058
  1866  007A08  C06A  F0DF         	movff	?_pow+1,_main$3058+1
  1867  007A0C  C06B  F0E0         	movff	?_pow+2,_main$3058+2
  1868                           
  1869                           ;main.c: 191: float accel_angle_y = atan(-1*accel_x/sqrt(pow(accel_y,2) + pow(accel_z,2)
      +                          ))*RADIANS_TO_DEGREES;
  1870  007A10  C0DB  F018         	movff	_main$3057,___ftadd@f2
  1871  007A14  C0DC  F019         	movff	_main$3057+1,___ftadd@f2+1
  1872  007A18  C0DD  F01A         	movff	_main$3057+2,___ftadd@f2+2
  1873  007A1C  C0DE  F015         	movff	_main$3058,___ftadd@f1
  1874  007A20  C0DF  F016         	movff	_main$3058+1,___ftadd@f1+1
  1875  007A24  C0E0  F017         	movff	_main$3058+2,___ftadd@f1+2
  1876  007A28  EC28  F031         	call	___ftadd	;wreg free
  1877  007A2C  C015  F0E1         	movff	?___ftadd,_main$3059
  1878  007A30  C016  F0E2         	movff	?___ftadd+1,_main$3059+1
  1879  007A34  C017  F0E3         	movff	?___ftadd+2,_main$3059+2
  1880                           
  1881                           ;main.c: 191: float accel_angle_y = atan(-1*accel_x/sqrt(pow(accel_y,2) + pow(accel_z,2)
      +                          ))*RADIANS_TO_DEGREES;
  1882  007A38  C0E1  F07A         	movff	_main$3059,sqrt@a
  1883  007A3C  C0E2  F07B         	movff	_main$3059+1,sqrt@a+1
  1884  007A40  C0E3  F07C         	movff	_main$3059+2,sqrt@a+2
  1885  007A44  EC5D  F030         	call	_sqrt	;wreg free
  1886  007A48  C07A  F053         	movff	?_sqrt,___ftdiv@f2
  1887  007A4C  C07B  F054         	movff	?_sqrt+1,___ftdiv@f2+1
  1888  007A50  C07C  F055         	movff	?_sqrt+2,___ftdiv@f2+2
  1889  007A54  0E00               	movlw	0
  1890  007A56  6E24               	movwf	___ftmul@f2,c
  1891  007A58  0E80               	movlw	128
  1892  007A5A  6E25               	movwf	___ftmul@f2+1,c
  1893  007A5C  0EBF               	movlw	191
  1894  007A5E  6E26               	movwf	___ftmul@f2+2,c
  1895  007A60  C0C9  F021         	movff	main@accel_x,___ftmul@f1
  1896  007A64  C0CA  F022         	movff	main@accel_x+1,___ftmul@f1+1
  1897  007A68  C0CB  F023         	movff	main@accel_x+2,___ftmul@f1+2
  1898  007A6C  EC73  F02C         	call	___ftmul	;wreg free
  1899  007A70  C021  F050         	movff	?___ftmul,___ftdiv@f1
  1900  007A74  C022  F051         	movff	?___ftmul+1,___ftdiv@f1+1
  1901  007A78  C023  F052         	movff	?___ftmul+2,___ftdiv@f1+2
  1902  007A7C  EC8B  F02B         	call	___ftdiv	;wreg free
  1903  007A80  C050  F0E4         	movff	?___ftdiv,_main$3060
  1904  007A84  C051  F0E5         	movff	?___ftdiv+1,_main$3060+1
  1905  007A88  C052  F0E6         	movff	?___ftdiv+2,_main$3060+2
  1906                           
  1907                           ;main.c: 191: float accel_angle_y = atan(-1*accel_x/sqrt(pow(accel_y,2) + pow(accel_z,2)
      +                          ))*RADIANS_TO_DEGREES;
  1908  007A8C  C0E4  F08D         	movff	_main$3060,atan@f
  1909  007A90  C0E5  F08E         	movff	_main$3060+1,atan@f+1
  1910  007A94  C0E6  F08F         	movff	_main$3060+2,atan@f+2
  1911  007A98  ECFE  F031         	call	_atan	;wreg free
  1912  007A9C  C08D  F0E7         	movff	?_atan,_main$3061
  1913  007AA0  C08E  F0E8         	movff	?_atan+1,_main$3061+1
  1914  007AA4  C08F  F0E9         	movff	?_atan+2,_main$3061+2
  1915                           
  1916                           ;main.c: 191: float accel_angle_y = atan(-1*accel_x/sqrt(pow(accel_y,2) + pow(accel_z,2)
      +                          ))*RADIANS_TO_DEGREES;
  1917  007AA8  C0E7  F021         	movff	_main$3061,___ftmul@f1
  1918  007AAC  C0E8  F022         	movff	_main$3061+1,___ftmul@f1+1
  1919  007AB0  C0E9  F023         	movff	_main$3061+2,___ftmul@f1+2
  1920  007AB4  C0BA  F024         	movff	main@RADIANS_TO_DEGREES,___ftmul@f2
  1921  007AB8  C0BB  F025         	movff	main@RADIANS_TO_DEGREES+1,___ftmul@f2+1
  1922  007ABC  C0BC  F026         	movff	main@RADIANS_TO_DEGREES+2,___ftmul@f2+2
  1923  007AC0  EC73  F02C         	call	___ftmul	;wreg free
  1924  007AC4  C021  F0A2         	movff	?___ftmul,main@accel_angle_y
  1925  007AC8  C022  F0A3         	movff	?___ftmul+1,main@accel_angle_y+1
  1926  007ACC  C023  F0A4         	movff	?___ftmul+2,main@accel_angle_y+2
  1927                           
  1928                           ;main.c: 192: float accel_angle_x = atan(accel_y/sqrt(pow(accel_x,2) + pow(accel_z,2)))*
      +                          RADIANS_TO_DEGREES;
  1929  007AD0  0E00               	movlw	0
  1930  007AD2  0100               	movlb	0	; () banked
  1931  007AD4  6F6C               	movwf	pow@y& (0+255),b
  1932  007AD6  0E00               	movlw	0
  1933  007AD8  6F6D               	movwf	(pow@y+1)& (0+255),b
  1934  007ADA  0E40               	movlw	64
  1935  007ADC  6F6E               	movwf	(pow@y+2)& (0+255),b
  1936  007ADE  C0CF  F069         	movff	main@accel_z,pow@x
  1937  007AE2  C0D0  F06A         	movff	main@accel_z+1,pow@x+1
  1938  007AE6  C0D1  F06B         	movff	main@accel_z+2,pow@x+2
  1939  007AEA  EC9D  F02F         	call	_pow	;wreg free
  1940  007AEE  C069  F0DB         	movff	?_pow,_main$3057
  1941  007AF2  C06A  F0DC         	movff	?_pow+1,_main$3057+1
  1942  007AF6  C06B  F0DD         	movff	?_pow+2,_main$3057+2
  1943                           
  1944                           ;main.c: 192: float accel_angle_x = atan(accel_y/sqrt(pow(accel_x,2) + pow(accel_z,2)))*
      +                          RADIANS_TO_DEGREES;
  1945  007AFA  0E00               	movlw	0
  1946  007AFC  0100               	movlb	0	; () banked
  1947  007AFE  6F6C               	movwf	pow@y& (0+255),b
  1948  007B00  0E00               	movlw	0
  1949  007B02  6F6D               	movwf	(pow@y+1)& (0+255),b
  1950  007B04  0E40               	movlw	64
  1951  007B06  6F6E               	movwf	(pow@y+2)& (0+255),b
  1952  007B08  C0C9  F069         	movff	main@accel_x,pow@x
  1953  007B0C  C0CA  F06A         	movff	main@accel_x+1,pow@x+1
  1954  007B10  C0CB  F06B         	movff	main@accel_x+2,pow@x+2
  1955  007B14  EC9D  F02F         	call	_pow	;wreg free
  1956  007B18  C069  F0DE         	movff	?_pow,_main$3058
  1957  007B1C  C06A  F0DF         	movff	?_pow+1,_main$3058+1
  1958  007B20  C06B  F0E0         	movff	?_pow+2,_main$3058+2
  1959                           
  1960                           ;main.c: 192: float accel_angle_x = atan(accel_y/sqrt(pow(accel_x,2) + pow(accel_z,2)))*
      +                          RADIANS_TO_DEGREES;
  1961  007B24  C0DB  F018         	movff	_main$3057,___ftadd@f2
  1962  007B28  C0DC  F019         	movff	_main$3057+1,___ftadd@f2+1
  1963  007B2C  C0DD  F01A         	movff	_main$3057+2,___ftadd@f2+2
  1964  007B30  C0DE  F015         	movff	_main$3058,___ftadd@f1
  1965  007B34  C0DF  F016         	movff	_main$3058+1,___ftadd@f1+1
  1966  007B38  C0E0  F017         	movff	_main$3058+2,___ftadd@f1+2
  1967  007B3C  EC28  F031         	call	___ftadd	;wreg free
  1968  007B40  C015  F0E1         	movff	?___ftadd,_main$3059
  1969  007B44  C016  F0E2         	movff	?___ftadd+1,_main$3059+1
  1970  007B48  C017  F0E3         	movff	?___ftadd+2,_main$3059+2
  1971                           
  1972                           ;main.c: 192: float accel_angle_x = atan(accel_y/sqrt(pow(accel_x,2) + pow(accel_z,2)))*
      +                          RADIANS_TO_DEGREES;
  1973  007B4C  C0E1  F07A         	movff	_main$3059,sqrt@a
  1974  007B50  C0E2  F07B         	movff	_main$3059+1,sqrt@a+1
  1975  007B54  C0E3  F07C         	movff	_main$3059+2,sqrt@a+2
  1976  007B58  EC5D  F030         	call	_sqrt	;wreg free
  1977  007B5C  C07A  F053         	movff	?_sqrt,___ftdiv@f2
  1978  007B60  C07B  F054         	movff	?_sqrt+1,___ftdiv@f2+1
  1979  007B64  C07C  F055         	movff	?_sqrt+2,___ftdiv@f2+2
  1980  007B68  C0CC  F050         	movff	main@accel_y,___ftdiv@f1
  1981  007B6C  C0CD  F051         	movff	main@accel_y+1,___ftdiv@f1+1
  1982  007B70  C0CE  F052         	movff	main@accel_y+2,___ftdiv@f1+2
  1983  007B74  EC8B  F02B         	call	___ftdiv	;wreg free
  1984  007B78  C050  F0E4         	movff	?___ftdiv,_main$3060
  1985  007B7C  C051  F0E5         	movff	?___ftdiv+1,_main$3060+1
  1986  007B80  C052  F0E6         	movff	?___ftdiv+2,_main$3060+2
  1987                           
  1988                           ;main.c: 192: float accel_angle_x = atan(accel_y/sqrt(pow(accel_x,2) + pow(accel_z,2)))*
      +                          RADIANS_TO_DEGREES;
  1989  007B84  C0E4  F08D         	movff	_main$3060,atan@f
  1990  007B88  C0E5  F08E         	movff	_main$3060+1,atan@f+1
  1991  007B8C  C0E6  F08F         	movff	_main$3060+2,atan@f+2
  1992  007B90  ECFE  F031         	call	_atan	;wreg free
  1993  007B94  C08D  F0E7         	movff	?_atan,_main$3061
  1994  007B98  C08E  F0E8         	movff	?_atan+1,_main$3061+1
  1995  007B9C  C08F  F0E9         	movff	?_atan+2,_main$3061+2
  1996                           
  1997                           ;main.c: 192: float accel_angle_x = atan(accel_y/sqrt(pow(accel_x,2) + pow(accel_z,2)))*
      +                          RADIANS_TO_DEGREES;
  1998  007BA0  C0E7  F021         	movff	_main$3061,___ftmul@f1
  1999  007BA4  C0E8  F022         	movff	_main$3061+1,___ftmul@f1+1
  2000  007BA8  C0E9  F023         	movff	_main$3061+2,___ftmul@f1+2
  2001  007BAC  C0BA  F024         	movff	main@RADIANS_TO_DEGREES,___ftmul@f2
  2002  007BB0  C0BB  F025         	movff	main@RADIANS_TO_DEGREES+1,___ftmul@f2+1
  2003  007BB4  C0BC  F026         	movff	main@RADIANS_TO_DEGREES+2,___ftmul@f2+2
  2004  007BB8  EC73  F02C         	call	___ftmul	;wreg free
  2005  007BBC  C021  F0A5         	movff	?___ftmul,main@accel_angle_x
  2006  007BC0  C022  F0A6         	movff	?___ftmul+1,main@accel_angle_x+1
  2007  007BC4  C023  F0A7         	movff	?___ftmul+2,main@accel_angle_x+2
  2008                           
  2009                           ;main.c: 193: float accel_angle_z = 0;
  2010  007BC8  0E00               	movlw	0
  2011  007BCA  0100               	movlb	0	; () banked
  2012  007BCC  6F9F               	movwf	main@accel_angle_z& (0+255),b
  2013  007BCE  0E00               	movlw	0
  2014  007BD0  6FA0               	movwf	(main@accel_angle_z+1)& (0+255),b
  2015  007BD2  0E00               	movlw	0
  2016  007BD4  6FA1               	movwf	(main@accel_angle_z+2)& (0+255),b
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;main.c: 197: float gyro_angle_x = gyro_x*dt + get_last_x_angle();
  2020  007BD6  C0F0  F024         	movff	main@dt,___ftmul@f2
  2021  007BDA  C0F1  F025         	movff	main@dt+1,___ftmul@f2+1
  2022  007BDE  C0F2  F026         	movff	main@dt+2,___ftmul@f2+2
  2023  007BE2  C0C0  F021         	movff	main@gyro_x,___ftmul@f1
  2024  007BE6  C0C1  F022         	movff	main@gyro_x+1,___ftmul@f1+1
  2025  007BEA  C0C2  F023         	movff	main@gyro_x+2,___ftmul@f1+2
  2026  007BEE  EC73  F02C         	call	___ftmul	;wreg free
  2027  007BF2  C021  F015         	movff	?___ftmul,___ftadd@f1
  2028  007BF6  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  2029  007BFA  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  2030  007BFE  ECF1  F024         	call	_get_last_x_angle	;wreg free
  2031  007C02  C001  F018         	movff	?_get_last_x_angle,___ftadd@f2
  2032  007C06  C002  F019         	movff	?_get_last_x_angle+1,___ftadd@f2+1
  2033  007C0A  C003  F01A         	movff	?_get_last_x_angle+2,___ftadd@f2+2
  2034  007C0E  EC28  F031         	call	___ftadd	;wreg free
  2035  007C12  C015  F0A8         	movff	?___ftadd,main@gyro_angle_x
  2036  007C16  C016  F0A9         	movff	?___ftadd+1,main@gyro_angle_x+1
  2037  007C1A  C017  F0AA         	movff	?___ftadd+2,main@gyro_angle_x+2
  2038                           
  2039                           ;main.c: 198: float gyro_angle_y = gyro_y*dt + get_last_y_angle();
  2040  007C1E  C0F0  F024         	movff	main@dt,___ftmul@f2
  2041  007C22  C0F1  F025         	movff	main@dt+1,___ftmul@f2+1
  2042  007C26  C0F2  F026         	movff	main@dt+2,___ftmul@f2+2
  2043  007C2A  C0C3  F021         	movff	main@gyro_y,___ftmul@f1
  2044  007C2E  C0C4  F022         	movff	main@gyro_y+1,___ftmul@f1+1
  2045  007C32  C0C5  F023         	movff	main@gyro_y+2,___ftmul@f1+2
  2046  007C36  EC73  F02C         	call	___ftmul	;wreg free
  2047  007C3A  C021  F015         	movff	?___ftmul,___ftadd@f1
  2048  007C3E  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  2049  007C42  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  2050  007C46  ECF8  F024         	call	_get_last_y_angle	;wreg free
  2051  007C4A  C001  F018         	movff	?_get_last_y_angle,___ftadd@f2
  2052  007C4E  C002  F019         	movff	?_get_last_y_angle+1,___ftadd@f2+1
  2053  007C52  C003  F01A         	movff	?_get_last_y_angle+2,___ftadd@f2+2
  2054  007C56  EC28  F031         	call	___ftadd	;wreg free
  2055  007C5A  C015  F0AB         	movff	?___ftadd,main@gyro_angle_y
  2056  007C5E  C016  F0AC         	movff	?___ftadd+1,main@gyro_angle_y+1
  2057  007C62  C017  F0AD         	movff	?___ftadd+2,main@gyro_angle_y+2
  2058                           
  2059                           ;main.c: 199: float gyro_angle_z = gyro_z*dt + get_last_z_angle();
  2060  007C66  C0F0  F024         	movff	main@dt,___ftmul@f2
  2061  007C6A  C0F1  F025         	movff	main@dt+1,___ftmul@f2+1
  2062  007C6E  C0F2  F026         	movff	main@dt+2,___ftmul@f2+2
  2063  007C72  C0C6  F021         	movff	main@gyro_z,___ftmul@f1
  2064  007C76  C0C7  F022         	movff	main@gyro_z+1,___ftmul@f1+1
  2065  007C7A  C0C8  F023         	movff	main@gyro_z+2,___ftmul@f1+2
  2066  007C7E  EC73  F02C         	call	___ftmul	;wreg free
  2067  007C82  C021  F015         	movff	?___ftmul,___ftadd@f1
  2068  007C86  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  2069  007C8A  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  2070  007C8E  ECFF  F024         	call	_get_last_z_angle	;wreg free
  2071  007C92  C001  F018         	movff	?_get_last_z_angle,___ftadd@f2
  2072  007C96  C002  F019         	movff	?_get_last_z_angle+1,___ftadd@f2+1
  2073  007C9A  C003  F01A         	movff	?_get_last_z_angle+2,___ftadd@f2+2
  2074  007C9E  EC28  F031         	call	___ftadd	;wreg free
  2075  007CA2  C015  F0AE         	movff	?___ftadd,main@gyro_angle_z
  2076  007CA6  C016  F0AF         	movff	?___ftadd+1,main@gyro_angle_z+1
  2077  007CAA  C017  F0B0         	movff	?___ftadd+2,main@gyro_angle_z+2
  2078                           
  2079                           ;main.c: 202: float unfiltered_gyro_angle_x = gyro_x*dt + get_last_gyro_x_angle();
  2080  007CAE  C0F0  F024         	movff	main@dt,___ftmul@f2
  2081  007CB2  C0F1  F025         	movff	main@dt+1,___ftmul@f2+1
  2082  007CB6  C0F2  F026         	movff	main@dt+2,___ftmul@f2+2
  2083  007CBA  C0C0  F021         	movff	main@gyro_x,___ftmul@f1
  2084  007CBE  C0C1  F022         	movff	main@gyro_x+1,___ftmul@f1+1
  2085  007CC2  C0C2  F023         	movff	main@gyro_x+2,___ftmul@f1+2
  2086  007CC6  EC73  F02C         	call	___ftmul	;wreg free
  2087  007CCA  C021  F015         	movff	?___ftmul,___ftadd@f1
  2088  007CCE  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  2089  007CD2  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  2090  007CD6  ECDC  F024         	call	_get_last_gyro_x_angle	;wreg free
  2091  007CDA  C001  F018         	movff	?_get_last_gyro_x_angle,___ftadd@f2
  2092  007CDE  C002  F019         	movff	?_get_last_gyro_x_angle+1,___ftadd@f2+1
  2093  007CE2  C003  F01A         	movff	?_get_last_gyro_x_angle+2,___ftadd@f2+2
  2094  007CE6  EC28  F031         	call	___ftadd	;wreg free
  2095  007CEA  C015  F0B1         	movff	?___ftadd,main@unfiltered_gyro_angle_x
  2096  007CEE  C016  F0B2         	movff	?___ftadd+1,main@unfiltered_gyro_angle_x+1
  2097  007CF2  C017  F0B3         	movff	?___ftadd+2,main@unfiltered_gyro_angle_x+2
  2098                           
  2099                           ;main.c: 203: float unfiltered_gyro_angle_y = gyro_y*dt + get_last_gyro_y_angle();
  2100  007CF6  C0F0  F024         	movff	main@dt,___ftmul@f2
  2101  007CFA  C0F1  F025         	movff	main@dt+1,___ftmul@f2+1
  2102  007CFE  C0F2  F026         	movff	main@dt+2,___ftmul@f2+2
  2103  007D02  C0C3  F021         	movff	main@gyro_y,___ftmul@f1
  2104  007D06  C0C4  F022         	movff	main@gyro_y+1,___ftmul@f1+1
  2105  007D0A  C0C5  F023         	movff	main@gyro_y+2,___ftmul@f1+2
  2106  007D0E  EC73  F02C         	call	___ftmul	;wreg free
  2107  007D12  C021  F015         	movff	?___ftmul,___ftadd@f1
  2108  007D16  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  2109  007D1A  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  2110  007D1E  ECE3  F024         	call	_get_last_gyro_y_angle	;wreg free
  2111  007D22  C001  F018         	movff	?_get_last_gyro_y_angle,___ftadd@f2
  2112  007D26  C002  F019         	movff	?_get_last_gyro_y_angle+1,___ftadd@f2+1
  2113  007D2A  C003  F01A         	movff	?_get_last_gyro_y_angle+2,___ftadd@f2+2
  2114  007D2E  EC28  F031         	call	___ftadd	;wreg free
  2115  007D32  C015  F0B4         	movff	?___ftadd,main@unfiltered_gyro_angle_y
  2116  007D36  C016  F0B5         	movff	?___ftadd+1,main@unfiltered_gyro_angle_y+1
  2117  007D3A  C017  F0B6         	movff	?___ftadd+2,main@unfiltered_gyro_angle_y+2
  2118                           
  2119                           ;main.c: 204: float unfiltered_gyro_angle_z = gyro_z*dt + get_last_gyro_z_angle();
  2120  007D3E  C0F0  F024         	movff	main@dt,___ftmul@f2
  2121  007D42  C0F1  F025         	movff	main@dt+1,___ftmul@f2+1
  2122  007D46  C0F2  F026         	movff	main@dt+2,___ftmul@f2+2
  2123  007D4A  C0C6  F021         	movff	main@gyro_z,___ftmul@f1
  2124  007D4E  C0C7  F022         	movff	main@gyro_z+1,___ftmul@f1+1
  2125  007D52  C0C8  F023         	movff	main@gyro_z+2,___ftmul@f1+2
  2126  007D56  EC73  F02C         	call	___ftmul	;wreg free
  2127  007D5A  C021  F015         	movff	?___ftmul,___ftadd@f1
  2128  007D5E  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  2129  007D62  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  2130  007D66  ECEA  F024         	call	_get_last_gyro_z_angle	;wreg free
  2131  007D6A  C001  F018         	movff	?_get_last_gyro_z_angle,___ftadd@f2
  2132  007D6E  C002  F019         	movff	?_get_last_gyro_z_angle+1,___ftadd@f2+1
  2133  007D72  C003  F01A         	movff	?_get_last_gyro_z_angle+2,___ftadd@f2+2
  2134  007D76  EC28  F031         	call	___ftadd	;wreg free
  2135  007D7A  C015  F0B7         	movff	?___ftadd,main@unfiltered_gyro_angle_z
  2136  007D7E  C016  F0B8         	movff	?___ftadd+1,main@unfiltered_gyro_angle_z+1
  2137  007D82  C017  F0B9         	movff	?___ftadd+2,main@unfiltered_gyro_angle_z+2
  2138                           
  2139                           ;main.c: 208: float angle_x = alpha*gyro_angle_x + alphaInv*accel_angle_x;
  2140  007D86  C0A8  F024         	movff	main@gyro_angle_x,___ftmul@f2
  2141  007D8A  C0A9  F025         	movff	main@gyro_angle_x+1,___ftmul@f2+1
  2142  007D8E  C0AA  F026         	movff	main@gyro_angle_x+2,___ftmul@f2+2
  2143  007D92  C0EA  F021         	movff	main@alpha,___ftmul@f1
  2144  007D96  C0EB  F022         	movff	main@alpha+1,___ftmul@f1+1
  2145  007D9A  C0EC  F023         	movff	main@alpha+2,___ftmul@f1+2
  2146  007D9E  EC73  F02C         	call	___ftmul	;wreg free
  2147  007DA2  C021  F015         	movff	?___ftmul,___ftadd@f1
  2148  007DA6  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  2149  007DAA  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  2150  007DAE  C0A5  F024         	movff	main@accel_angle_x,___ftmul@f2
  2151  007DB2  C0A6  F025         	movff	main@accel_angle_x+1,___ftmul@f2+1
  2152  007DB6  C0A7  F026         	movff	main@accel_angle_x+2,___ftmul@f2+2
  2153  007DBA  C0BD  F021         	movff	main@alphaInv,___ftmul@f1
  2154  007DBE  C0BE  F022         	movff	main@alphaInv+1,___ftmul@f1+1
  2155  007DC2  C0BF  F023         	movff	main@alphaInv+2,___ftmul@f1+2
  2156  007DC6  EC73  F02C         	call	___ftmul	;wreg free
  2157  007DCA  C021  F018         	movff	?___ftmul,___ftadd@f2
  2158  007DCE  C022  F019         	movff	?___ftmul+1,___ftadd@f2+1
  2159  007DD2  C023  F01A         	movff	?___ftmul+2,___ftadd@f2+2
  2160  007DD6  EC28  F031         	call	___ftadd	;wreg free
  2161  007DDA  C015  F0D2         	movff	?___ftadd,main@angle_x
  2162  007DDE  C016  F0D3         	movff	?___ftadd+1,main@angle_x+1
  2163  007DE2  C017  F0D4         	movff	?___ftadd+2,main@angle_x+2
  2164                           
  2165                           ;main.c: 209: float angle_y = alpha*gyro_angle_y + alphaInv*accel_angle_y;
  2166  007DE6  C0AB  F024         	movff	main@gyro_angle_y,___ftmul@f2
  2167  007DEA  C0AC  F025         	movff	main@gyro_angle_y+1,___ftmul@f2+1
  2168  007DEE  C0AD  F026         	movff	main@gyro_angle_y+2,___ftmul@f2+2
  2169  007DF2  C0EA  F021         	movff	main@alpha,___ftmul@f1
  2170  007DF6  C0EB  F022         	movff	main@alpha+1,___ftmul@f1+1
  2171  007DFA  C0EC  F023         	movff	main@alpha+2,___ftmul@f1+2
  2172  007DFE  EC73  F02C         	call	___ftmul	;wreg free
  2173  007E02  C021  F015         	movff	?___ftmul,___ftadd@f1
  2174  007E06  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  2175  007E0A  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  2176  007E0E  C0A2  F024         	movff	main@accel_angle_y,___ftmul@f2
  2177  007E12  C0A3  F025         	movff	main@accel_angle_y+1,___ftmul@f2+1
  2178  007E16  C0A4  F026         	movff	main@accel_angle_y+2,___ftmul@f2+2
  2179  007E1A  C0BD  F021         	movff	main@alphaInv,___ftmul@f1
  2180  007E1E  C0BE  F022         	movff	main@alphaInv+1,___ftmul@f1+1
  2181  007E22  C0BF  F023         	movff	main@alphaInv+2,___ftmul@f1+2
  2182  007E26  EC73  F02C         	call	___ftmul	;wreg free
  2183  007E2A  C021  F018         	movff	?___ftmul,___ftadd@f2
  2184  007E2E  C022  F019         	movff	?___ftmul+1,___ftadd@f2+1
  2185  007E32  C023  F01A         	movff	?___ftmul+2,___ftadd@f2+2
  2186  007E36  EC28  F031         	call	___ftadd	;wreg free
  2187  007E3A  C015  F0D5         	movff	?___ftadd,main@angle_y
  2188  007E3E  C016  F0D6         	movff	?___ftadd+1,main@angle_y+1
  2189  007E42  C017  F0D7         	movff	?___ftadd+2,main@angle_y+2
  2190                           
  2191                           ;main.c: 210: float angle_z = gyro_angle_z;
  2192  007E46  C0AE  F0D8         	movff	main@gyro_angle_z,main@angle_z
  2193  007E4A  C0AF  F0D9         	movff	main@gyro_angle_z+1,main@angle_z+1
  2194  007E4E  C0B0  F0DA         	movff	main@gyro_angle_z+2,main@angle_z+2
  2195                           
  2196                           ;main.c: 214: set_last_read_angle_data(0, angle_x, angle_y, angle_z, unfiltered_gyro_ang
      +                          le_x, unfiltered_gyro_angle_y, unfiltered_gyro_angle_z);
  2197  007E52  0E00               	movlw	0
  2198  007E54  6E01               	movwf	set_last_read_angle_data@time,c
  2199  007E56  0E00               	movlw	0
  2200  007E58  6E02               	movwf	set_last_read_angle_data@time+1,c
  2201  007E5A  0E00               	movlw	0
  2202  007E5C  6E03               	movwf	set_last_read_angle_data@time+2,c
  2203  007E5E  0E00               	movlw	0
  2204  007E60  6E04               	movwf	set_last_read_angle_data@time+3,c
  2205  007E62  C0D2  F005         	movff	main@angle_x,set_last_read_angle_data@x
  2206  007E66  C0D3  F006         	movff	main@angle_x+1,set_last_read_angle_data@x+1
  2207  007E6A  C0D4  F007         	movff	main@angle_x+2,set_last_read_angle_data@x+2
  2208  007E6E  C0D5  F008         	movff	main@angle_y,set_last_read_angle_data@y
  2209  007E72  C0D6  F009         	movff	main@angle_y+1,set_last_read_angle_data@y+1
  2210  007E76  C0D7  F00A         	movff	main@angle_y+2,set_last_read_angle_data@y+2
  2211  007E7A  C0D8  F00B         	movff	main@angle_z,set_last_read_angle_data@z
  2212  007E7E  C0D9  F00C         	movff	main@angle_z+1,set_last_read_angle_data@z+1
  2213  007E82  C0DA  F00D         	movff	main@angle_z+2,set_last_read_angle_data@z+2
  2214  007E86  C0B1  F00E         	movff	main@unfiltered_gyro_angle_x,set_last_read_angle_data@x_gyro
  2215  007E8A  C0B2  F00F         	movff	main@unfiltered_gyro_angle_x+1,set_last_read_angle_data@x_gyro+1
  2216  007E8E  C0B3  F010         	movff	main@unfiltered_gyro_angle_x+2,set_last_read_angle_data@x_gyro+2
  2217  007E92  C0B4  F011         	movff	main@unfiltered_gyro_angle_y,set_last_read_angle_data@y_gyro
  2218  007E96  C0B5  F012         	movff	main@unfiltered_gyro_angle_y+1,set_last_read_angle_data@y_gyro+1
  2219  007E9A  C0B6  F013         	movff	main@unfiltered_gyro_angle_y+2,set_last_read_angle_data@y_gyro+2
  2220  007E9E  C0B7  F014         	movff	main@unfiltered_gyro_angle_z,set_last_read_angle_data@z_gyro
  2221  007EA2  C0B8  F015         	movff	main@unfiltered_gyro_angle_z+1,set_last_read_angle_data@z_gyro+1
  2222  007EA6  C0B9  F016         	movff	main@unfiltered_gyro_angle_z+2,set_last_read_angle_data@z_gyro+2
  2223  007EAA  ECB4  F026         	call	_set_last_read_angle_data	;wreg free
  2224                           
  2225                           ;main.c: 216: printf("%f, %f, %f\r\n", angle_x, angle_y, angle_z);
  2226  007EAE  0EF1               	movlw	low STR_4
  2227  007EB0  6E46               	movwf	printf@f,c
  2228  007EB2  0E7F               	movlw	high STR_4
  2229  007EB4  6E47               	movwf	printf@f+1,c
  2230  007EB6  C0D2  F048         	movff	main@angle_x,?_printf+2
  2231  007EBA  C0D3  F049         	movff	main@angle_x+1,?_printf+3
  2232  007EBE  C0D4  F04A         	movff	main@angle_x+2,?_printf+4
  2233  007EC2  C0D5  F04B         	movff	main@angle_y,?_printf+5
  2234  007EC6  C0D6  F04C         	movff	main@angle_y+1,?_printf+6
  2235  007ECA  C0D7  F04D         	movff	main@angle_y+2,?_printf+7
  2236  007ECE  C0D8  F04E         	movff	main@angle_z,?_printf+8
  2237  007ED2  C0D9  F04F         	movff	main@angle_z+1,?_printf+9
  2238  007ED6  C0DA  F050         	movff	main@angle_z+2,?_printf+10
  2239  007EDA  ECB0  F038         	call	_printf	;wreg free
  2240                           
  2241                           ;main.c: 219: _delay((unsigned long)((20)*(8000000/4000.0)));
  2242  007EDE  0E34               	movlw	52
  2243  007EE0  0100               	movlb	0	; () banked
  2244  007EE2  6F9D               	movwf	??_main& (0+255),b
  2245  007EE4  0EF1               	movlw	241
  2246  007EE6                     u5077:
  2247  007EE6  2EE8               	decfsz	wreg,f,c
  2248  007EE8  D7FE               	bra	u5077
  2249  007EEA  2F9D               	decfsz	??_main& (0+255),f,b
  2250  007EEC  D7FC               	bra	u5077
  2251  007EEE  D000               	nop2	
  2252                           
  2253                           ;main.c: 220: LATCbits.LC2=0;
  2254  007EF0  948B               	bcf	3979,2,c	;volatile
  2255  007EF2  D4AD               	goto	l122
  2256  007EF4                     __end_of_main:
  2257                           	opt stack 0
  2258                           tblptru	equ	0xFF8
  2259                           postinc0	equ	0xFEE
  2260                           wreg	equ	0xFE8
  2261                           status	equ	0xFD8
  2262                           
  2263 ;; *************** function _sqrt *****************
  2264 ;; Defined at:
  2265 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcsqrt.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;  a               3   26[BANK0 ] int 
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;  x               3   42[BANK0 ] int 
  2270 ;;  q               3   39[BANK0 ] int 
  2271 ;;  z               3   35[BANK0 ] int 
  2272 ;;  og              3   32[BANK0 ] int 
  2273 ;;  i               1   38[BANK0 ] unsigned char 
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  3   26[BANK0 ] unsigned char 
  2276 ;; Registers used:
  2277 ;;		wreg, status,2, status,0, cstack
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2283 ;;      Params:         0       3       0       0       0       0       0       0       0
  2284 ;;      Locals:         0      13       0       0       0       0       0       0       0
  2285 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2286 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2287 ;;Total ram usage:       19 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; Hardware stack levels required when called:    3
  2290 ;; This function calls:
  2291 ;;		___ftge
  2292 ;;		___ftmul
  2293 ;;		___ftsub
  2294 ;; This function is called by:
  2295 ;;		_main
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           	psect	text1
  2300  0060BA                     __ptext1:
  2301                           	opt stack 0
  2302  0060BA                     _sqrt:
  2303                           	opt stack 27
  2304                           
  2305                           ;incstack = 0
  2306  0060BA  0E00               	movlw	0
  2307  0060BC  6E01               	movwf	___ftge@ff1,c
  2308  0060BE  0E00               	movlw	0
  2309  0060C0  6E02               	movwf	___ftge@ff1+1,c
  2310  0060C2  0E00               	movlw	0
  2311  0060C4  6E03               	movwf	___ftge@ff1+2,c
  2312  0060C6  C07A  F004         	movff	sqrt@a,___ftge@ff2
  2313  0060CA  C07B  F005         	movff	sqrt@a+1,___ftge@ff2+1
  2314  0060CE  C07C  F006         	movff	sqrt@a+2,___ftge@ff2+2
  2315  0060D2  EC69  F029         	call	___ftge	;wreg free
  2316  0060D6  A0D8               	btfss	status,0,c
  2317  0060D8  D010               	goto	l1939
  2318  0060DA  0100               	movlb	0	; () banked
  2319  0060DC  AF7C               	btfss	(sqrt@a+2)& (0+255),7,b
  2320  0060DE  D005               	goto	l1940
  2321                           
  2322                           ; BSR set to: 0
  2323  0060E0  0E00               	movlw	0
  2324  0060E2  0101               	movlb	1	; () banked
  2325  0060E4  6F29               	movwf	(_errno+1)& (0+255),b
  2326  0060E6  0E21               	movlw	33
  2327  0060E8  6F28               	movwf	_errno& (0+255),b
  2328  0060EA                     l1940:
  2329  0060EA  0E00               	movlw	0
  2330  0060EC  0100               	movlb	0	; () banked
  2331  0060EE  6F7A               	movwf	?_sqrt& (0+255),b
  2332  0060F0  0E00               	movlw	0
  2333  0060F2  6F7B               	movwf	(?_sqrt+1)& (0+255),b
  2334  0060F4  0E00               	movlw	0
  2335  0060F6  6F7C               	movwf	(?_sqrt+2)& (0+255),b
  2336                           
  2337                           ; BSR set to: 0
  2338  0060F8  0012               	return	
  2339  0060FA                     l1939:
  2340  0060FA  C07A  F083         	movff	sqrt@a,sqrt@z
  2341  0060FE  C07B  F084         	movff	sqrt@a+1,sqrt@z+1
  2342  006102  C07C  F085         	movff	sqrt@a+2,sqrt@z+2
  2343  006106  C07A  F07D         	movff	sqrt@a,??_sqrt
  2344  00610A  C07B  F07E         	movff	sqrt@a+1,??_sqrt+1
  2345  00610E  C07C  F07F         	movff	sqrt@a+2,??_sqrt+2
  2346  006112  0100               	movlb	0	; () banked
  2347  006114  1F7D               	comf	??_sqrt& (0+255),f,b
  2348  006116  1F7E               	comf	(??_sqrt+1)& (0+255),f,b
  2349  006118  1F7F               	comf	(??_sqrt+2)& (0+255),f,b
  2350  00611A  2B7D               	incf	??_sqrt& (0+255),f,b
  2351  00611C  0E00               	movlw	0
  2352  00611E  237E               	addwfc	(??_sqrt+1)& (0+255),f,b
  2353  006120  237F               	addwfc	(??_sqrt+2)& (0+255),f,b
  2354  006122  0EC8               	movlw	200
  2355  006124  257D               	addwf	??_sqrt& (0+255),w,b
  2356  006126  6F8A               	movwf	sqrt@x& (0+255),b
  2357  006128  0E6E               	movlw	110
  2358  00612A  217E               	addwfc	(??_sqrt+1)& (0+255),w,b
  2359  00612C  6F8B               	movwf	(sqrt@x+1)& (0+255),b
  2360  00612E  0EBE               	movlw	190
  2361  006130  217F               	addwfc	(??_sqrt+2)& (0+255),w,b
  2362  006132  6F8C               	movwf	(sqrt@x+2)& (0+255),b
  2363                           
  2364                           ; BSR set to: 0
  2365  006134  90D8               	bcf	status,0,c
  2366  006136  338C               	rrcf	(sqrt@x+2)& (0+255),f,b
  2367  006138  338B               	rrcf	(sqrt@x+1)& (0+255),f,b
  2368  00613A  338A               	rrcf	sqrt@x& (0+255),f,b
  2369                           
  2370                           ; BSR set to: 0
  2371  00613C  0E00               	movlw	0
  2372  00613E  5F83               	subwf	sqrt@z& (0+255),f,b
  2373  006140  0E80               	movlw	128
  2374  006142  5B84               	subwfb	(sqrt@z+1)& (0+255),f,b
  2375  006144  0E00               	movlw	0
  2376  006146  5B85               	subwfb	(sqrt@z+2)& (0+255),f,b
  2377                           
  2378                           ; BSR set to: 0
  2379  006148  0E04               	movlw	4
  2380  00614A  6F86               	movwf	sqrt@i& (0+255),b
  2381  00614C                     
  2382                           ; BSR set to: 0
  2383                           
  2384                           ; BSR set to: 0
  2385  00614C  C08A  F080         	movff	sqrt@x,sqrt@og
  2386  006150  C08B  F081         	movff	sqrt@x+1,sqrt@og+1
  2387  006154  C08C  F082         	movff	sqrt@x+2,sqrt@og+2
  2388                           
  2389                           ; BSR set to: 0
  2390  006158  C08A  F021         	movff	sqrt@x,___ftmul@f1
  2391  00615C  C08B  F022         	movff	sqrt@x+1,___ftmul@f1+1
  2392  006160  C08C  F023         	movff	sqrt@x+2,___ftmul@f1+2
  2393  006164  C083  F024         	movff	sqrt@z,___ftmul@f2
  2394  006168  C084  F025         	movff	sqrt@z+1,___ftmul@f2+1
  2395  00616C  C085  F026         	movff	sqrt@z+2,___ftmul@f2+2
  2396  006170  EC73  F02C         	call	___ftmul	;wreg free
  2397  006174  C021  F087         	movff	?___ftmul,sqrt@q
  2398  006178  C022  F088         	movff	?___ftmul+1,sqrt@q+1
  2399  00617C  C023  F089         	movff	?___ftmul+2,sqrt@q+2
  2400  006180  C087  F021         	movff	sqrt@q,___ftmul@f1
  2401  006184  C088  F022         	movff	sqrt@q+1,___ftmul@f1+1
  2402  006188  C089  F023         	movff	sqrt@q+2,___ftmul@f1+2
  2403  00618C  C08A  F024         	movff	sqrt@x,___ftmul@f2
  2404  006190  C08B  F025         	movff	sqrt@x+1,___ftmul@f2+1
  2405  006194  C08C  F026         	movff	sqrt@x+2,___ftmul@f2+2
  2406  006198  EC73  F02C         	call	___ftmul	;wreg free
  2407  00619C  C021  F087         	movff	?___ftmul,sqrt@q
  2408  0061A0  C022  F088         	movff	?___ftmul+1,sqrt@q+1
  2409  0061A4  C023  F089         	movff	?___ftmul+2,sqrt@q+2
  2410  0061A8  C087  F021         	movff	sqrt@q,___ftmul@f1
  2411  0061AC  C088  F022         	movff	sqrt@q+1,___ftmul@f1+1
  2412  0061B0  C089  F023         	movff	sqrt@q+2,___ftmul@f1+2
  2413  0061B4  C08A  F024         	movff	sqrt@x,___ftmul@f2
  2414  0061B8  C08B  F025         	movff	sqrt@x+1,___ftmul@f2+1
  2415  0061BC  C08C  F026         	movff	sqrt@x+2,___ftmul@f2+2
  2416  0061C0  EC73  F02C         	call	___ftmul	;wreg free
  2417  0061C4  C021  F087         	movff	?___ftmul,sqrt@q
  2418  0061C8  C022  F088         	movff	?___ftmul+1,sqrt@q+1
  2419  0061CC  C023  F089         	movff	?___ftmul+2,sqrt@q+2
  2420  0061D0  C08A  F021         	movff	sqrt@x,___ftmul@f1
  2421  0061D4  C08B  F022         	movff	sqrt@x+1,___ftmul@f1+1
  2422  0061D8  C08C  F023         	movff	sqrt@x+2,___ftmul@f1+2
  2423  0061DC  0E00               	movlw	0
  2424  0061DE  6E24               	movwf	___ftmul@f2,c
  2425  0061E0  0EC0               	movlw	192
  2426  0061E2  6E25               	movwf	___ftmul@f2+1,c
  2427  0061E4  0E3F               	movlw	63
  2428  0061E6  6E26               	movwf	___ftmul@f2+2,c
  2429  0061E8  EC73  F02C         	call	___ftmul	;wreg free
  2430  0061EC  C021  F08A         	movff	?___ftmul,sqrt@x
  2431  0061F0  C022  F08B         	movff	?___ftmul+1,sqrt@x+1
  2432  0061F4  C023  F08C         	movff	?___ftmul+2,sqrt@x+2
  2433  0061F8  C08A  F021         	movff	sqrt@x,___ftsub@f1
  2434  0061FC  C08B  F022         	movff	sqrt@x+1,___ftsub@f1+1
  2435  006200  C08C  F023         	movff	sqrt@x+2,___ftsub@f1+2
  2436  006204  C087  F024         	movff	sqrt@q,___ftsub@f2
  2437  006208  C088  F025         	movff	sqrt@q+1,___ftsub@f2+1
  2438  00620C  C089  F026         	movff	sqrt@q+2,___ftsub@f2+2
  2439  006210  EC41  F026         	call	___ftsub	;wreg free
  2440  006214  C021  F08A         	movff	?___ftsub,sqrt@x
  2441  006218  C022  F08B         	movff	?___ftsub+1,sqrt@x+1
  2442  00621C  C023  F08C         	movff	?___ftsub+2,sqrt@x+2
  2443  006220  0100               	movlb	0	; () banked
  2444  006222  2F86               	decfsz	sqrt@i& (0+255),f,b
  2445  006224  D793               	goto	l1942
  2446                           
  2447                           ; BSR set to: 0
  2448                           
  2449                           ; BSR set to: 0
  2450  006226  C08A  F021         	movff	sqrt@x,___ftmul@f1
  2451  00622A  C08B  F022         	movff	sqrt@x+1,___ftmul@f1+1
  2452  00622E  C08C  F023         	movff	sqrt@x+2,___ftmul@f1+2
  2453  006232  C07A  F024         	movff	sqrt@a,___ftmul@f2
  2454  006236  C07B  F025         	movff	sqrt@a+1,___ftmul@f2+1
  2455  00623A  C07C  F026         	movff	sqrt@a+2,___ftmul@f2+2
  2456  00623E  EC73  F02C         	call	___ftmul	;wreg free
  2457  006242  C021  F07A         	movff	?___ftmul,?_sqrt
  2458  006246  C022  F07B         	movff	?___ftmul+1,?_sqrt+1
  2459  00624A  C023  F07C         	movff	?___ftmul+2,?_sqrt+2
  2460  00624E  0012               	return	
  2461  006250                     __end_of_sqrt:
  2462                           	opt stack 0
  2463                           tblptru	equ	0xFF8
  2464                           postinc0	equ	0xFEE
  2465                           wreg	equ	0xFE8
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _set_last_read_angle_data *****************
  2469 ;; Defined at:
  2470 ;;		line 86 in file "main.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  time            4    0[COMRAM] unsigned long 
  2473 ;;  x               3    4[COMRAM] float 
  2474 ;;  y               3    7[COMRAM] float 
  2475 ;;  z               3   10[COMRAM] float 
  2476 ;;  x_gyro          3   13[COMRAM] float 
  2477 ;;  y_gyro          3   16[COMRAM] float 
  2478 ;;  z_gyro          3   19[COMRAM] float 
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		None
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2490 ;;      Params:        22       0       0       0       0       0       0       0       0
  2491 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2492 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2493 ;;      Totals:        22       0       0       0       0       0       0       0       0
  2494 ;;Total ram usage:       22 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; This function calls:
  2497 ;;		Nothing
  2498 ;; This function is called by:
  2499 ;;		_main
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text2
  2504  004D68                     __ptext2:
  2505                           	opt stack 0
  2506  004D68                     _set_last_read_angle_data:
  2507                           	opt stack 30
  2508                           
  2509                           ;main.c: 87: last_read_time = time;
  2510                           
  2511                           ;incstack = 0
  2512  004D68  C001  F100         	movff	set_last_read_angle_data@time,_last_read_time
  2513  004D6C  C002  F101         	movff	set_last_read_angle_data@time+1,_last_read_time+1
  2514  004D70  C003  F102         	movff	set_last_read_angle_data@time+2,_last_read_time+2
  2515  004D74  C004  F103         	movff	set_last_read_angle_data@time+3,_last_read_time+3
  2516                           
  2517                           ;main.c: 88: last_x_angle = x;
  2518  004D78  C005  F125         	movff	set_last_read_angle_data@x,_last_x_angle
  2519  004D7C  C006  F126         	movff	set_last_read_angle_data@x+1,_last_x_angle+1
  2520  004D80  C007  F127         	movff	set_last_read_angle_data@x+2,_last_x_angle+2
  2521                           
  2522                           ;main.c: 89: last_y_angle = y;
  2523  004D84  C008  F122         	movff	set_last_read_angle_data@y,_last_y_angle
  2524  004D88  C009  F123         	movff	set_last_read_angle_data@y+1,_last_y_angle+1
  2525  004D8C  C00A  F124         	movff	set_last_read_angle_data@y+2,_last_y_angle+2
  2526                           
  2527                           ;main.c: 90: last_z_angle = z;
  2528  004D90  C00B  F11F         	movff	set_last_read_angle_data@z,_last_z_angle
  2529  004D94  C00C  F120         	movff	set_last_read_angle_data@z+1,_last_z_angle+1
  2530  004D98  C00D  F121         	movff	set_last_read_angle_data@z+2,_last_z_angle+2
  2531                           
  2532                           ;main.c: 91: last_gyro_x_angle = x_gyro;
  2533  004D9C  C00E  F11C         	movff	set_last_read_angle_data@x_gyro,_last_gyro_x_angle
  2534  004DA0  C00F  F11D         	movff	set_last_read_angle_data@x_gyro+1,_last_gyro_x_angle+1
  2535  004DA4  C010  F11E         	movff	set_last_read_angle_data@x_gyro+2,_last_gyro_x_angle+2
  2536                           
  2537                           ;main.c: 92: last_gyro_y_angle = y_gyro;
  2538  004DA8  C011  F119         	movff	set_last_read_angle_data@y_gyro,_last_gyro_y_angle
  2539  004DAC  C012  F11A         	movff	set_last_read_angle_data@y_gyro+1,_last_gyro_y_angle+1
  2540  004DB0  C013  F11B         	movff	set_last_read_angle_data@y_gyro+2,_last_gyro_y_angle+2
  2541                           
  2542                           ;main.c: 93: last_gyro_z_angle = z_gyro;
  2543  004DB4  C014  F116         	movff	set_last_read_angle_data@z_gyro,_last_gyro_z_angle
  2544  004DB8  C015  F117         	movff	set_last_read_angle_data@z_gyro+1,_last_gyro_z_angle+1
  2545  004DBC  C016  F118         	movff	set_last_read_angle_data@z_gyro+2,_last_gyro_z_angle+2
  2546  004DC0  0012               	return		;funcret
  2547  004DC2                     __end_of_set_last_read_angle_data:
  2548                           	opt stack 0
  2549                           tblptru	equ	0xFF8
  2550                           postinc0	equ	0xFEE
  2551                           wreg	equ	0xFE8
  2552                           status	equ	0xFD8
  2553                           
  2554 ;; *************** function _printf *****************
  2555 ;; Defined at:
  2556 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  f               2   69[COMRAM] PTR const unsigned char 
  2559 ;;		 -> STR_4(13), STR_3(14), STR_2(15), STR_1(15), 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;  tmpval          4   15[BANK0 ] struct .
  2562 ;;  val             4    9[BANK0 ] unsigned long 
  2563 ;;  fval            3   19[BANK0 ] unsigned long 
  2564 ;;  cp              3    0        PTR const unsigned char 
  2565 ;;  exp             2   13[BANK0 ] int 
  2566 ;;  prec            2    7[BANK0 ] int 
  2567 ;;  flag            2    5[BANK0 ] unsigned short 
  2568 ;;  ap              2    3[BANK0 ] PTR void [1]
  2569 ;;		 -> ?_printf(2), 
  2570 ;;  len             2    0        unsigned int 
  2571 ;;  width           2    0        int 
  2572 ;;  c               1   22[BANK0 ] char 
  2573 ;;  d               1    0        unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  2   69[COMRAM] int 
  2576 ;; Registers used:
  2577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2583 ;;      Params:        11       0       0       0       0       0       0       0       0
  2584 ;;      Locals:         0      23       0       0       0       0       0       0       0
  2585 ;;      Temps:          6       0       0       0       0       0       0       0       0
  2586 ;;      Totals:        17      23       0       0       0       0       0       0       0
  2587 ;;Total ram usage:       40 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    3
  2590 ;; This function calls:
  2591 ;;		___awdiv
  2592 ;;		___ftadd
  2593 ;;		___ftge
  2594 ;;		___ftmul
  2595 ;;		___ftneg
  2596 ;;		___ftsub
  2597 ;;		___fttol
  2598 ;;		___lldiv
  2599 ;;		___llmod
  2600 ;;		___lltoft
  2601 ;;		___wmul
  2602 ;;		__div_to_l_
  2603 ;;		__tdiv_to_l_
  2604 ;;		_fround
  2605 ;;		_putch
  2606 ;;		_scale
  2607 ;; This function is called by:
  2608 ;;		_main
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text3
  2613  007160                     __ptext3:
  2614                           	opt stack 0
  2615  007160                     _printf:
  2616                           	opt stack 27
  2617                           
  2618                           ;doprnt.c: 466: va_list ap;
  2619                           ;doprnt.c: 499: signed char c;
  2620                           ;doprnt.c: 501: int width;
  2621                           ;doprnt.c: 504: int prec;
  2622                           ;doprnt.c: 508: unsigned short flag;
  2623                           ;doprnt.c: 515: char d;
  2624                           ;doprnt.c: 516: double fval;
  2625                           ;doprnt.c: 517: int exp;
  2626                           ;doprnt.c: 523: union {
  2627                           ;doprnt.c: 524: unsigned long vd;
  2628                           ;doprnt.c: 525: double integ;
  2629                           ;doprnt.c: 526: } tmpval;
  2630                           ;doprnt.c: 528: unsigned long val;
  2631                           ;doprnt.c: 529: unsigned len;
  2632                           ;doprnt.c: 530: const char * cp;
  2633                           ;doprnt.c: 533: *ap = __va_start();
  2634                           
  2635                           ;incstack = 0
  2636  007160  0E48               	movlw	low (?_printf+2)
  2637  007162  0100               	movlb	0	; () banked
  2638  007164  6F63               	movwf	printf@ap& (0+255),b
  2639  007166  0E00               	movlw	high (?_printf+2)
  2640  007168  6F64               	movwf	(printf@ap+1)& (0+255),b
  2641                           
  2642                           ;doprnt.c: 536: while(c = *f++) {
  2643  00716A  D2E4               	goto	l1234
  2644  00716C                     
  2645                           ; BSR set to: 0
  2646                           ;doprnt.c: 538: if(c != '%')
  2647                           
  2648                           ; BSR set to: 0
  2649  00716C  0E25               	movlw	37
  2650  00716E  1976               	xorwf	printf@c& (0+255),w,b
  2651  007170  B4D8               	btfsc	status,2,c
  2652  007172  D004               	goto	l1190
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;doprnt.c: 540: {
  2656                           ;doprnt.c: 541: (putch(c) );
  2657  007174  5176               	movf	printf@c& (0+255),w,b
  2658  007176  EC92  F025         	call	_putch
  2659                           
  2660                           ;doprnt.c: 542: continue;
  2661  00717A  D2DC               	goto	l1234
  2662  00717C                     l1190:
  2663                           
  2664                           ;doprnt.c: 543: }
  2665                           ;doprnt.c: 548: flag = 0;
  2666  00717C  0E00               	movlw	0
  2667  00717E  0100               	movlb	0	; () banked
  2668  007180  6F66               	movwf	(printf@flag+1)& (0+255),b
  2669  007182  0E00               	movlw	0
  2670  007184  6F65               	movwf	printf@flag& (0+255),b
  2671                           
  2672                           ;doprnt.c: 635: switch(c = *f++) {
  2673  007186  D002               	goto	l1191
  2674  007188                     
  2675                           ; BSR set to: 0
  2676                           ;doprnt.c: 663: flag |= 0x400;
  2677                           
  2678                           ; BSR set to: 0
  2679  007188  8566               	bsf	(printf@flag+1)& (0+255),2,b
  2680                           
  2681                           ;doprnt.c: 664: break;
  2682  00718A  D011               	goto	l1195
  2683  00718C                     l1191:
  2684                           
  2685                           ; BSR set to: 0
  2686                           
  2687                           ; BSR set to: 0
  2688  00718C  C046  FFF6         	movff	printf@f,tblptrl
  2689  007190  C047  FFF7         	movff	printf@f+1,tblptrh
  2690  007194  4A46               	infsnz	printf@f,f,c
  2691  007196  2A47               	incf	printf@f+1,f,c
  2692  007198                     	if	0	;tblptru may be non-zero
  2693  007198                     	endif
  2694  007198                     	if	0	;tblptru may be non-zero
  2695  007198                     	endif
  2696  007198  0008               	tblrd		*
  2697  00719A  CFF5 F076          	movff	tablat,printf@c
  2698  00719E  5176               	movf	printf@c& (0+255),w,b
  2699                           
  2700                           ; Switch size 1, requested type "space"
  2701                           ; Number of cases is 2, Range of values is 0 to 102
  2702                           ; switch strategies available:
  2703                           ; Name         Instructions Cycles
  2704                           ; simple_byte            7     4 (average)
  2705                           ;	Chosen strategy is simple_byte
  2706  0071A0  0A00               	xorlw	0	; case 0
  2707  0071A2  B4D8               	btfsc	status,2,c
  2708  0071A4  0012               	return	
  2709  0071A6  0A66               	xorlw	102	; case 102
  2710  0071A8  B4D8               	btfsc	status,2,c
  2711  0071AA  D7EE               	goto	l1194
  2712  0071AC  D2C3               	goto	l1234
  2713  0071AE                     l1195:
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;doprnt.c: 825: if(flag & (0x700)) {
  2717                           
  2718                           ; BSR set to: 0
  2719  0071AE  0E07               	movlw	7
  2720  0071B0  1566               	andwf	(printf@flag+1)& (0+255),w,b
  2721  0071B2  B4D8               	btfsc	status,2,c
  2722  0071B4  D2B2               	goto	l1197
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;doprnt.c: 829: prec = 6;
  2726  0071B6  0E00               	movlw	0
  2727  0071B8  6F68               	movwf	(printf@prec+1)& (0+255),b
  2728  0071BA  0E06               	movlw	6
  2729  0071BC  6F67               	movwf	printf@prec& (0+255),b
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2733  0071BE  C063  FFD9         	movff	printf@ap,fsr2l
  2734  0071C2  C064  FFDA         	movff	printf@ap+1,fsr2h
  2735  0071C6  CFDE F073          	movff	postinc2,printf@fval
  2736  0071CA  CFDE F074          	movff	postinc2,printf@fval+1
  2737  0071CE  CFDD F075          	movff	postdec2,printf@fval+2
  2738                           
  2739                           ; BSR set to: 0
  2740  0071D2  0E03               	movlw	3
  2741  0071D4  2763               	addwf	printf@ap& (0+255),f,b
  2742  0071D6  0E00               	movlw	0
  2743  0071D8  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;doprnt.c: 831: if(fval < 0.0) {
  2747  0071DA  AF75               	btfss	(printf@fval+2)& (0+255),7,b
  2748  0071DC  D011               	goto	l1198
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;doprnt.c: 832: fval = -fval;
  2752  0071DE  C073  F001         	movff	printf@fval,___ftneg@f1
  2753  0071E2  C074  F002         	movff	printf@fval+1,___ftneg@f1+1
  2754  0071E6  C075  F003         	movff	printf@fval+2,___ftneg@f1+2
  2755  0071EA  ECD5  F025         	call	___ftneg	;wreg free
  2756  0071EE  C001  F073         	movff	?___ftneg,printf@fval
  2757  0071F2  C002  F074         	movff	?___ftneg+1,printf@fval+1
  2758  0071F6  C003  F075         	movff	?___ftneg+2,printf@fval+2
  2759                           
  2760                           ;doprnt.c: 833: flag |= 0x03;
  2761  0071FA  0E03               	movlw	3
  2762  0071FC  0100               	movlb	0	; () banked
  2763  0071FE  1365               	iorwf	printf@flag& (0+255),f,b
  2764  007200                     l1198:
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;doprnt.c: 834: }
  2768                           ;doprnt.c: 835: exp = 0;
  2769                           
  2770                           ; BSR set to: 0
  2771  007200  0E00               	movlw	0
  2772  007202  6F6E               	movwf	(printf@exp+1)& (0+255),b
  2773  007204  0E00               	movlw	0
  2774  007206  6F6D               	movwf	printf@exp& (0+255),b
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;doprnt.c: 836: if( fval!=0) {
  2778  007208  5173               	movf	printf@fval& (0+255),w,b
  2779  00720A  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  2780  00720C  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  2781  00720E  B4D8               	btfsc	status,2,c
  2782  007210  D086               	goto	l1203
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2786  007212  0E82               	movlw	130
  2787  007214  6E51               	movwf	??_printf& (0+255),c
  2788  007216  0EFF               	movlw	255
  2789  007218  6E52               	movwf	(??_printf+1)& (0+255),c
  2790  00721A  C073  F053         	movff	printf@fval,??_printf+2
  2791  00721E  C074  F054         	movff	printf@fval+1,??_printf+3
  2792  007222  C075  F055         	movff	printf@fval+2,??_printf+4
  2793  007226  C076  F056         	movff	printf@fval+3,??_printf+5
  2794  00722A  0E10               	movlw	16
  2795  00722C  D005               	goto	u4280
  2796  00722E                     u4285:
  2797  00722E  90D8               	bcf	status,0,c
  2798  007230  3256               	rrcf	??_printf+5,f,c
  2799  007232  3255               	rrcf	??_printf+4,f,c
  2800  007234  3254               	rrcf	??_printf+3,f,c
  2801  007236  3253               	rrcf	??_printf+2,f,c
  2802  007238                     u4280:
  2803  007238  2EE8               	decfsz	wreg,f,c
  2804  00723A  D7F9               	goto	u4285
  2805  00723C  5053               	movf	??_printf+2,w,c
  2806  00723E  2451               	addwf	??_printf,w,c
  2807  007240  6F6D               	movwf	printf@exp& (0+255),b
  2808  007242  0E00               	movlw	0
  2809  007244  2052               	addwfc	??_printf+1,w,c
  2810  007246  6F6E               	movwf	(printf@exp+1)& (0+255),b
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;doprnt.c: 838: exp--;
  2814  007248  076D               	decf	printf@exp& (0+255),f,b
  2815  00724A  A0D8               	btfss	status,0,c
  2816  00724C  076E               	decf	(printf@exp+1)& (0+255),f,b
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;doprnt.c: 839: exp *= 3;
  2820  00724E  C06D  F00F         	movff	printf@exp,___wmul@multiplier
  2821  007252  C06E  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2822  007256  0E00               	movlw	0
  2823  007258  6E12               	movwf	___wmul@multiplicand+1,c
  2824  00725A  0E03               	movlw	3
  2825  00725C  6E11               	movwf	___wmul@multiplicand,c
  2826  00725E  ECE7  F025         	call	___wmul	;wreg free
  2827  007262  C00F  F06D         	movff	?___wmul,printf@exp
  2828  007266  C010  F06E         	movff	?___wmul+1,printf@exp+1
  2829                           
  2830                           ;doprnt.c: 840: exp /= 10;
  2831  00726A  C06D  F007         	movff	printf@exp,___awdiv@dividend
  2832  00726E  C06E  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2833  007272  0E00               	movlw	0
  2834  007274  6E0A               	movwf	___awdiv@divisor+1,c
  2835  007276  0E0A               	movlw	10
  2836  007278  6E09               	movwf	___awdiv@divisor,c
  2837  00727A  ECE4  F028         	call	___awdiv	;wreg free
  2838  00727E  C007  F06D         	movff	?___awdiv,printf@exp
  2839  007282  C008  F06E         	movff	?___awdiv+1,printf@exp+1
  2840                           
  2841                           ;doprnt.c: 841: if(exp < 0)
  2842  007286  0100               	movlb	0	; () banked
  2843  007288  AF6E               	btfss	(printf@exp+1)& (0+255),7,b
  2844  00728A  D003               	goto	l1200
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;doprnt.c: 842: exp--;
  2848  00728C  076D               	decf	printf@exp& (0+255),f,b
  2849  00728E  A0D8               	btfss	status,0,c
  2850  007290  076E               	decf	(printf@exp+1)& (0+255),f,b
  2851  007292                     l1200:
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2855                           
  2856                           ; BSR set to: 0
  2857  007292  516D               	movf	printf@exp& (0+255),w,b
  2858  007294  0800               	sublw	0
  2859  007296  ECAC  F036         	call	_scale
  2860  00729A  C030  F06F         	movff	?_scale,printf@tmpval
  2861  00729E  C031  F070         	movff	?_scale+1,printf@tmpval+1
  2862  0072A2  C032  F071         	movff	?_scale+2,printf@tmpval+2
  2863                           
  2864                           ;doprnt.c: 847: tmpval.integ *= fval;
  2865  0072A6  C06F  F021         	movff	printf@tmpval,___ftmul@f1
  2866  0072AA  C070  F022         	movff	printf@tmpval+1,___ftmul@f1+1
  2867  0072AE  C071  F023         	movff	printf@tmpval+2,___ftmul@f1+2
  2868  0072B2  C073  F024         	movff	printf@fval,___ftmul@f2
  2869  0072B6  C074  F025         	movff	printf@fval+1,___ftmul@f2+1
  2870  0072BA  C075  F026         	movff	printf@fval+2,___ftmul@f2+2
  2871  0072BE  EC73  F02C         	call	___ftmul	;wreg free
  2872  0072C2  C021  F06F         	movff	?___ftmul,printf@tmpval
  2873  0072C6  C022  F070         	movff	?___ftmul+1,printf@tmpval+1
  2874  0072CA  C023  F071         	movff	?___ftmul+2,printf@tmpval+2
  2875                           
  2876                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2877  0072CE  C06F  F001         	movff	printf@tmpval,___ftge@ff1
  2878  0072D2  C070  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2879  0072D6  C071  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2880  0072DA  0E00               	movlw	0
  2881  0072DC  6E04               	movwf	___ftge@ff2,c
  2882  0072DE  0E80               	movlw	128
  2883  0072E0  6E05               	movwf	___ftge@ff2+1,c
  2884  0072E2  0E3F               	movlw	63
  2885  0072E4  6E06               	movwf	___ftge@ff2+2,c
  2886  0072E6  EC69  F029         	call	___ftge	;wreg free
  2887  0072EA  B0D8               	btfsc	status,0,c
  2888  0072EC  D005               	goto	l1201
  2889                           
  2890                           ;doprnt.c: 849: exp--;
  2891  0072EE  0100               	movlb	0	; () banked
  2892  0072F0  076D               	decf	printf@exp& (0+255),f,b
  2893  0072F2  A0D8               	btfss	status,0,c
  2894  0072F4  076E               	decf	(printf@exp+1)& (0+255),f,b
  2895  0072F6  D013               	goto	l1203
  2896  0072F8                     l1201:
  2897                           
  2898                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2899                           
  2900                           ; BSR set to: 0
  2901  0072F8  C06F  F001         	movff	printf@tmpval,___ftge@ff1
  2902  0072FC  C070  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2903  007300  C071  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2904  007304  0E00               	movlw	0
  2905  007306  6E04               	movwf	___ftge@ff2,c
  2906  007308  0E20               	movlw	32
  2907  00730A  6E05               	movwf	___ftge@ff2+1,c
  2908  00730C  0E41               	movlw	65
  2909  00730E  6E06               	movwf	___ftge@ff2+2,c
  2910  007310  EC69  F029         	call	___ftge	;wreg free
  2911  007314  A0D8               	btfss	status,0,c
  2912  007316  D003               	goto	l1203
  2913                           
  2914                           ;doprnt.c: 851: exp++;
  2915  007318  0100               	movlb	0	; () banked
  2916  00731A  4B6D               	infsnz	printf@exp& (0+255),f,b
  2917  00731C  2B6E               	incf	(printf@exp+1)& (0+255),f,b
  2918  00731E                     l1203:
  2919                           
  2920                           ;doprnt.c: 852: }
  2921                           ;doprnt.c: 1112: if(prec <= 12)
  2922                           
  2923                           ; BSR set to: 0
  2924                           
  2925                           ; BSR set to: 0
  2926                           
  2927                           ; BSR set to: 0
  2928  00731E  0100               	movlb	0	; () banked
  2929  007320  BF68               	btfsc	(printf@prec+1)& (0+255),7,b
  2930  007322  D006               	goto	u4320
  2931  007324  5168               	movf	(printf@prec+1)& (0+255),w,b
  2932  007326  E11B               	bnz	l5752
  2933  007328  0E0D               	movlw	13
  2934  00732A  5D67               	subwf	printf@prec& (0+255),w,b
  2935  00732C  B0D8               	btfsc	status,0,c
  2936  00732E  D017               	goto	l1204
  2937  007330                     u4320:
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;doprnt.c: 1113: fval += fround(prec);
  2941  007330  C073  F015         	movff	printf@fval,___ftadd@f1
  2942  007334  C074  F016         	movff	printf@fval+1,___ftadd@f1+1
  2943  007338  C075  F017         	movff	printf@fval+2,___ftadd@f1+2
  2944  00733C  5167               	movf	printf@prec& (0+255),w,b
  2945  00733E  ECD9  F033         	call	_fround
  2946  007342  C030  F018         	movff	?_fround,___ftadd@f2
  2947  007346  C031  F019         	movff	?_fround+1,___ftadd@f2+1
  2948  00734A  C032  F01A         	movff	?_fround+2,___ftadd@f2+2
  2949  00734E  EC28  F031         	call	___ftadd	;wreg free
  2950  007352  C015  F073         	movff	?___ftadd,printf@fval
  2951  007356  C016  F074         	movff	?___ftadd+1,printf@fval+1
  2952  00735A  C017  F075         	movff	?___ftadd+2,printf@fval+2
  2953  00735E                     l1204:
  2954  00735E                     l5752:
  2955                           
  2956                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2957  00735E  0100               	movlb	0	; () banked
  2958  007360  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  2959  007362  D006               	goto	u4330
  2960  007364  516E               	movf	(printf@exp+1)& (0+255),w,b
  2961  007366  E120               	bnz	l5760
  2962  007368  0E0A               	movlw	10
  2963  00736A  5D6D               	subwf	printf@exp& (0+255),w,b
  2964  00736C  B0D8               	btfsc	status,0,c
  2965  00736E  D01C               	goto	u4360
  2966  007370                     u4330:
  2967                           
  2968                           ; BSR set to: 0
  2969  007370  5173               	movf	printf@fval& (0+255),w,b
  2970  007372  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  2971  007374  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  2972  007376  B4D8               	btfsc	status,2,c
  2973  007378  D056               	goto	l1205
  2974                           
  2975                           ; BSR set to: 0
  2976  00737A  C073  F037         	movff	printf@fval,___fttol@f1
  2977  00737E  C074  F038         	movff	printf@fval+1,___fttol@f1+1
  2978  007382  C075  F039         	movff	printf@fval+2,___fttol@f1+2
  2979  007386  EC67  F02D         	call	___fttol	;wreg free
  2980  00738A  5037               	movf	?___fttol,w,c
  2981  00738C  1038               	iorwf	?___fttol+1,w,c
  2982  00738E  1039               	iorwf	?___fttol+2,w,c
  2983  007390  103A               	iorwf	?___fttol+3,w,c
  2984  007392  A4D8               	btfss	status,2,c
  2985  007394  D048               	goto	l1205
  2986  007396  0100               	movlb	0	; () banked
  2987  007398  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  2988  00739A  D045               	goto	l1205
  2989  00739C  516E               	movf	(printf@exp+1)& (0+255),w,b
  2990  00739E  E104               	bnz	l5760
  2991  0073A0  0E02               	movlw	2
  2992  0073A2  5D6D               	subwf	printf@exp& (0+255),w,b
  2993  0073A4  A0D8               	btfss	status,0,c
  2994  0073A6  D03F               	goto	l1205
  2995  0073A8                     u4360:
  2996  0073A8                     l5760:
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3000  0073A8  C06F  F001         	movff	printf@tmpval,___ftge@ff1
  3001  0073AC  C070  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  3002  0073B0  C071  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  3003  0073B4  0E70               	movlw	112
  3004  0073B6  6E04               	movwf	___ftge@ff2,c
  3005  0073B8  0E89               	movlw	137
  3006  0073BA  6E05               	movwf	___ftge@ff2+1,c
  3007  0073BC  0E40               	movlw	64
  3008  0073BE  6E06               	movwf	___ftge@ff2+2,c
  3009  0073C0  EC69  F029         	call	___ftge	;wreg free
  3010  0073C4  B0D8               	btfsc	status,0,c
  3011  0073C6  D003               	goto	l1208
  3012                           
  3013                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3014  0073C8  0100               	movlb	0	; () banked
  3015  0073CA  0EF7               	movlw	247
  3016  0073CC  D002               	goto	L1
  3017  0073CE                     l1208:
  3018                           
  3019                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3020                           
  3021                           ; BSR set to: 0
  3022  0073CE  0100               	movlb	0	; () banked
  3023  0073D0  0EF8               	movlw	248
  3024  0073D2                     L1:
  3025  0073D2  276D               	addwf	printf@exp& (0+255),f,b
  3026  0073D4  0EFF               	movlw	255
  3027  0073D6  236E               	addwfc	(printf@exp+1)& (0+255),f,b
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;doprnt.c: 1124: }
  3031                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3032                           
  3033                           ; BSR set to: 0
  3034  0073D8  516D               	movf	printf@exp& (0+255),w,b
  3035  0073DA  ECAC  F036         	call	_scale
  3036  0073DE  C030  F06F         	movff	?_scale,printf@tmpval
  3037  0073E2  C031  F070         	movff	?_scale+1,printf@tmpval+1
  3038  0073E6  C032  F071         	movff	?_scale+2,printf@tmpval+2
  3039                           
  3040                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3041  0073EA  C073  F001         	movff	printf@fval,__tdiv_to_l_@f1
  3042  0073EE  C074  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3043  0073F2  C075  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3044  0073F6  C06F  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  3045  0073FA  C070  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3046  0073FE  C071  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3047  007402  EC04  F02F         	call	__tdiv_to_l_	;wreg free
  3048  007406  C001  F069         	movff	?__tdiv_to_l_,printf@val
  3049  00740A  C002  F06A         	movff	?__tdiv_to_l_+1,printf@val+1
  3050  00740E  C003  F06B         	movff	?__tdiv_to_l_+2,printf@val+2
  3051  007412  C004  F06C         	movff	?__tdiv_to_l_+3,printf@val+3
  3052                           
  3053                           ;doprnt.c: 1129: fval = 0.0;
  3054  007416  0E00               	movlw	0
  3055  007418  0100               	movlb	0	; () banked
  3056  00741A  6F73               	movwf	printf@fval& (0+255),b
  3057  00741C  0E00               	movlw	0
  3058  00741E  6F74               	movwf	(printf@fval+1)& (0+255),b
  3059  007420  0E00               	movlw	0
  3060  007422  6F75               	movwf	(printf@fval+2)& (0+255),b
  3061                           
  3062                           ;doprnt.c: 1130: } else {
  3063  007424  D033               	goto	l1214
  3064  007426                     l1205:
  3065                           
  3066                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3067                           
  3068                           ; BSR set to: 0
  3069  007426  C073  F037         	movff	printf@fval,___fttol@f1
  3070  00742A  C074  F038         	movff	printf@fval+1,___fttol@f1+1
  3071  00742E  C075  F039         	movff	printf@fval+2,___fttol@f1+2
  3072  007432  EC67  F02D         	call	___fttol	;wreg free
  3073  007436  C037  F069         	movff	?___fttol,printf@val
  3074  00743A  C038  F06A         	movff	?___fttol+1,printf@val+1
  3075  00743E  C039  F06B         	movff	?___fttol+2,printf@val+2
  3076  007442  C03A  F06C         	movff	?___fttol+3,printf@val+3
  3077                           
  3078                           ;doprnt.c: 1132: fval -= (double)val;
  3079  007446  C073  F021         	movff	printf@fval,___ftsub@f1
  3080  00744A  C074  F022         	movff	printf@fval+1,___ftsub@f1+1
  3081  00744E  C075  F023         	movff	printf@fval+2,___ftsub@f1+2
  3082  007452  C069  F009         	movff	printf@val,___lltoft@c
  3083  007456  C06A  F00A         	movff	printf@val+1,___lltoft@c+1
  3084  00745A  C06B  F00B         	movff	printf@val+2,___lltoft@c+2
  3085  00745E  C06C  F00C         	movff	printf@val+3,___lltoft@c+3
  3086  007462  ECE1  F026         	call	___lltoft	;wreg free
  3087  007466  C009  F024         	movff	?___lltoft,___ftsub@f2
  3088  00746A  C00A  F025         	movff	?___lltoft+1,___ftsub@f2+1
  3089  00746E  C00B  F026         	movff	?___lltoft+2,___ftsub@f2+2
  3090  007472  EC41  F026         	call	___ftsub	;wreg free
  3091  007476  C021  F073         	movff	?___ftsub,printf@fval
  3092  00747A  C022  F074         	movff	?___ftsub+1,printf@fval+1
  3093  00747E  C023  F075         	movff	?___ftsub+2,printf@fval+2
  3094                           
  3095                           ;doprnt.c: 1133: exp = 0;
  3096  007482  0E00               	movlw	0
  3097  007484  0100               	movlb	0	; () banked
  3098  007486  6F6E               	movwf	(printf@exp+1)& (0+255),b
  3099  007488  0E00               	movlw	0
  3100  00748A  6F6D               	movwf	printf@exp& (0+255),b
  3101  00748C                     l1214:
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;doprnt.c: 1134: }
  3105                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3106                           
  3107                           ; BSR set to: 0
  3108  00748C  0E01               	movlw	1
  3109  00748E  6F76               	movwf	printf@c& (0+255),b
  3110  007490                     l5780:
  3111                           
  3112                           ; BSR set to: 0
  3113  007490  0E0A               	movlw	10
  3114  007492  1976               	xorwf	printf@c& (0+255),w,b
  3115  007494  B4D8               	btfsc	status,2,c
  3116  007496  D018               	goto	u4400
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;doprnt.c: 1137: if(val < dpowers[c])
  3120                           
  3121                           ; BSR set to: 0
  3122                           
  3123                           ; BSR set to: 0
  3124  007498  5176               	movf	printf@c& (0+255),w,b
  3125  00749A  0D04               	mullw	4
  3126  00749C  0EF5               	movlw	low _dpowers
  3127  00749E  24F3               	addwf	prodl,w,c
  3128  0074A0  6EF6               	movwf	tblptrl,c
  3129  0074A2  0E7E               	movlw	high _dpowers
  3130  0074A4  20F4               	addwfc	prodh,w,c
  3131  0074A6  6EF7               	movwf	tblptrh,c
  3132  0074A8                     	if	0	;There are less than 3 active tblptr bytes
  3133  0074A8                     	endif
  3134  0074A8  0009               	tblrd		*+
  3135  0074AA  50F5               	movf	tablat,w,c
  3136  0074AC  5D69               	subwf	printf@val& (0+255),w,b
  3137  0074AE  0009               	tblrd		*+
  3138  0074B0  50F5               	movf	tablat,w,c
  3139  0074B2  596A               	subwfb	(printf@val+1)& (0+255),w,b
  3140  0074B4  0009               	tblrd		*+
  3141  0074B6  50F5               	movf	tablat,w,c
  3142  0074B8  596B               	subwfb	(printf@val+2)& (0+255),w,b
  3143  0074BA  0009               	tblrd		*+
  3144  0074BC  50F5               	movf	tablat,w,c
  3145  0074BE  596C               	subwfb	(printf@val+3)& (0+255),w,b
  3146  0074C0  A0D8               	btfss	status,0,c
  3147  0074C2  D002               	goto	u4400
  3148                           
  3149                           ; BSR set to: 0
  3150                           
  3151                           ; BSR set to: 0
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;doprnt.c: 1138: break;
  3155  0074C4  2B76               	incf	printf@c& (0+255),f,b
  3156  0074C6  D7E4               	goto	l5780
  3157  0074C8                     u4400:
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;doprnt.c: 1175: {
  3161                           ;doprnt.c: 1188: if(flag & 0x03)
  3162                           
  3163                           ; BSR set to: 0
  3164  0074C8  0E03               	movlw	3
  3165  0074CA  1565               	andwf	printf@flag& (0+255),w,b
  3166  0074CC  6E51               	movwf	??_printf& (0+255),c
  3167  0074CE  0E00               	movlw	0
  3168  0074D0  1566               	andwf	(printf@flag+1)& (0+255),w,b
  3169  0074D2  6E52               	movwf	(??_printf+1)& (0+255),c
  3170  0074D4  5051               	movf	??_printf,w,c
  3171  0074D6  1052               	iorwf	??_printf+1,w,c
  3172  0074D8  B4D8               	btfsc	status,2,c
  3173  0074DA  D04A               	goto	l1219
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;doprnt.c: 1190: (putch('-') );
  3177  0074DC  0E2D               	movlw	45
  3178  0074DE  EC92  F025         	call	_putch
  3179                           
  3180                           ;doprnt.c: 1195: }
  3181                           ;doprnt.c: 1196: while(c--) {
  3182  0074E2  D046               	goto	l1219
  3183  0074E4                     
  3184                           ;doprnt.c: 1200: {
  3185                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3186  0074E4  C069  F001         	movff	printf@val,___lldiv@dividend
  3187  0074E8  C06A  F002         	movff	printf@val+1,___lldiv@dividend+1
  3188  0074EC  C06B  F003         	movff	printf@val+2,___lldiv@dividend+2
  3189  0074F0  C06C  F004         	movff	printf@val+3,___lldiv@dividend+3
  3190  0074F4  0100               	movlb	0	; () banked
  3191  0074F6  5176               	movf	printf@c& (0+255),w,b
  3192  0074F8  0D04               	mullw	4
  3193  0074FA  0EF5               	movlw	low _dpowers
  3194  0074FC  24F3               	addwf	prodl,w,c
  3195  0074FE  6EF6               	movwf	tblptrl,c
  3196  007500  0E7E               	movlw	high _dpowers
  3197  007502  20F4               	addwfc	prodh,w,c
  3198  007504  6EF7               	movwf	tblptrh,c
  3199  007506                     	if	0	;There are less than 3 active tblptr bytes
  3200  007506                     	endif
  3201  007506  0009               	tblrd		*+
  3202  007508  CFF5 F005          	movff	tablat,___lldiv@divisor
  3203  00750C  0009               	tblrd		*+
  3204  00750E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3205  007512  0009               	tblrd		*+
  3206  007514  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3207  007518  000A               	tblrd		*-
  3208  00751A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3209  00751E  ECA3  F028         	call	___lldiv	;wreg free
  3210  007522  C001  F06F         	movff	?___lldiv,printf@tmpval
  3211  007526  C002  F070         	movff	?___lldiv+1,printf@tmpval+1
  3212  00752A  C003  F071         	movff	?___lldiv+2,printf@tmpval+2
  3213  00752E  C004  F072         	movff	?___lldiv+3,printf@tmpval+3
  3214                           
  3215                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3216  007532  C06F  F001         	movff	printf@tmpval,___llmod@dividend
  3217  007536  C070  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  3218  00753A  C071  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  3219  00753E  C072  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  3220  007542  0E0A               	movlw	10
  3221  007544  6E05               	movwf	___llmod@divisor,c
  3222  007546  0E00               	movlw	0
  3223  007548  6E06               	movwf	___llmod@divisor+1,c
  3224  00754A  0E00               	movlw	0
  3225  00754C  6E07               	movwf	___llmod@divisor+2,c
  3226  00754E  0E00               	movlw	0
  3227  007550  6E08               	movwf	___llmod@divisor+3,c
  3228  007552  EC42  F027         	call	___llmod	;wreg free
  3229  007556  C001  F06F         	movff	?___llmod,printf@tmpval
  3230  00755A  C002  F070         	movff	?___llmod+1,printf@tmpval+1
  3231  00755E  C003  F071         	movff	?___llmod+2,printf@tmpval+2
  3232  007562  C004  F072         	movff	?___llmod+3,printf@tmpval+3
  3233                           
  3234                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3235  007566  0100               	movlb	0	; () banked
  3236  007568  516F               	movf	printf@tmpval& (0+255),w,b
  3237  00756A  0F30               	addlw	48
  3238  00756C  EC92  F025         	call	_putch
  3239  007570                     l1219:
  3240  007570  0100               	movlb	0	; () banked
  3241  007572  0776               	decf	printf@c& (0+255),f,b
  3242  007574  2976               	incf	printf@c& (0+255),w,b
  3243  007576  B4D8               	btfsc	status,2,c
  3244  007578  D008               	goto	l1222
  3245  00757A  D7B4               	goto	l1220
  3246  00757C                     l5804:
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;doprnt.c: 1208: (putch('0') );
  3250  00757C  0E30               	movlw	48
  3251  00757E  EC92  F025         	call	_putch
  3252                           
  3253                           ;doprnt.c: 1209: exp--;
  3254  007582  0100               	movlb	0	; () banked
  3255  007584  076D               	decf	printf@exp& (0+255),f,b
  3256  007586  A0D8               	btfss	status,0,c
  3257  007588  076E               	decf	(printf@exp+1)& (0+255),f,b
  3258  00758A                     l1222:
  3259                           
  3260                           ; BSR set to: 0
  3261                           
  3262                           ; BSR set to: 0
  3263  00758A  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  3264  00758C  D005               	goto	u4430
  3265  00758E  516E               	movf	(printf@exp+1)& (0+255),w,b
  3266  007590  E1F5               	bnz	l5804
  3267  007592  056D               	decf	printf@exp& (0+255),w,b
  3268  007594  B0D8               	btfsc	status,0,c
  3269  007596  D7F2               	goto	l1223
  3270  007598                     u4430:
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;doprnt.c: 1210: }
  3274                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3275                           
  3276                           ; BSR set to: 0
  3277  007598  BF68               	btfsc	(printf@prec+1)& (0+255),7,b
  3278  00759A  D009               	goto	l1225
  3279  00759C  5168               	movf	(printf@prec+1)& (0+255),w,b
  3280  00759E  E104               	bnz	u4440
  3281  0075A0  0E09               	movlw	9
  3282  0075A2  5D67               	subwf	printf@prec& (0+255),w,b
  3283  0075A4  A0D8               	btfss	status,0,c
  3284  0075A6  D003               	goto	l1225
  3285  0075A8                     u4440:
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3289  0075A8  0E08               	movlw	8
  3290  0075AA  6F76               	movwf	printf@c& (0+255),b
  3291  0075AC  D002               	goto	l1226
  3292  0075AE                     l1225:
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;doprnt.c: 1213: else
  3296                           ;doprnt.c: 1214: c = prec;
  3297  0075AE  C067  F076         	movff	printf@prec,printf@c
  3298  0075B2                     l1226:
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;doprnt.c: 1215: prec -= c;
  3302                           
  3303                           ; BSR set to: 0
  3304  0075B2  5176               	movf	printf@c& (0+255),w,b
  3305  0075B4  5F67               	subwf	printf@prec& (0+255),f,b
  3306  0075B6  0E00               	movlw	0
  3307  0075B8  BF76               	btfsc	printf@c& (0+255),7,b
  3308  0075BA  0EFF               	movlw	255
  3309  0075BC  5B68               	subwfb	(printf@prec+1)& (0+255),f,b
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;doprnt.c: 1219: if(c)
  3313  0075BE  5176               	movf	printf@c& (0+255),w,b
  3314  0075C0  B4D8               	btfsc	status,2,c
  3315  0075C2  D003               	goto	l1227
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;doprnt.c: 1221: (putch('.') );
  3319  0075C4  0E2E               	movlw	46
  3320  0075C6  EC92  F025         	call	_putch
  3321  0075CA                     l1227:
  3322                           
  3323                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3324  0075CA  0100               	movlb	0	; () banked
  3325  0075CC  5176               	movf	printf@c& (0+255),w,b
  3326  0075CE  ECAC  F036         	call	_scale
  3327  0075D2  C030  F060         	movff	?_scale,_printf$3065
  3328  0075D6  C031  F061         	movff	?_scale+1,_printf$3065+1
  3329  0075DA  C032  F062         	movff	?_scale+2,_printf$3065+2
  3330                           
  3331                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3332  0075DE  C073  F024         	movff	printf@fval,___ftmul@f2
  3333  0075E2  C074  F025         	movff	printf@fval+1,___ftmul@f2+1
  3334  0075E6  C075  F026         	movff	printf@fval+2,___ftmul@f2+2
  3335  0075EA  C060  F021         	movff	_printf$3065,___ftmul@f1
  3336  0075EE  C061  F022         	movff	_printf$3065+1,___ftmul@f1+1
  3337  0075F2  C062  F023         	movff	_printf$3065+2,___ftmul@f1+2
  3338  0075F6  EC73  F02C         	call	___ftmul	;wreg free
  3339  0075FA  C021  F037         	movff	?___ftmul,___fttol@f1
  3340  0075FE  C022  F038         	movff	?___ftmul+1,___fttol@f1+1
  3341  007602  C023  F039         	movff	?___ftmul+2,___fttol@f1+2
  3342  007606  EC67  F02D         	call	___fttol	;wreg free
  3343  00760A  C037  F069         	movff	?___fttol,printf@val
  3344  00760E  C038  F06A         	movff	?___fttol+1,printf@val+1
  3345  007612  C039  F06B         	movff	?___fttol+2,printf@val+2
  3346  007616  C03A  F06C         	movff	?___fttol+3,printf@val+3
  3347                           
  3348                           ;doprnt.c: 1228: while(c--) {
  3349  00761A  D06D               	goto	l1228
  3350  00761C                     
  3351                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3352  00761C  C069  F001         	movff	printf@val,___lldiv@dividend
  3353  007620  C06A  F002         	movff	printf@val+1,___lldiv@dividend+1
  3354  007624  C06B  F003         	movff	printf@val+2,___lldiv@dividend+2
  3355  007628  C06C  F004         	movff	printf@val+3,___lldiv@dividend+3
  3356  00762C  0100               	movlb	0	; () banked
  3357  00762E  5176               	movf	printf@c& (0+255),w,b
  3358  007630  0D04               	mullw	4
  3359  007632  0EF5               	movlw	low _dpowers
  3360  007634  24F3               	addwf	prodl,w,c
  3361  007636  6EF6               	movwf	tblptrl,c
  3362  007638  0E7E               	movlw	high _dpowers
  3363  00763A  20F4               	addwfc	prodh,w,c
  3364  00763C  6EF7               	movwf	tblptrh,c
  3365  00763E                     	if	0	;There are less than 3 active tblptr bytes
  3366  00763E                     	endif
  3367  00763E  0009               	tblrd		*+
  3368  007640  CFF5 F005          	movff	tablat,___lldiv@divisor
  3369  007644  0009               	tblrd		*+
  3370  007646  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3371  00764A  0009               	tblrd		*+
  3372  00764C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3373  007650  000A               	tblrd		*-
  3374  007652  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3375  007656  ECA3  F028         	call	___lldiv	;wreg free
  3376  00765A  C001  F06F         	movff	?___lldiv,printf@tmpval
  3377  00765E  C002  F070         	movff	?___lldiv+1,printf@tmpval+1
  3378  007662  C003  F071         	movff	?___lldiv+2,printf@tmpval+2
  3379  007666  C004  F072         	movff	?___lldiv+3,printf@tmpval+3
  3380                           
  3381                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3382  00766A  C06F  F001         	movff	printf@tmpval,___llmod@dividend
  3383  00766E  C070  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  3384  007672  C071  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  3385  007676  C072  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  3386  00767A  0E0A               	movlw	10
  3387  00767C  6E05               	movwf	___llmod@divisor,c
  3388  00767E  0E00               	movlw	0
  3389  007680  6E06               	movwf	___llmod@divisor+1,c
  3390  007682  0E00               	movlw	0
  3391  007684  6E07               	movwf	___llmod@divisor+2,c
  3392  007686  0E00               	movlw	0
  3393  007688  6E08               	movwf	___llmod@divisor+3,c
  3394  00768A  EC42  F027         	call	___llmod	;wreg free
  3395  00768E  C001  F06F         	movff	?___llmod,printf@tmpval
  3396  007692  C002  F070         	movff	?___llmod+1,printf@tmpval+1
  3397  007696  C003  F071         	movff	?___llmod+2,printf@tmpval+2
  3398  00769A  C004  F072         	movff	?___llmod+3,printf@tmpval+3
  3399                           
  3400                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3401  00769E  0100               	movlb	0	; () banked
  3402  0076A0  516F               	movf	printf@tmpval& (0+255),w,b
  3403  0076A2  0F30               	addlw	48
  3404  0076A4  EC92  F025         	call	_putch
  3405                           
  3406                           ;doprnt.c: 1232: val %= dpowers[c];
  3407  0076A8  C069  F001         	movff	printf@val,___llmod@dividend
  3408  0076AC  C06A  F002         	movff	printf@val+1,___llmod@dividend+1
  3409  0076B0  C06B  F003         	movff	printf@val+2,___llmod@dividend+2
  3410  0076B4  C06C  F004         	movff	printf@val+3,___llmod@dividend+3
  3411  0076B8  0100               	movlb	0	; () banked
  3412  0076BA  5176               	movf	printf@c& (0+255),w,b
  3413  0076BC  0D04               	mullw	4
  3414  0076BE  0EF5               	movlw	low _dpowers
  3415  0076C0  24F3               	addwf	prodl,w,c
  3416  0076C2  6EF6               	movwf	tblptrl,c
  3417  0076C4  0E7E               	movlw	high _dpowers
  3418  0076C6  20F4               	addwfc	prodh,w,c
  3419  0076C8  6EF7               	movwf	tblptrh,c
  3420  0076CA                     	if	0	;There are less than 3 active tblptr bytes
  3421  0076CA                     	endif
  3422  0076CA  0009               	tblrd		*+
  3423  0076CC  CFF5 F005          	movff	tablat,___llmod@divisor
  3424  0076D0  0009               	tblrd		*+
  3425  0076D2  CFF5 F006          	movff	tablat,___llmod@divisor+1
  3426  0076D6  0009               	tblrd		*+
  3427  0076D8  CFF5 F007          	movff	tablat,___llmod@divisor+2
  3428  0076DC  000A               	tblrd		*-
  3429  0076DE  CFF5 F008          	movff	tablat,___llmod@divisor+3
  3430  0076E2  EC42  F027         	call	___llmod	;wreg free
  3431  0076E6  C001  F069         	movff	?___llmod,printf@val
  3432  0076EA  C002  F06A         	movff	?___llmod+1,printf@val+1
  3433  0076EE  C003  F06B         	movff	?___llmod+2,printf@val+2
  3434  0076F2  C004  F06C         	movff	?___llmod+3,printf@val+3
  3435  0076F6                     l1228:
  3436  0076F6  0100               	movlb	0	; () banked
  3437  0076F8  0776               	decf	printf@c& (0+255),f,b
  3438  0076FA  2976               	incf	printf@c& (0+255),w,b
  3439  0076FC  B4D8               	btfsc	status,2,c
  3440  0076FE  D008               	goto	l1231
  3441  007700  D78D               	goto	l1229
  3442  007702                     
  3443                           ; BSR set to: 0
  3444                           ;doprnt.c: 1236: (putch('0') );
  3445                           
  3446                           ; BSR set to: 0
  3447  007702  0E30               	movlw	48
  3448  007704  EC92  F025         	call	_putch
  3449                           
  3450                           ;doprnt.c: 1237: prec--;
  3451  007708  0100               	movlb	0	; () banked
  3452  00770A  0767               	decf	printf@prec& (0+255),f,b
  3453  00770C  A0D8               	btfss	status,0,c
  3454  00770E  0768               	decf	(printf@prec+1)& (0+255),f,b
  3455  007710                     l1231:
  3456                           
  3457                           ; BSR set to: 0
  3458                           
  3459                           ; BSR set to: 0
  3460  007710  5167               	movf	printf@prec& (0+255),w,b
  3461  007712  1168               	iorwf	(printf@prec+1)& (0+255),w,b
  3462  007714  B4D8               	btfsc	status,2,c
  3463  007716  D00E               	goto	l1234
  3464  007718  D7F4               	goto	l1232
  3465  00771A                     l1197:
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;doprnt.c: 1246: }
  3469                           ;doprnt.c: 1422: {
  3470                           ;doprnt.c: 1438: if(flag & 0x03)
  3471                           
  3472                           ; BSR set to: 0
  3473  00771A  0E03               	movlw	3
  3474  00771C  1565               	andwf	printf@flag& (0+255),w,b
  3475  00771E  6E51               	movwf	??_printf& (0+255),c
  3476  007720  0E00               	movlw	0
  3477  007722  1566               	andwf	(printf@flag+1)& (0+255),w,b
  3478  007724  6E52               	movwf	(??_printf+1)& (0+255),c
  3479  007726  5051               	movf	??_printf,w,c
  3480  007728  1052               	iorwf	??_printf+1,w,c
  3481  00772A  B4D8               	btfsc	status,2,c
  3482  00772C  D003               	goto	l1234
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;doprnt.c: 1439: (putch('-') );
  3486  00772E  0E2D               	movlw	45
  3487  007730  EC92  F025         	call	_putch
  3488  007734                     l1234:
  3489  007734  C046  FFF6         	movff	printf@f,tblptrl
  3490  007738  C047  FFF7         	movff	printf@f+1,tblptrh
  3491  00773C  4A46               	infsnz	printf@f,f,c
  3492  00773E  2A47               	incf	printf@f+1,f,c
  3493  007740                     	if	0	;tblptru may be non-zero
  3494  007740                     	endif
  3495  007740                     	if	0	;tblptru may be non-zero
  3496  007740                     	endif
  3497  007740  0008               	tblrd		*
  3498  007742  CFF5 F076          	movff	tablat,printf@c
  3499  007746  0100               	movlb	0	; () banked
  3500  007748  5176               	movf	printf@c& (0+255),w,b
  3501  00774A  B4D8               	btfsc	status,2,c
  3502  00774C  0012               	return	
  3503  00774E  D50E               	goto	l1189
  3504  007750                     __end_of_printf:
  3505                           	opt stack 0
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           prodh	equ	0xFF4
  3511                           prodl	equ	0xFF3
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           postinc2	equ	0xFDE
  3515                           postdec2	equ	0xFDD
  3516                           fsr2h	equ	0xFDA
  3517                           fsr2l	equ	0xFD9
  3518                           status	equ	0xFD8
  3519                           
  3520 ;; *************** function _scale *****************
  3521 ;; Defined at:
  3522 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;  scl             1    wreg     char 
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;  scl             1   53[COMRAM] char 
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  3   47[COMRAM] char 
  3529 ;; Registers used:
  3530 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3536 ;;      Params:         3       0       0       0       0       0       0       0       0
  3537 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3538 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3539 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3540 ;;Total ram usage:        7 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    2
  3543 ;; This function calls:
  3544 ;;		___awdiv
  3545 ;;		___awmod
  3546 ;;		___ftmul
  3547 ;;		___wmul
  3548 ;; This function is called by:
  3549 ;;		_printf
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text4
  3554  006D58                     __ptext4:
  3555                           	opt stack 0
  3556  006D58                     _scale:
  3557                           	opt stack 27
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;incstack = 0
  3561                           ;scale@scl stored from wreg
  3562  006D58  6E36               	movwf	scale@scl,c
  3563                           
  3564                           ;doprnt.c: 428: if(scl < 0) {
  3565  006D5A  AE36               	btfss	scale@scl,7,c
  3566  006D5C  D101               	goto	l1178
  3567                           
  3568                           ;doprnt.c: 429: scl = -scl;
  3569  006D5E  6C36               	negf	scale@scl,c
  3570                           
  3571                           ;doprnt.c: 430: if(scl>=110)
  3572  006D60  5036               	movf	scale@scl,w,c
  3573  006D62  0A80               	xorlw	128
  3574  006D64  0F12               	addlw	-238
  3575  006D66  A0D8               	btfss	status,0,c
  3576  006D68  D091               	goto	l1179
  3577                           
  3578                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3579  006D6A  0E00               	movlw	0
  3580  006D6C  6E12               	movwf	___wmul@multiplicand+1,c
  3581  006D6E  0E03               	movlw	3
  3582  006D70  6E11               	movwf	___wmul@multiplicand,c
  3583  006D72  0E00               	movlw	0
  3584  006D74  6E0A               	movwf	___awdiv@divisor+1,c
  3585  006D76  0E0A               	movlw	10
  3586  006D78  6E09               	movwf	___awdiv@divisor,c
  3587  006D7A  0E00               	movlw	0
  3588  006D7C  6E04               	movwf	___awmod@divisor+1,c
  3589  006D7E  0E64               	movlw	100
  3590  006D80  6E03               	movwf	___awmod@divisor,c
  3591  006D82  5036               	movf	scale@scl,w,c
  3592  006D84  6E01               	movwf	___awmod@dividend,c
  3593  006D86  6A02               	clrf	___awmod@dividend+1,c
  3594  006D88  BE01               	btfsc	___awmod@dividend,7,c
  3595  006D8A  0602               	decf	___awmod@dividend+1,f,c
  3596  006D8C  EC75  F027         	call	___awmod	;wreg free
  3597  006D90  C001  F007         	movff	?___awmod,___awdiv@dividend
  3598  006D94  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3599  006D98  ECE4  F028         	call	___awdiv	;wreg free
  3600  006D9C  0E09               	movlw	9
  3601  006D9E  2407               	addwf	?___awdiv,w,c
  3602  006DA0  6E0F               	movwf	___wmul@multiplier,c
  3603  006DA2  0E00               	movlw	0
  3604  006DA4  2008               	addwfc	?___awdiv+1,w,c
  3605  006DA6  6E10               	movwf	___wmul@multiplier+1,c
  3606  006DA8  ECE7  F025         	call	___wmul	;wreg free
  3607  006DAC  0E44               	movlw	low __npowers_
  3608  006DAE  240F               	addwf	?___wmul,w,c
  3609  006DB0  6EF6               	movwf	tblptrl,c
  3610  006DB2  0E7F               	movlw	high __npowers_
  3611  006DB4  2010               	addwfc	?___wmul+1,w,c
  3612  006DB6  6EF7               	movwf	tblptrh,c
  3613  006DB8                     	if	0	;There are less than 3 active tblptr bytes
  3614  006DB8                     	endif
  3615  006DB8  0009               	tblrd		*+
  3616  006DBA  CFF5 F024          	movff	tablat,___ftmul@f2
  3617  006DBE  0009               	tblrd		*+
  3618  006DC0  CFF5 F025          	movff	tablat,___ftmul@f2+1
  3619  006DC4  000A               	tblrd		*-
  3620  006DC6  CFF5 F026          	movff	tablat,___ftmul@f2+2
  3621  006DCA  0E00               	movlw	0
  3622  006DCC  6E0A               	movwf	___awdiv@divisor+1,c
  3623  006DCE  0E64               	movlw	100
  3624  006DD0  6E09               	movwf	___awdiv@divisor,c
  3625  006DD2  5036               	movf	scale@scl,w,c
  3626  006DD4  6E07               	movwf	___awdiv@dividend,c
  3627  006DD6  6A08               	clrf	___awdiv@dividend+1,c
  3628  006DD8  BE07               	btfsc	___awdiv@dividend,7,c
  3629  006DDA  0608               	decf	___awdiv@dividend+1,f,c
  3630  006DDC  ECE4  F028         	call	___awdiv	;wreg free
  3631  006DE0  0E12               	movlw	18
  3632  006DE2  2407               	addwf	?___awdiv,w,c
  3633  006DE4  6E0F               	movwf	___wmul@multiplier,c
  3634  006DE6  0E00               	movlw	0
  3635  006DE8  2008               	addwfc	?___awdiv+1,w,c
  3636  006DEA  6E10               	movwf	___wmul@multiplier+1,c
  3637  006DEC  0E00               	movlw	0
  3638  006DEE  6E12               	movwf	___wmul@multiplicand+1,c
  3639  006DF0  0E03               	movlw	3
  3640  006DF2  6E11               	movwf	___wmul@multiplicand,c
  3641  006DF4  ECE7  F025         	call	___wmul	;wreg free
  3642  006DF8  0E44               	movlw	low __npowers_
  3643  006DFA  240F               	addwf	?___wmul,w,c
  3644  006DFC  6EF6               	movwf	tblptrl,c
  3645  006DFE  0E7F               	movlw	high __npowers_
  3646  006E00  2010               	addwfc	?___wmul+1,w,c
  3647  006E02  6EF7               	movwf	tblptrh,c
  3648  006E04                     	if	0	;There are less than 3 active tblptr bytes
  3649  006E04                     	endif
  3650  006E04  0009               	tblrd		*+
  3651  006E06  CFF5 F021          	movff	tablat,___ftmul@f1
  3652  006E0A  0009               	tblrd		*+
  3653  006E0C  CFF5 F022          	movff	tablat,___ftmul@f1+1
  3654  006E10  000A               	tblrd		*-
  3655  006E12  CFF5 F023          	movff	tablat,___ftmul@f1+2
  3656  006E16  EC73  F02C         	call	___ftmul	;wreg free
  3657  006E1A  C021  F033         	movff	?___ftmul,_scale$3064
  3658  006E1E  C022  F034         	movff	?___ftmul+1,_scale$3064+1
  3659  006E22  C023  F035         	movff	?___ftmul+2,_scale$3064+2
  3660                           
  3661                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3662  006E26  C033  F021         	movff	_scale$3064,___ftmul@f1
  3663  006E2A  C034  F022         	movff	_scale$3064+1,___ftmul@f1+1
  3664  006E2E  C035  F023         	movff	_scale$3064+2,___ftmul@f1+2
  3665  006E32  0E00               	movlw	0
  3666  006E34  6E12               	movwf	___wmul@multiplicand+1,c
  3667  006E36  0E03               	movlw	3
  3668  006E38  6E11               	movwf	___wmul@multiplicand,c
  3669  006E3A  0E00               	movlw	0
  3670  006E3C  6E04               	movwf	___awmod@divisor+1,c
  3671  006E3E  0E0A               	movlw	10
  3672  006E40  6E03               	movwf	___awmod@divisor,c
  3673  006E42  5036               	movf	scale@scl,w,c
  3674  006E44  6E01               	movwf	___awmod@dividend,c
  3675  006E46  6A02               	clrf	___awmod@dividend+1,c
  3676  006E48  BE01               	btfsc	___awmod@dividend,7,c
  3677  006E4A  0602               	decf	___awmod@dividend+1,f,c
  3678  006E4C  EC75  F027         	call	___awmod	;wreg free
  3679  006E50  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3680  006E54  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3681  006E58  ECE7  F025         	call	___wmul	;wreg free
  3682  006E5C  0E44               	movlw	low __npowers_
  3683  006E5E  240F               	addwf	?___wmul,w,c
  3684  006E60  6EF6               	movwf	tblptrl,c
  3685  006E62  0E7F               	movlw	high __npowers_
  3686  006E64  2010               	addwfc	?___wmul+1,w,c
  3687  006E66  6EF7               	movwf	tblptrh,c
  3688  006E68                     	if	0	;There are less than 3 active tblptr bytes
  3689  006E68                     	endif
  3690  006E68  0009               	tblrd		*+
  3691  006E6A  CFF5 F024          	movff	tablat,___ftmul@f2
  3692  006E6E  0009               	tblrd		*+
  3693  006E70  CFF5 F025          	movff	tablat,___ftmul@f2+1
  3694  006E74  000A               	tblrd		*-
  3695  006E76  CFF5 F026          	movff	tablat,___ftmul@f2+2
  3696  006E7A  EC73  F02C         	call	___ftmul	;wreg free
  3697  006E7E  C021  F030         	movff	?___ftmul,?_scale
  3698  006E82  C022  F031         	movff	?___ftmul+1,?_scale+1
  3699  006E86  C023  F032         	movff	?___ftmul+2,?_scale+2
  3700  006E8A  0012               	return	
  3701  006E8C                     l1179:
  3702                           
  3703                           ;doprnt.c: 432: else if(scl > 10)
  3704  006E8C  5036               	movf	scale@scl,w,c
  3705  006E8E  0A80               	xorlw	128
  3706  006E90  0F75               	addlw	-139
  3707  006E92  A0D8               	btfss	status,0,c
  3708  006E94  D053               	goto	l1182
  3709                           
  3710                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3711  006E96  0E00               	movlw	0
  3712  006E98  6E0A               	movwf	___awdiv@divisor+1,c
  3713  006E9A  0E0A               	movlw	10
  3714  006E9C  6E09               	movwf	___awdiv@divisor,c
  3715  006E9E  5036               	movf	scale@scl,w,c
  3716  006EA0  6E07               	movwf	___awdiv@dividend,c
  3717  006EA2  6A08               	clrf	___awdiv@dividend+1,c
  3718  006EA4  BE07               	btfsc	___awdiv@dividend,7,c
  3719  006EA6  0608               	decf	___awdiv@dividend+1,f,c
  3720  006EA8  ECE4  F028         	call	___awdiv	;wreg free
  3721  006EAC  0E09               	movlw	9
  3722  006EAE  2407               	addwf	?___awdiv,w,c
  3723  006EB0  6E0F               	movwf	___wmul@multiplier,c
  3724  006EB2  0E00               	movlw	0
  3725  006EB4  2008               	addwfc	?___awdiv+1,w,c
  3726  006EB6  6E10               	movwf	___wmul@multiplier+1,c
  3727  006EB8  0E00               	movlw	0
  3728  006EBA  6E12               	movwf	___wmul@multiplicand+1,c
  3729  006EBC  0E03               	movlw	3
  3730  006EBE  6E11               	movwf	___wmul@multiplicand,c
  3731  006EC0  ECE7  F025         	call	___wmul	;wreg free
  3732  006EC4  0E44               	movlw	low __npowers_
  3733  006EC6  240F               	addwf	?___wmul,w,c
  3734  006EC8  6EF6               	movwf	tblptrl,c
  3735  006ECA  0E7F               	movlw	high __npowers_
  3736  006ECC  2010               	addwfc	?___wmul+1,w,c
  3737  006ECE  6EF7               	movwf	tblptrh,c
  3738  006ED0                     	if	0	;There are less than 3 active tblptr bytes
  3739  006ED0                     	endif
  3740  006ED0  0009               	tblrd		*+
  3741  006ED2  CFF5 F021          	movff	tablat,___ftmul@f1
  3742  006ED6  0009               	tblrd		*+
  3743  006ED8  CFF5 F022          	movff	tablat,___ftmul@f1+1
  3744  006EDC  000A               	tblrd		*-
  3745  006EDE  CFF5 F023          	movff	tablat,___ftmul@f1+2
  3746  006EE2  0E00               	movlw	0
  3747  006EE4  6E12               	movwf	___wmul@multiplicand+1,c
  3748  006EE6  0E03               	movlw	3
  3749  006EE8  6E11               	movwf	___wmul@multiplicand,c
  3750  006EEA  0E00               	movlw	0
  3751  006EEC  6E04               	movwf	___awmod@divisor+1,c
  3752  006EEE  0E0A               	movlw	10
  3753  006EF0  6E03               	movwf	___awmod@divisor,c
  3754  006EF2  5036               	movf	scale@scl,w,c
  3755  006EF4  6E01               	movwf	___awmod@dividend,c
  3756  006EF6  6A02               	clrf	___awmod@dividend+1,c
  3757  006EF8  BE01               	btfsc	___awmod@dividend,7,c
  3758  006EFA  0602               	decf	___awmod@dividend+1,f,c
  3759  006EFC  EC75  F027         	call	___awmod	;wreg free
  3760  006F00  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3761  006F04  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3762  006F08  ECE7  F025         	call	___wmul	;wreg free
  3763  006F0C  0E44               	movlw	low __npowers_
  3764  006F0E  240F               	addwf	?___wmul,w,c
  3765  006F10  6EF6               	movwf	tblptrl,c
  3766  006F12  0E7F               	movlw	high __npowers_
  3767  006F14  2010               	addwfc	?___wmul+1,w,c
  3768  006F16  6EF7               	movwf	tblptrh,c
  3769  006F18                     	if	0	;There are less than 3 active tblptr bytes
  3770  006F18                     	endif
  3771  006F18  0009               	tblrd		*+
  3772  006F1A  CFF5 F024          	movff	tablat,___ftmul@f2
  3773  006F1E  0009               	tblrd		*+
  3774  006F20  CFF5 F025          	movff	tablat,___ftmul@f2+1
  3775  006F24  000A               	tblrd		*-
  3776  006F26  CFF5 F026          	movff	tablat,___ftmul@f2+2
  3777  006F2A  EC73  F02C         	call	___ftmul	;wreg free
  3778  006F2E  C021  F030         	movff	?___ftmul,?_scale
  3779  006F32  C022  F031         	movff	?___ftmul+1,?_scale+1
  3780  006F36  C023  F032         	movff	?___ftmul+2,?_scale+2
  3781  006F3A  0012               	return	
  3782  006F3C                     l1182:
  3783                           
  3784                           ;doprnt.c: 434: return _npowers_[scl];
  3785  006F3C  5036               	movf	scale@scl,w,c
  3786  006F3E  0D03               	mullw	3
  3787  006F40  0E44               	movlw	low __npowers_
  3788  006F42  24F3               	addwf	prodl,w,c
  3789  006F44  6EF6               	movwf	tblptrl,c
  3790  006F46  0E7F               	movlw	high __npowers_
  3791  006F48  20F4               	addwfc	prodh,w,c
  3792  006F4A  6EF7               	movwf	tblptrh,c
  3793  006F4C                     	if	0	;There are less than 3 active tblptr bytes
  3794  006F4C                     	endif
  3795  006F4C  0009               	tblrd		*+
  3796  006F4E  CFF5 F030          	movff	tablat,?_scale
  3797  006F52  0009               	tblrd		*+
  3798  006F54  CFF5 F031          	movff	tablat,?_scale+1
  3799  006F58  000A               	tblrd		*-
  3800  006F5A  CFF5 F032          	movff	tablat,?_scale+2
  3801  006F5E  0012               	return	
  3802  006F60                     l1178:
  3803                           
  3804                           ;doprnt.c: 435: }
  3805                           ;doprnt.c: 436: if(scl>=110)
  3806  006F60  5036               	movf	scale@scl,w,c
  3807  006F62  0A80               	xorlw	128
  3808  006F64  0F12               	addlw	-238
  3809  006F66  A0D8               	btfss	status,0,c
  3810  006F68  D091               	goto	l1183
  3811                           
  3812                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3813  006F6A  0E00               	movlw	0
  3814  006F6C  6E12               	movwf	___wmul@multiplicand+1,c
  3815  006F6E  0E03               	movlw	3
  3816  006F70  6E11               	movwf	___wmul@multiplicand,c
  3817  006F72  0E00               	movlw	0
  3818  006F74  6E0A               	movwf	___awdiv@divisor+1,c
  3819  006F76  0E0A               	movlw	10
  3820  006F78  6E09               	movwf	___awdiv@divisor,c
  3821  006F7A  0E00               	movlw	0
  3822  006F7C  6E04               	movwf	___awmod@divisor+1,c
  3823  006F7E  0E64               	movlw	100
  3824  006F80  6E03               	movwf	___awmod@divisor,c
  3825  006F82  5036               	movf	scale@scl,w,c
  3826  006F84  6E01               	movwf	___awmod@dividend,c
  3827  006F86  6A02               	clrf	___awmod@dividend+1,c
  3828  006F88  BE01               	btfsc	___awmod@dividend,7,c
  3829  006F8A  0602               	decf	___awmod@dividend+1,f,c
  3830  006F8C  EC75  F027         	call	___awmod	;wreg free
  3831  006F90  C001  F007         	movff	?___awmod,___awdiv@dividend
  3832  006F94  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3833  006F98  ECE4  F028         	call	___awdiv	;wreg free
  3834  006F9C  0E09               	movlw	9
  3835  006F9E  2407               	addwf	?___awdiv,w,c
  3836  006FA0  6E0F               	movwf	___wmul@multiplier,c
  3837  006FA2  0E00               	movlw	0
  3838  006FA4  2008               	addwfc	?___awdiv+1,w,c
  3839  006FA6  6E10               	movwf	___wmul@multiplier+1,c
  3840  006FA8  ECE7  F025         	call	___wmul	;wreg free
  3841  006FAC  0E1D               	movlw	low __powers_
  3842  006FAE  240F               	addwf	?___wmul,w,c
  3843  006FB0  6EF6               	movwf	tblptrl,c
  3844  006FB2  0E7F               	movlw	high __powers_
  3845  006FB4  2010               	addwfc	?___wmul+1,w,c
  3846  006FB6  6EF7               	movwf	tblptrh,c
  3847  006FB8                     	if	0	;There are less than 3 active tblptr bytes
  3848  006FB8                     	endif
  3849  006FB8  0009               	tblrd		*+
  3850  006FBA  CFF5 F024          	movff	tablat,___ftmul@f2
  3851  006FBE  0009               	tblrd		*+
  3852  006FC0  CFF5 F025          	movff	tablat,___ftmul@f2+1
  3853  006FC4  000A               	tblrd		*-
  3854  006FC6  CFF5 F026          	movff	tablat,___ftmul@f2+2
  3855  006FCA  0E00               	movlw	0
  3856  006FCC  6E0A               	movwf	___awdiv@divisor+1,c
  3857  006FCE  0E64               	movlw	100
  3858  006FD0  6E09               	movwf	___awdiv@divisor,c
  3859  006FD2  5036               	movf	scale@scl,w,c
  3860  006FD4  6E07               	movwf	___awdiv@dividend,c
  3861  006FD6  6A08               	clrf	___awdiv@dividend+1,c
  3862  006FD8  BE07               	btfsc	___awdiv@dividend,7,c
  3863  006FDA  0608               	decf	___awdiv@dividend+1,f,c
  3864  006FDC  ECE4  F028         	call	___awdiv	;wreg free
  3865  006FE0  0E12               	movlw	18
  3866  006FE2  2407               	addwf	?___awdiv,w,c
  3867  006FE4  6E0F               	movwf	___wmul@multiplier,c
  3868  006FE6  0E00               	movlw	0
  3869  006FE8  2008               	addwfc	?___awdiv+1,w,c
  3870  006FEA  6E10               	movwf	___wmul@multiplier+1,c
  3871  006FEC  0E00               	movlw	0
  3872  006FEE  6E12               	movwf	___wmul@multiplicand+1,c
  3873  006FF0  0E03               	movlw	3
  3874  006FF2  6E11               	movwf	___wmul@multiplicand,c
  3875  006FF4  ECE7  F025         	call	___wmul	;wreg free
  3876  006FF8  0E1D               	movlw	low __powers_
  3877  006FFA  240F               	addwf	?___wmul,w,c
  3878  006FFC  6EF6               	movwf	tblptrl,c
  3879  006FFE  0E7F               	movlw	high __powers_
  3880  007000  2010               	addwfc	?___wmul+1,w,c
  3881  007002  6EF7               	movwf	tblptrh,c
  3882  007004                     	if	0	;There are less than 3 active tblptr bytes
  3883  007004                     	endif
  3884  007004  0009               	tblrd		*+
  3885  007006  CFF5 F021          	movff	tablat,___ftmul@f1
  3886  00700A  0009               	tblrd		*+
  3887  00700C  CFF5 F022          	movff	tablat,___ftmul@f1+1
  3888  007010  000A               	tblrd		*-
  3889  007012  CFF5 F023          	movff	tablat,___ftmul@f1+2
  3890  007016  EC73  F02C         	call	___ftmul	;wreg free
  3891  00701A  C021  F033         	movff	?___ftmul,_scale$3064
  3892  00701E  C022  F034         	movff	?___ftmul+1,_scale$3064+1
  3893  007022  C023  F035         	movff	?___ftmul+2,_scale$3064+2
  3894                           
  3895                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3896  007026  C033  F021         	movff	_scale$3064,___ftmul@f1
  3897  00702A  C034  F022         	movff	_scale$3064+1,___ftmul@f1+1
  3898  00702E  C035  F023         	movff	_scale$3064+2,___ftmul@f1+2
  3899  007032  0E00               	movlw	0
  3900  007034  6E12               	movwf	___wmul@multiplicand+1,c
  3901  007036  0E03               	movlw	3
  3902  007038  6E11               	movwf	___wmul@multiplicand,c
  3903  00703A  0E00               	movlw	0
  3904  00703C  6E04               	movwf	___awmod@divisor+1,c
  3905  00703E  0E0A               	movlw	10
  3906  007040  6E03               	movwf	___awmod@divisor,c
  3907  007042  5036               	movf	scale@scl,w,c
  3908  007044  6E01               	movwf	___awmod@dividend,c
  3909  007046  6A02               	clrf	___awmod@dividend+1,c
  3910  007048  BE01               	btfsc	___awmod@dividend,7,c
  3911  00704A  0602               	decf	___awmod@dividend+1,f,c
  3912  00704C  EC75  F027         	call	___awmod	;wreg free
  3913  007050  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3914  007054  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3915  007058  ECE7  F025         	call	___wmul	;wreg free
  3916  00705C  0E1D               	movlw	low __powers_
  3917  00705E  240F               	addwf	?___wmul,w,c
  3918  007060  6EF6               	movwf	tblptrl,c
  3919  007062  0E7F               	movlw	high __powers_
  3920  007064  2010               	addwfc	?___wmul+1,w,c
  3921  007066  6EF7               	movwf	tblptrh,c
  3922  007068                     	if	0	;There are less than 3 active tblptr bytes
  3923  007068                     	endif
  3924  007068  0009               	tblrd		*+
  3925  00706A  CFF5 F024          	movff	tablat,___ftmul@f2
  3926  00706E  0009               	tblrd		*+
  3927  007070  CFF5 F025          	movff	tablat,___ftmul@f2+1
  3928  007074  000A               	tblrd		*-
  3929  007076  CFF5 F026          	movff	tablat,___ftmul@f2+2
  3930  00707A  EC73  F02C         	call	___ftmul	;wreg free
  3931  00707E  C021  F030         	movff	?___ftmul,?_scale
  3932  007082  C022  F031         	movff	?___ftmul+1,?_scale+1
  3933  007086  C023  F032         	movff	?___ftmul+2,?_scale+2
  3934  00708A  0012               	return	
  3935  00708C                     l1183:
  3936                           
  3937                           ;doprnt.c: 438: else if(scl > 10)
  3938  00708C  5036               	movf	scale@scl,w,c
  3939  00708E  0A80               	xorlw	128
  3940  007090  0F75               	addlw	-139
  3941  007092  A0D8               	btfss	status,0,c
  3942  007094  D053               	goto	l1185
  3943                           
  3944                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3945  007096  0E00               	movlw	0
  3946  007098  6E0A               	movwf	___awdiv@divisor+1,c
  3947  00709A  0E0A               	movlw	10
  3948  00709C  6E09               	movwf	___awdiv@divisor,c
  3949  00709E  5036               	movf	scale@scl,w,c
  3950  0070A0  6E07               	movwf	___awdiv@dividend,c
  3951  0070A2  6A08               	clrf	___awdiv@dividend+1,c
  3952  0070A4  BE07               	btfsc	___awdiv@dividend,7,c
  3953  0070A6  0608               	decf	___awdiv@dividend+1,f,c
  3954  0070A8  ECE4  F028         	call	___awdiv	;wreg free
  3955  0070AC  0E09               	movlw	9
  3956  0070AE  2407               	addwf	?___awdiv,w,c
  3957  0070B0  6E0F               	movwf	___wmul@multiplier,c
  3958  0070B2  0E00               	movlw	0
  3959  0070B4  2008               	addwfc	?___awdiv+1,w,c
  3960  0070B6  6E10               	movwf	___wmul@multiplier+1,c
  3961  0070B8  0E00               	movlw	0
  3962  0070BA  6E12               	movwf	___wmul@multiplicand+1,c
  3963  0070BC  0E03               	movlw	3
  3964  0070BE  6E11               	movwf	___wmul@multiplicand,c
  3965  0070C0  ECE7  F025         	call	___wmul	;wreg free
  3966  0070C4  0E1D               	movlw	low __powers_
  3967  0070C6  240F               	addwf	?___wmul,w,c
  3968  0070C8  6EF6               	movwf	tblptrl,c
  3969  0070CA  0E7F               	movlw	high __powers_
  3970  0070CC  2010               	addwfc	?___wmul+1,w,c
  3971  0070CE  6EF7               	movwf	tblptrh,c
  3972  0070D0                     	if	0	;There are less than 3 active tblptr bytes
  3973  0070D0                     	endif
  3974  0070D0  0009               	tblrd		*+
  3975  0070D2  CFF5 F021          	movff	tablat,___ftmul@f1
  3976  0070D6  0009               	tblrd		*+
  3977  0070D8  CFF5 F022          	movff	tablat,___ftmul@f1+1
  3978  0070DC  000A               	tblrd		*-
  3979  0070DE  CFF5 F023          	movff	tablat,___ftmul@f1+2
  3980  0070E2  0E00               	movlw	0
  3981  0070E4  6E12               	movwf	___wmul@multiplicand+1,c
  3982  0070E6  0E03               	movlw	3
  3983  0070E8  6E11               	movwf	___wmul@multiplicand,c
  3984  0070EA  0E00               	movlw	0
  3985  0070EC  6E04               	movwf	___awmod@divisor+1,c
  3986  0070EE  0E0A               	movlw	10
  3987  0070F0  6E03               	movwf	___awmod@divisor,c
  3988  0070F2  5036               	movf	scale@scl,w,c
  3989  0070F4  6E01               	movwf	___awmod@dividend,c
  3990  0070F6  6A02               	clrf	___awmod@dividend+1,c
  3991  0070F8  BE01               	btfsc	___awmod@dividend,7,c
  3992  0070FA  0602               	decf	___awmod@dividend+1,f,c
  3993  0070FC  EC75  F027         	call	___awmod	;wreg free
  3994  007100  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3995  007104  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3996  007108  ECE7  F025         	call	___wmul	;wreg free
  3997  00710C  0E1D               	movlw	low __powers_
  3998  00710E  240F               	addwf	?___wmul,w,c
  3999  007110  6EF6               	movwf	tblptrl,c
  4000  007112  0E7F               	movlw	high __powers_
  4001  007114  2010               	addwfc	?___wmul+1,w,c
  4002  007116  6EF7               	movwf	tblptrh,c
  4003  007118                     	if	0	;There are less than 3 active tblptr bytes
  4004  007118                     	endif
  4005  007118  0009               	tblrd		*+
  4006  00711A  CFF5 F024          	movff	tablat,___ftmul@f2
  4007  00711E  0009               	tblrd		*+
  4008  007120  CFF5 F025          	movff	tablat,___ftmul@f2+1
  4009  007124  000A               	tblrd		*-
  4010  007126  CFF5 F026          	movff	tablat,___ftmul@f2+2
  4011  00712A  EC73  F02C         	call	___ftmul	;wreg free
  4012  00712E  C021  F030         	movff	?___ftmul,?_scale
  4013  007132  C022  F031         	movff	?___ftmul+1,?_scale+1
  4014  007136  C023  F032         	movff	?___ftmul+2,?_scale+2
  4015  00713A  0012               	return	
  4016  00713C                     l1185:
  4017                           
  4018                           ;doprnt.c: 440: return _powers_[scl];
  4019  00713C  5036               	movf	scale@scl,w,c
  4020  00713E  0D03               	mullw	3
  4021  007140  0E1D               	movlw	low __powers_
  4022  007142  24F3               	addwf	prodl,w,c
  4023  007144  6EF6               	movwf	tblptrl,c
  4024  007146  0E7F               	movlw	high __powers_
  4025  007148  20F4               	addwfc	prodh,w,c
  4026  00714A  6EF7               	movwf	tblptrh,c
  4027  00714C                     	if	0	;There are less than 3 active tblptr bytes
  4028  00714C                     	endif
  4029  00714C  0009               	tblrd		*+
  4030  00714E  CFF5 F030          	movff	tablat,?_scale
  4031  007152  0009               	tblrd		*+
  4032  007154  CFF5 F031          	movff	tablat,?_scale+1
  4033  007158  000A               	tblrd		*-
  4034  00715A  CFF5 F032          	movff	tablat,?_scale+2
  4035  00715E  0012               	return	
  4036  007160                     __end_of_scale:
  4037                           	opt stack 0
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           prodh	equ	0xFF4
  4043                           prodl	equ	0xFF3
  4044                           postinc0	equ	0xFEE
  4045                           wreg	equ	0xFE8
  4046                           postinc2	equ	0xFDE
  4047                           postdec2	equ	0xFDD
  4048                           fsr2h	equ	0xFDA
  4049                           fsr2l	equ	0xFD9
  4050                           status	equ	0xFD8
  4051                           
  4052 ;; *************** function _putch *****************
  4053 ;; Defined at:
  4054 ;;		line 19 in file "USART_Source_File.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  byte            1    wreg     unsigned char 
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;  byte            1    1[COMRAM] unsigned char 
  4059 ;;  trash           1    0[COMRAM] unsigned char 
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  1    wreg      void 
  4062 ;; Registers used:
  4063 ;;		wreg
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4069 ;;      Params:         0       0       0       0       0       0       0       0       0
  4070 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4071 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4072 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4073 ;;Total ram usage:        2 bytes
  4074 ;; Hardware stack levels used:    1
  4075 ;; This function calls:
  4076 ;;		Nothing
  4077 ;; This function is called by:
  4078 ;;		_printf
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text5
  4083  004B24                     __ptext5:
  4084                           	opt stack 0
  4085  004B24                     _putch:
  4086                           	opt stack 29
  4087                           
  4088                           ;incstack = 0
  4089                           ;putch@byte stored from wreg
  4090  004B24  6E02               	movwf	putch@byte,c
  4091                           
  4092                           ;USART_Source_File.c: 20: char trash;
  4093                           ;USART_Source_File.c: 23: if(RCSTAbits.FERR)
  4094  004B26  B4AB               	btfsc	4011,2,c	;volatile
  4095                           
  4096                           ;USART_Source_File.c: 24: trash = RCREG;
  4097  004B28  CFAE F001          	movff	4014,putch@trash	;volatile
  4098                           
  4099                           ;USART_Source_File.c: 25: if(RCSTAbits.OERR) {
  4100  004B2C  A2AB               	btfss	4011,1,c	;volatile
  4101  004B2E  D002               	goto	l154
  4102                           
  4103                           ;USART_Source_File.c: 26: RCSTAbits.CREN=0;
  4104  004B30  98AB               	bcf	4011,4,c	;volatile
  4105                           
  4106                           ;USART_Source_File.c: 27: RCSTAbits.CREN=1;
  4107  004B32  88AB               	bsf	4011,4,c	;volatile
  4108  004B34                     l154:
  4109                           
  4110                           ;USART_Source_File.c: 28: }
  4111                           ;USART_Source_File.c: 31: while (TXSTA1bits.TRMT == 0);
  4112  004B34  A2AC               	btfss	4012,1,c	;volatile
  4113  004B36  D7FE               	goto	l154
  4114                           
  4115                           ;USART_Source_File.c: 32: TXREG1 = byte;
  4116  004B38  C002  FFAD         	movff	putch@byte,4013	;volatile
  4117  004B3C                     
  4118                           ;USART_Source_File.c: 34: continue;
  4119  004B3C  A89E               	btfss	3998,4,c	;volatile
  4120  004B3E  D7FE               	goto	l159
  4121                           
  4122                           ;USART_Source_File.c: 35: TXIF=0;
  4123  004B40  989E               	bcf	3998,4,c	;volatile
  4124  004B42  0012               	return		;funcret
  4125  004B44                     __end_of_putch:
  4126                           	opt stack 0
  4127                           tblptru	equ	0xFF8
  4128                           tblptrh	equ	0xFF7
  4129                           tblptrl	equ	0xFF6
  4130                           tablat	equ	0xFF5
  4131                           prodh	equ	0xFF4
  4132                           prodl	equ	0xFF3
  4133                           postinc0	equ	0xFEE
  4134                           wreg	equ	0xFE8
  4135                           postinc2	equ	0xFDE
  4136                           postdec2	equ	0xFDD
  4137                           fsr2h	equ	0xFDA
  4138                           fsr2l	equ	0xFD9
  4139                           status	equ	0xFD8
  4140                           
  4141 ;; *************** function _fround *****************
  4142 ;; Defined at:
  4143 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  prec            1    wreg     unsigned char 
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;  prec            1   56[COMRAM] unsigned char 
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  3   47[COMRAM] unsigned char 
  4150 ;; Registers used:
  4151 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4157 ;;      Params:         3       0       0       0       0       0       0       0       0
  4158 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4159 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4160 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4161 ;;Total ram usage:       10 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    2
  4164 ;; This function calls:
  4165 ;;		___awdiv
  4166 ;;		___awmod
  4167 ;;		___ftmul
  4168 ;;		___wmul
  4169 ;; This function is called by:
  4170 ;;		_printf
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174                           	psect	text6
  4175  0067B2                     __ptext6:
  4176                           	opt stack 0
  4177  0067B2                     _fround:
  4178                           	opt stack 27
  4179                           
  4180                           ;incstack = 0
  4181                           ;fround@prec stored from wreg
  4182  0067B2  6E39               	movwf	fround@prec,c
  4183                           
  4184                           ;doprnt.c: 413: if(prec>=110)
  4185  0067B4  0E6D               	movlw	109
  4186  0067B6  6439               	cpfsgt	fround@prec,c
  4187  0067B8  D09F               	goto	l1172
  4188                           
  4189                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4190  0067BA  0E00               	movlw	0
  4191  0067BC  6E12               	movwf	___wmul@multiplicand+1,c
  4192  0067BE  0E03               	movlw	3
  4193  0067C0  6E11               	movwf	___wmul@multiplicand,c
  4194  0067C2  0E00               	movlw	0
  4195  0067C4  6E0A               	movwf	___awdiv@divisor+1,c
  4196  0067C6  0E0A               	movlw	10
  4197  0067C8  6E09               	movwf	___awdiv@divisor,c
  4198  0067CA  0E00               	movlw	0
  4199  0067CC  6E04               	movwf	___awmod@divisor+1,c
  4200  0067CE  0E64               	movlw	100
  4201  0067D0  6E03               	movwf	___awmod@divisor,c
  4202  0067D2  C039  F001         	movff	fround@prec,___awmod@dividend
  4203  0067D6  6A02               	clrf	___awmod@dividend+1,c
  4204  0067D8  EC75  F027         	call	___awmod	;wreg free
  4205  0067DC  C001  F007         	movff	?___awmod,___awdiv@dividend
  4206  0067E0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4207  0067E4  ECE4  F028         	call	___awdiv	;wreg free
  4208  0067E8  0E09               	movlw	9
  4209  0067EA  2407               	addwf	?___awdiv,w,c
  4210  0067EC  6E0F               	movwf	___wmul@multiplier,c
  4211  0067EE  0E00               	movlw	0
  4212  0067F0  2008               	addwfc	?___awdiv+1,w,c
  4213  0067F2  6E10               	movwf	___wmul@multiplier+1,c
  4214  0067F4  ECE7  F025         	call	___wmul	;wreg free
  4215  0067F8  0E44               	movlw	low __npowers_
  4216  0067FA  240F               	addwf	?___wmul,w,c
  4217  0067FC  6EF6               	movwf	tblptrl,c
  4218  0067FE  0E7F               	movlw	high __npowers_
  4219  006800  2010               	addwfc	?___wmul+1,w,c
  4220  006802  6EF7               	movwf	tblptrh,c
  4221  006804                     	if	0	;There are less than 3 active tblptr bytes
  4222  006804                     	endif
  4223  006804  0009               	tblrd		*+
  4224  006806  CFF5 F024          	movff	tablat,___ftmul@f2
  4225  00680A  0009               	tblrd		*+
  4226  00680C  CFF5 F025          	movff	tablat,___ftmul@f2+1
  4227  006810  000A               	tblrd		*-
  4228  006812  CFF5 F026          	movff	tablat,___ftmul@f2+2
  4229  006816  0E00               	movlw	0
  4230  006818  6E0A               	movwf	___awdiv@divisor+1,c
  4231  00681A  0E64               	movlw	100
  4232  00681C  6E09               	movwf	___awdiv@divisor,c
  4233  00681E  C039  F007         	movff	fround@prec,___awdiv@dividend
  4234  006822  6A08               	clrf	___awdiv@dividend+1,c
  4235  006824  ECE4  F028         	call	___awdiv	;wreg free
  4236  006828  0E12               	movlw	18
  4237  00682A  2407               	addwf	?___awdiv,w,c
  4238  00682C  6E0F               	movwf	___wmul@multiplier,c
  4239  00682E  0E00               	movlw	0
  4240  006830  2008               	addwfc	?___awdiv+1,w,c
  4241  006832  6E10               	movwf	___wmul@multiplier+1,c
  4242  006834  0E00               	movlw	0
  4243  006836  6E12               	movwf	___wmul@multiplicand+1,c
  4244  006838  0E03               	movlw	3
  4245  00683A  6E11               	movwf	___wmul@multiplicand,c
  4246  00683C  ECE7  F025         	call	___wmul	;wreg free
  4247  006840  0E44               	movlw	low __npowers_
  4248  006842  240F               	addwf	?___wmul,w,c
  4249  006844  6EF6               	movwf	tblptrl,c
  4250  006846  0E7F               	movlw	high __npowers_
  4251  006848  2010               	addwfc	?___wmul+1,w,c
  4252  00684A  6EF7               	movwf	tblptrh,c
  4253  00684C                     	if	0	;There are less than 3 active tblptr bytes
  4254  00684C                     	endif
  4255  00684C  0009               	tblrd		*+
  4256  00684E  CFF5 F021          	movff	tablat,___ftmul@f1
  4257  006852  0009               	tblrd		*+
  4258  006854  CFF5 F022          	movff	tablat,___ftmul@f1+1
  4259  006858  000A               	tblrd		*-
  4260  00685A  CFF5 F023          	movff	tablat,___ftmul@f1+2
  4261  00685E  EC73  F02C         	call	___ftmul	;wreg free
  4262  006862  C021  F036         	movff	?___ftmul,_fround$3062
  4263  006866  C022  F037         	movff	?___ftmul+1,_fround$3062+1
  4264  00686A  C023  F038         	movff	?___ftmul+2,_fround$3062+2
  4265                           
  4266                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4267  00686E  0E00               	movlw	0
  4268  006870  6E12               	movwf	___wmul@multiplicand+1,c
  4269  006872  0E03               	movlw	3
  4270  006874  6E11               	movwf	___wmul@multiplicand,c
  4271  006876  0E00               	movlw	0
  4272  006878  6E04               	movwf	___awmod@divisor+1,c
  4273  00687A  0E0A               	movlw	10
  4274  00687C  6E03               	movwf	___awmod@divisor,c
  4275  00687E  C039  F001         	movff	fround@prec,___awmod@dividend
  4276  006882  6A02               	clrf	___awmod@dividend+1,c
  4277  006884  EC75  F027         	call	___awmod	;wreg free
  4278  006888  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4279  00688C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4280  006890  ECE7  F025         	call	___wmul	;wreg free
  4281  006894  0E44               	movlw	low __npowers_
  4282  006896  240F               	addwf	?___wmul,w,c
  4283  006898  6EF6               	movwf	tblptrl,c
  4284  00689A  0E7F               	movlw	high __npowers_
  4285  00689C  2010               	addwfc	?___wmul+1,w,c
  4286  00689E  6EF7               	movwf	tblptrh,c
  4287  0068A0                     	if	0	;There are less than 3 active tblptr bytes
  4288  0068A0                     	endif
  4289  0068A0  0009               	tblrd		*+
  4290  0068A2  CFF5 F024          	movff	tablat,___ftmul@f2
  4291  0068A6  0009               	tblrd		*+
  4292  0068A8  CFF5 F025          	movff	tablat,___ftmul@f2+1
  4293  0068AC  000A               	tblrd		*-
  4294  0068AE  CFF5 F026          	movff	tablat,___ftmul@f2+2
  4295  0068B2  C036  F021         	movff	_fround$3062,___ftmul@f1
  4296  0068B6  C037  F022         	movff	_fround$3062+1,___ftmul@f1+1
  4297  0068BA  C038  F023         	movff	_fround$3062+2,___ftmul@f1+2
  4298  0068BE  EC73  F02C         	call	___ftmul	;wreg free
  4299  0068C2  C021  F033         	movff	?___ftmul,_fround$3063
  4300  0068C6  C022  F034         	movff	?___ftmul+1,_fround$3063+1
  4301  0068CA  C023  F035         	movff	?___ftmul+2,_fround$3063+2
  4302                           
  4303                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4304  0068CE  C033  F021         	movff	_fround$3063,___ftmul@f1
  4305  0068D2  C034  F022         	movff	_fround$3063+1,___ftmul@f1+1
  4306  0068D6  C035  F023         	movff	_fround$3063+2,___ftmul@f1+2
  4307  0068DA  0E00               	movlw	0
  4308  0068DC  6E24               	movwf	___ftmul@f2,c
  4309  0068DE  0E00               	movlw	0
  4310  0068E0  6E25               	movwf	___ftmul@f2+1,c
  4311  0068E2  0E3F               	movlw	63
  4312  0068E4  6E26               	movwf	___ftmul@f2+2,c
  4313  0068E6  EC73  F02C         	call	___ftmul	;wreg free
  4314  0068EA  C021  F030         	movff	?___ftmul,?_fround
  4315  0068EE  C022  F031         	movff	?___ftmul+1,?_fround+1
  4316  0068F2  C023  F032         	movff	?___ftmul+2,?_fround+2
  4317  0068F6  0012               	return	
  4318  0068F8                     l1172:
  4319                           
  4320                           ;doprnt.c: 415: else if(prec > 10)
  4321  0068F8  0E0A               	movlw	10
  4322  0068FA  6439               	cpfsgt	fround@prec,c
  4323  0068FC  D063               	goto	l1175
  4324                           
  4325                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4326  0068FE  0E00               	movlw	0
  4327  006900  6E12               	movwf	___wmul@multiplicand+1,c
  4328  006902  0E03               	movlw	3
  4329  006904  6E11               	movwf	___wmul@multiplicand,c
  4330  006906  0E00               	movlw	0
  4331  006908  6E04               	movwf	___awmod@divisor+1,c
  4332  00690A  0E0A               	movlw	10
  4333  00690C  6E03               	movwf	___awmod@divisor,c
  4334  00690E  C039  F001         	movff	fround@prec,___awmod@dividend
  4335  006912  6A02               	clrf	___awmod@dividend+1,c
  4336  006914  EC75  F027         	call	___awmod	;wreg free
  4337  006918  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4338  00691C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4339  006920  ECE7  F025         	call	___wmul	;wreg free
  4340  006924  0E44               	movlw	low __npowers_
  4341  006926  240F               	addwf	?___wmul,w,c
  4342  006928  6EF6               	movwf	tblptrl,c
  4343  00692A  0E7F               	movlw	high __npowers_
  4344  00692C  2010               	addwfc	?___wmul+1,w,c
  4345  00692E  6EF7               	movwf	tblptrh,c
  4346  006930                     	if	0	;There are less than 3 active tblptr bytes
  4347  006930                     	endif
  4348  006930  0009               	tblrd		*+
  4349  006932  CFF5 F024          	movff	tablat,___ftmul@f2
  4350  006936  0009               	tblrd		*+
  4351  006938  CFF5 F025          	movff	tablat,___ftmul@f2+1
  4352  00693C  000A               	tblrd		*-
  4353  00693E  CFF5 F026          	movff	tablat,___ftmul@f2+2
  4354  006942  0E00               	movlw	0
  4355  006944  6E0A               	movwf	___awdiv@divisor+1,c
  4356  006946  0E0A               	movlw	10
  4357  006948  6E09               	movwf	___awdiv@divisor,c
  4358  00694A  C039  F007         	movff	fround@prec,___awdiv@dividend
  4359  00694E  6A08               	clrf	___awdiv@dividend+1,c
  4360  006950  ECE4  F028         	call	___awdiv	;wreg free
  4361  006954  0E09               	movlw	9
  4362  006956  2407               	addwf	?___awdiv,w,c
  4363  006958  6E0F               	movwf	___wmul@multiplier,c
  4364  00695A  0E00               	movlw	0
  4365  00695C  2008               	addwfc	?___awdiv+1,w,c
  4366  00695E  6E10               	movwf	___wmul@multiplier+1,c
  4367  006960  0E00               	movlw	0
  4368  006962  6E12               	movwf	___wmul@multiplicand+1,c
  4369  006964  0E03               	movlw	3
  4370  006966  6E11               	movwf	___wmul@multiplicand,c
  4371  006968  ECE7  F025         	call	___wmul	;wreg free
  4372  00696C  0E44               	movlw	low __npowers_
  4373  00696E  240F               	addwf	?___wmul,w,c
  4374  006970  6EF6               	movwf	tblptrl,c
  4375  006972  0E7F               	movlw	high __npowers_
  4376  006974  2010               	addwfc	?___wmul+1,w,c
  4377  006976  6EF7               	movwf	tblptrh,c
  4378  006978                     	if	0	;There are less than 3 active tblptr bytes
  4379  006978                     	endif
  4380  006978  0009               	tblrd		*+
  4381  00697A  CFF5 F021          	movff	tablat,___ftmul@f1
  4382  00697E  0009               	tblrd		*+
  4383  006980  CFF5 F022          	movff	tablat,___ftmul@f1+1
  4384  006984  000A               	tblrd		*-
  4385  006986  CFF5 F023          	movff	tablat,___ftmul@f1+2
  4386  00698A  EC73  F02C         	call	___ftmul	;wreg free
  4387  00698E  C021  F036         	movff	?___ftmul,_fround$3062
  4388  006992  C022  F037         	movff	?___ftmul+1,_fround$3062+1
  4389  006996  C023  F038         	movff	?___ftmul+2,_fround$3062+2
  4390                           
  4391                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4392  00699A  C036  F021         	movff	_fround$3062,___ftmul@f1
  4393  00699E  C037  F022         	movff	_fround$3062+1,___ftmul@f1+1
  4394  0069A2  C038  F023         	movff	_fround$3062+2,___ftmul@f1+2
  4395  0069A6  0E00               	movlw	0
  4396  0069A8  6E24               	movwf	___ftmul@f2,c
  4397  0069AA  0E00               	movlw	0
  4398  0069AC  6E25               	movwf	___ftmul@f2+1,c
  4399  0069AE  0E3F               	movlw	63
  4400  0069B0  6E26               	movwf	___ftmul@f2+2,c
  4401  0069B2  EC73  F02C         	call	___ftmul	;wreg free
  4402  0069B6  C021  F030         	movff	?___ftmul,?_fround
  4403  0069BA  C022  F031         	movff	?___ftmul+1,?_fround+1
  4404  0069BE  C023  F032         	movff	?___ftmul+2,?_fround+2
  4405  0069C2  0012               	return	
  4406  0069C4                     l1175:
  4407                           
  4408                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4409  0069C4  5039               	movf	fround@prec,w,c
  4410  0069C6  0D03               	mullw	3
  4411  0069C8  0E44               	movlw	low __npowers_
  4412  0069CA  24F3               	addwf	prodl,w,c
  4413  0069CC  6EF6               	movwf	tblptrl,c
  4414  0069CE  0E7F               	movlw	high __npowers_
  4415  0069D0  20F4               	addwfc	prodh,w,c
  4416  0069D2  6EF7               	movwf	tblptrh,c
  4417  0069D4                     	if	0	;There are less than 3 active tblptr bytes
  4418  0069D4                     	endif
  4419  0069D4  0009               	tblrd		*+
  4420  0069D6  CFF5 F021          	movff	tablat,___ftmul@f1
  4421  0069DA  0009               	tblrd		*+
  4422  0069DC  CFF5 F022          	movff	tablat,___ftmul@f1+1
  4423  0069E0  000A               	tblrd		*-
  4424  0069E2  CFF5 F023          	movff	tablat,___ftmul@f1+2
  4425  0069E6  0E00               	movlw	0
  4426  0069E8  6E24               	movwf	___ftmul@f2,c
  4427  0069EA  0E00               	movlw	0
  4428  0069EC  6E25               	movwf	___ftmul@f2+1,c
  4429  0069EE  0E3F               	movlw	63
  4430  0069F0  6E26               	movwf	___ftmul@f2+2,c
  4431  0069F2  EC73  F02C         	call	___ftmul	;wreg free
  4432  0069F6  C021  F030         	movff	?___ftmul,?_fround
  4433  0069FA  C022  F031         	movff	?___ftmul+1,?_fround+1
  4434  0069FE  C023  F032         	movff	?___ftmul+2,?_fround+2
  4435  006A02  0012               	return	
  4436  006A04                     __end_of_fround:
  4437                           	opt stack 0
  4438                           tblptru	equ	0xFF8
  4439                           tblptrh	equ	0xFF7
  4440                           tblptrl	equ	0xFF6
  4441                           tablat	equ	0xFF5
  4442                           prodh	equ	0xFF4
  4443                           prodl	equ	0xFF3
  4444                           postinc0	equ	0xFEE
  4445                           wreg	equ	0xFE8
  4446                           postinc2	equ	0xFDE
  4447                           postdec2	equ	0xFDD
  4448                           fsr2h	equ	0xFDA
  4449                           fsr2l	equ	0xFD9
  4450                           status	equ	0xFD8
  4451                           
  4452 ;; *************** function ___awmod *****************
  4453 ;; Defined at:
  4454 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;  dividend        2    0[COMRAM] int 
  4457 ;;  divisor         2    2[COMRAM] int 
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  sign            1    5[COMRAM] unsigned char 
  4460 ;;  counter         1    4[COMRAM] unsigned char 
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  2    0[COMRAM] int 
  4463 ;; Registers used:
  4464 ;;		wreg, status,2, status,0
  4465 ;; Tracked objects:
  4466 ;;		On entry : 0/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4470 ;;      Params:         4       0       0       0       0       0       0       0       0
  4471 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4472 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4473 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4474 ;;Total ram usage:        6 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; This function calls:
  4477 ;;		Nothing
  4478 ;; This function is called by:
  4479 ;;		_fround
  4480 ;;		_scale
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484                           	psect	text7
  4485  004EEA                     __ptext7:
  4486                           	opt stack 0
  4487  004EEA                     ___awmod:
  4488                           	opt stack 28
  4489                           
  4490                           ;incstack = 0
  4491  004EEA  0E00               	movlw	0
  4492  004EEC  6E06               	movwf	___awmod@sign,c
  4493  004EEE  AE02               	btfss	___awmod@dividend+1,7,c
  4494  004EF0  D006               	goto	l1507
  4495  004EF2  6C01               	negf	___awmod@dividend,c
  4496  004EF4  1E02               	comf	___awmod@dividend+1,f,c
  4497  004EF6  B0D8               	btfsc	status,0,c
  4498  004EF8  2A02               	incf	___awmod@dividend+1,f,c
  4499  004EFA  0E01               	movlw	1
  4500  004EFC  6E06               	movwf	___awmod@sign,c
  4501  004EFE                     l1507:
  4502  004EFE  AE04               	btfss	___awmod@divisor+1,7,c
  4503  004F00  D004               	goto	l1508
  4504  004F02  6C03               	negf	___awmod@divisor,c
  4505  004F04  1E04               	comf	___awmod@divisor+1,f,c
  4506  004F06  B0D8               	btfsc	status,0,c
  4507  004F08  2A04               	incf	___awmod@divisor+1,f,c
  4508  004F0A                     l1508:
  4509  004F0A  5003               	movf	___awmod@divisor,w,c
  4510  004F0C  1004               	iorwf	___awmod@divisor+1,w,c
  4511  004F0E  B4D8               	btfsc	status,2,c
  4512  004F10  D018               	goto	l1515
  4513  004F12  0E01               	movlw	1
  4514  004F14  6E05               	movwf	___awmod@counter,c
  4515  004F16  D004               	goto	l1510
  4516  004F18  90D8               	bcf	status,0,c
  4517  004F1A  3603               	rlcf	___awmod@divisor,f,c
  4518  004F1C  3604               	rlcf	___awmod@divisor+1,f,c
  4519  004F1E  2A05               	incf	___awmod@counter,f,c
  4520  004F20                     l1510:
  4521  004F20  AE04               	btfss	___awmod@divisor+1,7,c
  4522  004F22  D7FA               	goto	l1511
  4523  004F24                     u3530:
  4524  004F24  5003               	movf	___awmod@divisor,w,c
  4525  004F26  5C01               	subwf	___awmod@dividend,w,c
  4526  004F28  5004               	movf	___awmod@divisor+1,w,c
  4527  004F2A  5802               	subwfb	___awmod@dividend+1,w,c
  4528  004F2C  A0D8               	btfss	status,0,c
  4529  004F2E  D004               	goto	l1514
  4530  004F30  5003               	movf	___awmod@divisor,w,c
  4531  004F32  5E01               	subwf	___awmod@dividend,f,c
  4532  004F34  5004               	movf	___awmod@divisor+1,w,c
  4533  004F36  5A02               	subwfb	___awmod@dividend+1,f,c
  4534  004F38                     l1514:
  4535  004F38  90D8               	bcf	status,0,c
  4536  004F3A  3204               	rrcf	___awmod@divisor+1,f,c
  4537  004F3C  3203               	rrcf	___awmod@divisor,f,c
  4538  004F3E  2E05               	decfsz	___awmod@counter,f,c
  4539  004F40  D7F1               	goto	u3530
  4540  004F42                     l1515:
  4541  004F42  5006               	movf	___awmod@sign,w,c
  4542  004F44  B4D8               	btfsc	status,2,c
  4543  004F46  D004               	goto	l1516
  4544  004F48  6C01               	negf	___awmod@dividend,c
  4545  004F4A  1E02               	comf	___awmod@dividend+1,f,c
  4546  004F4C  B0D8               	btfsc	status,0,c
  4547  004F4E  2A02               	incf	___awmod@dividend+1,f,c
  4548  004F50                     l1516:
  4549  004F50  C001  F001         	movff	___awmod@dividend,?___awmod
  4550  004F54  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4551  004F58  0012               	return	
  4552  004F5A                     __end_of___awmod:
  4553                           	opt stack 0
  4554                           tblptru	equ	0xFF8
  4555                           tblptrh	equ	0xFF7
  4556                           tblptrl	equ	0xFF6
  4557                           tablat	equ	0xFF5
  4558                           prodh	equ	0xFF4
  4559                           prodl	equ	0xFF3
  4560                           postinc0	equ	0xFEE
  4561                           wreg	equ	0xFE8
  4562                           postinc2	equ	0xFDE
  4563                           postdec2	equ	0xFDD
  4564                           fsr2h	equ	0xFDA
  4565                           fsr2l	equ	0xFD9
  4566                           status	equ	0xFD8
  4567                           
  4568 ;; *************** function ___awdiv *****************
  4569 ;; Defined at:
  4570 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  dividend        2    6[COMRAM] int 
  4573 ;;  divisor         2    8[COMRAM] int 
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;  quotient        2   12[COMRAM] int 
  4576 ;;  sign            1   11[COMRAM] unsigned char 
  4577 ;;  counter         1   10[COMRAM] unsigned char 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  2    6[COMRAM] int 
  4580 ;; Registers used:
  4581 ;;		wreg, status,2, status,0
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4587 ;;      Params:         4       0       0       0       0       0       0       0       0
  4588 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4589 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4590 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4591 ;;Total ram usage:        8 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; This function calls:
  4594 ;;		Nothing
  4595 ;; This function is called by:
  4596 ;;		_fround
  4597 ;;		_scale
  4598 ;;		_printf
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text8
  4603  0051C8                     __ptext8:
  4604                           	opt stack 0
  4605  0051C8                     ___awdiv:
  4606                           	opt stack 28
  4607                           
  4608                           ;incstack = 0
  4609  0051C8  0E00               	movlw	0
  4610  0051CA  6E0C               	movwf	___awdiv@sign,c
  4611  0051CC  AE0A               	btfss	___awdiv@divisor+1,7,c
  4612  0051CE  D006               	goto	l1494
  4613  0051D0  6C09               	negf	___awdiv@divisor,c
  4614  0051D2  1E0A               	comf	___awdiv@divisor+1,f,c
  4615  0051D4  B0D8               	btfsc	status,0,c
  4616  0051D6  2A0A               	incf	___awdiv@divisor+1,f,c
  4617  0051D8  0E01               	movlw	1
  4618  0051DA  6E0C               	movwf	___awdiv@sign,c
  4619  0051DC                     l1494:
  4620  0051DC  AE08               	btfss	___awdiv@dividend+1,7,c
  4621  0051DE  D006               	goto	l1495
  4622  0051E0  6C07               	negf	___awdiv@dividend,c
  4623  0051E2  1E08               	comf	___awdiv@dividend+1,f,c
  4624  0051E4  B0D8               	btfsc	status,0,c
  4625  0051E6  2A08               	incf	___awdiv@dividend+1,f,c
  4626  0051E8  0E01               	movlw	1
  4627  0051EA  1A0C               	xorwf	___awdiv@sign,f,c
  4628  0051EC                     l1495:
  4629  0051EC  0E00               	movlw	0
  4630  0051EE  6E0E               	movwf	___awdiv@quotient+1,c
  4631  0051F0  0E00               	movlw	0
  4632  0051F2  6E0D               	movwf	___awdiv@quotient,c
  4633  0051F4  5009               	movf	___awdiv@divisor,w,c
  4634  0051F6  100A               	iorwf	___awdiv@divisor+1,w,c
  4635  0051F8  B4D8               	btfsc	status,2,c
  4636  0051FA  D01C               	goto	l1502
  4637  0051FC  0E01               	movlw	1
  4638  0051FE  6E0B               	movwf	___awdiv@counter,c
  4639  005200  D004               	goto	l1497
  4640  005202  90D8               	bcf	status,0,c
  4641  005204  3609               	rlcf	___awdiv@divisor,f,c
  4642  005206  360A               	rlcf	___awdiv@divisor+1,f,c
  4643  005208  2A0B               	incf	___awdiv@counter,f,c
  4644  00520A                     l1497:
  4645  00520A  AE0A               	btfss	___awdiv@divisor+1,7,c
  4646  00520C  D7FA               	goto	l1498
  4647  00520E                     u3470:
  4648  00520E  90D8               	bcf	status,0,c
  4649  005210  360D               	rlcf	___awdiv@quotient,f,c
  4650  005212  360E               	rlcf	___awdiv@quotient+1,f,c
  4651  005214  5009               	movf	___awdiv@divisor,w,c
  4652  005216  5C07               	subwf	___awdiv@dividend,w,c
  4653  005218  500A               	movf	___awdiv@divisor+1,w,c
  4654  00521A  5808               	subwfb	___awdiv@dividend+1,w,c
  4655  00521C  A0D8               	btfss	status,0,c
  4656  00521E  D005               	goto	l1501
  4657  005220  5009               	movf	___awdiv@divisor,w,c
  4658  005222  5E07               	subwf	___awdiv@dividend,f,c
  4659  005224  500A               	movf	___awdiv@divisor+1,w,c
  4660  005226  5A08               	subwfb	___awdiv@dividend+1,f,c
  4661  005228  800D               	bsf	___awdiv@quotient,0,c
  4662  00522A                     l1501:
  4663  00522A  90D8               	bcf	status,0,c
  4664  00522C  320A               	rrcf	___awdiv@divisor+1,f,c
  4665  00522E  3209               	rrcf	___awdiv@divisor,f,c
  4666  005230  2E0B               	decfsz	___awdiv@counter,f,c
  4667  005232  D7ED               	goto	u3470
  4668  005234                     l1502:
  4669  005234  500C               	movf	___awdiv@sign,w,c
  4670  005236  B4D8               	btfsc	status,2,c
  4671  005238  D004               	goto	l1503
  4672  00523A  6C0D               	negf	___awdiv@quotient,c
  4673  00523C  1E0E               	comf	___awdiv@quotient+1,f,c
  4674  00523E  B0D8               	btfsc	status,0,c
  4675  005240  2A0E               	incf	___awdiv@quotient+1,f,c
  4676  005242                     l1503:
  4677  005242  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4678  005246  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4679  00524A  0012               	return	
  4680  00524C                     __end_of___awdiv:
  4681                           	opt stack 0
  4682                           tblptru	equ	0xFF8
  4683                           tblptrh	equ	0xFF7
  4684                           tblptrl	equ	0xFF6
  4685                           tablat	equ	0xFF5
  4686                           prodh	equ	0xFF4
  4687                           prodl	equ	0xFF3
  4688                           postinc0	equ	0xFEE
  4689                           wreg	equ	0xFE8
  4690                           postinc2	equ	0xFDE
  4691                           postdec2	equ	0xFDD
  4692                           fsr2h	equ	0xFDA
  4693                           fsr2l	equ	0xFD9
  4694                           status	equ	0xFD8
  4695                           
  4696 ;; *************** function __tdiv_to_l_ *****************
  4697 ;; Defined at:
  4698 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  f1              3    0[COMRAM] float 
  4701 ;;  f2              3    3[COMRAM] float 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;  quot            4    9[COMRAM] unsigned long 
  4704 ;;  exp1            1   14[COMRAM] unsigned char 
  4705 ;;  cntr            1   13[COMRAM] unsigned char 
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  4    0[COMRAM] unsigned long 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2, status,0
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4715 ;;      Params:         6       0       0       0       0       0       0       0       0
  4716 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4717 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4718 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4719 ;;Total ram usage:       15 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; This function calls:
  4722 ;;		Nothing
  4723 ;; This function is called by:
  4724 ;;		_printf
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text9
  4729  005E08                     __ptext9:
  4730                           	opt stack 0
  4731  005E08                     __tdiv_to_l_:
  4732                           	opt stack 29
  4733                           
  4734                           ;incstack = 0
  4735  005E08  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4736  005E0C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4737  005E0E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4738  005E10  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4739  005E12  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4740  005E14  E301               	bnc	u3891
  4741  005E16  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4742  005E18                     u3891:
  4743  005E18  5007               	movf	??__tdiv_to_l_,w,c
  4744  005E1A  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4745  005E1C  500F               	movf	__tdiv_to_l_@exp1,w,c
  4746  005E1E  A4D8               	btfss	status,2,c
  4747  005E20  D009               	goto	l1640
  4748  005E22  0E00               	movlw	0
  4749  005E24  6E01               	movwf	?__tdiv_to_l_,c
  4750  005E26  0E00               	movlw	0
  4751  005E28  6E02               	movwf	?__tdiv_to_l_+1,c
  4752  005E2A  0E00               	movlw	0
  4753  005E2C  6E03               	movwf	?__tdiv_to_l_+2,c
  4754  005E2E  0E00               	movlw	0
  4755  005E30  6E04               	movwf	?__tdiv_to_l_+3,c
  4756  005E32  0012               	return	
  4757  005E34                     l1640:
  4758  005E34  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4759  005E38  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4760  005E3A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4761  005E3C  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4762  005E3E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4763  005E40  E301               	bnc	u3911
  4764  005E42  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4765  005E44                     u3911:
  4766  005E44  5007               	movf	??__tdiv_to_l_,w,c
  4767  005E46  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4768  005E48  500E               	movf	__tdiv_to_l_@cntr,w,c
  4769  005E4A  A4D8               	btfss	status,2,c
  4770  005E4C  D009               	goto	l1642
  4771  005E4E  0E00               	movlw	0
  4772  005E50  6E01               	movwf	?__tdiv_to_l_,c
  4773  005E52  0E00               	movlw	0
  4774  005E54  6E02               	movwf	?__tdiv_to_l_+1,c
  4775  005E56  0E00               	movlw	0
  4776  005E58  6E03               	movwf	?__tdiv_to_l_+2,c
  4777  005E5A  0E00               	movlw	0
  4778  005E5C  6E04               	movwf	?__tdiv_to_l_+3,c
  4779  005E5E  0012               	return	
  4780  005E60                     l1642:
  4781  005E60  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4782  005E62  0EFF               	movlw	255
  4783  005E64  1601               	andwf	__tdiv_to_l_@f1,f,c
  4784  005E66  0EFF               	movlw	255
  4785  005E68  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4786  005E6A  0E00               	movlw	0
  4787  005E6C  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4788  005E6E  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4789  005E70  0EFF               	movlw	255
  4790  005E72  1604               	andwf	__tdiv_to_l_@f2,f,c
  4791  005E74  0EFF               	movlw	255
  4792  005E76  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4793  005E78  0E00               	movlw	0
  4794  005E7A  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4795  005E7C  0E00               	movlw	0
  4796  005E7E  6E0A               	movwf	__tdiv_to_l_@quot,c
  4797  005E80  0E00               	movlw	0
  4798  005E82  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4799  005E84  0E00               	movlw	0
  4800  005E86  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4801  005E88  0E00               	movlw	0
  4802  005E8A  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4803  005E8C  0E7F               	movlw	127
  4804  005E8E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4805  005E90  500E               	movf	__tdiv_to_l_@cntr,w,c
  4806  005E92  0F98               	addlw	152
  4807  005E94  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4808  005E96  0E18               	movlw	24
  4809  005E98  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4810  005E9A                     l1643:
  4811  005E9A  90D8               	bcf	status,0,c
  4812  005E9C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4813  005E9E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4814  005EA0  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4815  005EA2  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4816  005EA4  5004               	movf	__tdiv_to_l_@f2,w,c
  4817  005EA6  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4818  005EA8  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4819  005EAA  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4820  005EAC  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4821  005EAE  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4822  005EB0  A0D8               	btfss	status,0,c
  4823  005EB2  D007               	goto	l1644
  4824  005EB4  5004               	movf	__tdiv_to_l_@f2,w,c
  4825  005EB6  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4826  005EB8  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4827  005EBA  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4828  005EBC  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4829  005EBE  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4830  005EC0  800A               	bsf	__tdiv_to_l_@quot,0,c
  4831  005EC2                     l1644:
  4832  005EC2  90D8               	bcf	status,0,c
  4833  005EC4  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4834  005EC6  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4835  005EC8  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4836  005ECA  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4837  005ECC  D7E6               	goto	l1643
  4838  005ECE  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4839  005ED0  D016               	goto	l1646
  4840  005ED2  500F               	movf	__tdiv_to_l_@exp1,w,c
  4841  005ED4  0A80               	xorlw	128
  4842  005ED6  0F97               	addlw	151
  4843  005ED8  B0D8               	btfsc	status,0,c
  4844  005EDA  D009               	goto	l1647
  4845  005EDC  0E00               	movlw	0
  4846  005EDE  6E01               	movwf	?__tdiv_to_l_,c
  4847  005EE0  0E00               	movlw	0
  4848  005EE2  6E02               	movwf	?__tdiv_to_l_+1,c
  4849  005EE4  0E00               	movlw	0
  4850  005EE6  6E03               	movwf	?__tdiv_to_l_+2,c
  4851  005EE8  0E00               	movlw	0
  4852  005EEA  6E04               	movwf	?__tdiv_to_l_+3,c
  4853  005EEC  0012               	return	
  4854  005EEE                     l1647:
  4855  005EEE  90D8               	bcf	status,0,c
  4856  005EF0  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4857  005EF2  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4858  005EF4  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4859  005EF6  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4860  005EF8  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4861  005EFA  D7F9               	goto	l1647
  4862  005EFC  D015               	goto	u3970
  4863  005EFE                     l1646:
  4864  005EFE  0E17               	movlw	23
  4865  005F00  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4866  005F02  D00F               	goto	l1652
  4867  005F04  0E00               	movlw	0
  4868  005F06  6E01               	movwf	?__tdiv_to_l_,c
  4869  005F08  0E00               	movlw	0
  4870  005F0A  6E02               	movwf	?__tdiv_to_l_+1,c
  4871  005F0C  0E00               	movlw	0
  4872  005F0E  6E03               	movwf	?__tdiv_to_l_+2,c
  4873  005F10  0E00               	movlw	0
  4874  005F12  6E04               	movwf	?__tdiv_to_l_+3,c
  4875  005F14  0012               	return	
  4876  005F16  90D8               	bcf	status,0,c
  4877  005F18  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4878  005F1A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4879  005F1C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4880  005F1E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4881  005F20  060F               	decf	__tdiv_to_l_@exp1,f,c
  4882  005F22                     l1652:
  4883  005F22  500F               	movf	__tdiv_to_l_@exp1,w,c
  4884  005F24  A4D8               	btfss	status,2,c
  4885  005F26  D7F7               	goto	l1653
  4886  005F28                     u3970:
  4887  005F28  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4888  005F2C  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4889  005F30  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4890  005F34  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4891  005F38  0012               	return		;funcret
  4892  005F3A                     __end_of__tdiv_to_l_:
  4893                           	opt stack 0
  4894                           tblptru	equ	0xFF8
  4895                           tblptrh	equ	0xFF7
  4896                           tblptrl	equ	0xFF6
  4897                           tablat	equ	0xFF5
  4898                           prodh	equ	0xFF4
  4899                           prodl	equ	0xFF3
  4900                           postinc0	equ	0xFEE
  4901                           wreg	equ	0xFE8
  4902                           postinc2	equ	0xFDE
  4903                           postdec2	equ	0xFDD
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function __div_to_l_ *****************
  4909 ;; Defined at:
  4910 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;  f1              3    0[COMRAM] unsigned long 
  4913 ;;  f2              3    3[COMRAM] unsigned long 
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;  quot            4    6[COMRAM] unsigned long 
  4916 ;;  exp1            1   11[COMRAM] unsigned char 
  4917 ;;  cntr            1   10[COMRAM] unsigned char 
  4918 ;; Return value:  Size  Location     Type
  4919 ;;                  4    0[COMRAM] unsigned long 
  4920 ;; Registers used:
  4921 ;;		wreg, status,2, status,0
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/0
  4924 ;;		On exit  : 0/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4927 ;;      Params:         6       0       0       0       0       0       0       0       0
  4928 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4929 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4930 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4931 ;;Total ram usage:       12 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; This function calls:
  4934 ;;		Nothing
  4935 ;; This function is called by:
  4936 ;;		_printf
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text10
  4941  005CE0                     __ptext10:
  4942                           	opt stack 0
  4943  005CE0                     __div_to_l_:
  4944                           	opt stack 29
  4945                           
  4946                           ;incstack = 0
  4947  005CE0  3403               	rlcf	__div_to_l_@f1+2,w,c
  4948  005CE2  3404               	rlcf	__div_to_l_@f1+3,w,c
  4949  005CE4  6E0C               	movwf	__div_to_l_@exp1,c
  4950  005CE6  500C               	movf	__div_to_l_@exp1,w,c
  4951  005CE8  A4D8               	btfss	status,2,c
  4952  005CEA  D009               	goto	l1536
  4953  005CEC  0E00               	movlw	0
  4954  005CEE  6E01               	movwf	?__div_to_l_,c
  4955  005CF0  0E00               	movlw	0
  4956  005CF2  6E02               	movwf	?__div_to_l_+1,c
  4957  005CF4  0E00               	movlw	0
  4958  005CF6  6E03               	movwf	?__div_to_l_+2,c
  4959  005CF8  0E00               	movlw	0
  4960  005CFA  6E04               	movwf	?__div_to_l_+3,c
  4961  005CFC  0012               	return	
  4962  005CFE                     l1536:
  4963  005CFE  3406               	rlcf	__div_to_l_@f2+2,w,c
  4964  005D00  3407               	rlcf	__div_to_l_@f2+3,w,c
  4965  005D02  6E0B               	movwf	__div_to_l_@cntr,c
  4966  005D04  500B               	movf	__div_to_l_@cntr,w,c
  4967  005D06  A4D8               	btfss	status,2,c
  4968  005D08  D009               	goto	l1538
  4969  005D0A  0E00               	movlw	0
  4970  005D0C  6E01               	movwf	?__div_to_l_,c
  4971  005D0E  0E00               	movlw	0
  4972  005D10  6E02               	movwf	?__div_to_l_+1,c
  4973  005D12  0E00               	movlw	0
  4974  005D14  6E03               	movwf	?__div_to_l_+2,c
  4975  005D16  0E00               	movlw	0
  4976  005D18  6E04               	movwf	?__div_to_l_+3,c
  4977  005D1A  0012               	return	
  4978  005D1C                     l1538:
  4979  005D1C  8E03               	bsf	__div_to_l_@f1+2,7,c
  4980  005D1E  0EFF               	movlw	255
  4981  005D20  1601               	andwf	__div_to_l_@f1,f,c
  4982  005D22  0EFF               	movlw	255
  4983  005D24  1602               	andwf	__div_to_l_@f1+1,f,c
  4984  005D26  0EFF               	movlw	255
  4985  005D28  1603               	andwf	__div_to_l_@f1+2,f,c
  4986  005D2A  0E00               	movlw	0
  4987  005D2C  1604               	andwf	__div_to_l_@f1+3,f,c
  4988  005D2E  8E06               	bsf	__div_to_l_@f2+2,7,c
  4989  005D30  0EFF               	movlw	255
  4990  005D32  1604               	andwf	__div_to_l_@f2,f,c
  4991  005D34  0EFF               	movlw	255
  4992  005D36  1605               	andwf	__div_to_l_@f2+1,f,c
  4993  005D38  0EFF               	movlw	255
  4994  005D3A  1606               	andwf	__div_to_l_@f2+2,f,c
  4995  005D3C  0E00               	movlw	0
  4996  005D3E  1607               	andwf	__div_to_l_@f2+3,f,c
  4997  005D40  0E00               	movlw	0
  4998  005D42  6E07               	movwf	__div_to_l_@quot,c
  4999  005D44  0E00               	movlw	0
  5000  005D46  6E08               	movwf	__div_to_l_@quot+1,c
  5001  005D48  0E00               	movlw	0
  5002  005D4A  6E09               	movwf	__div_to_l_@quot+2,c
  5003  005D4C  0E00               	movlw	0
  5004  005D4E  6E0A               	movwf	__div_to_l_@quot+3,c
  5005  005D50  0E7F               	movlw	127
  5006  005D52  5E0C               	subwf	__div_to_l_@exp1,f,c
  5007  005D54  500B               	movf	__div_to_l_@cntr,w,c
  5008  005D56  0FA0               	addlw	160
  5009  005D58  5E0C               	subwf	__div_to_l_@exp1,f,c
  5010  005D5A  0E20               	movlw	32
  5011  005D5C  6E0B               	movwf	__div_to_l_@cntr,c
  5012  005D5E  90D8               	bcf	status,0,c
  5013  005D60  3607               	rlcf	__div_to_l_@quot,f,c
  5014  005D62  3608               	rlcf	__div_to_l_@quot+1,f,c
  5015  005D64  3609               	rlcf	__div_to_l_@quot+2,f,c
  5016  005D66  360A               	rlcf	__div_to_l_@quot+3,f,c
  5017  005D68  5004               	movf	__div_to_l_@f2,w,c
  5018  005D6A  5C01               	subwf	__div_to_l_@f1,w,c
  5019  005D6C  5005               	movf	__div_to_l_@f2+1,w,c
  5020  005D6E  5802               	subwfb	__div_to_l_@f1+1,w,c
  5021  005D70  5006               	movf	__div_to_l_@f2+2,w,c
  5022  005D72  5803               	subwfb	__div_to_l_@f1+2,w,c
  5023  005D74  5007               	movf	__div_to_l_@f2+3,w,c
  5024  005D76  5804               	subwfb	__div_to_l_@f1+3,w,c
  5025  005D78  A0D8               	btfss	status,0,c
  5026  005D7A  D009               	goto	l1540
  5027  005D7C  5004               	movf	__div_to_l_@f2,w,c
  5028  005D7E  5E01               	subwf	__div_to_l_@f1,f,c
  5029  005D80  5005               	movf	__div_to_l_@f2+1,w,c
  5030  005D82  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5031  005D84  5006               	movf	__div_to_l_@f2+2,w,c
  5032  005D86  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5033  005D88  5007               	movf	__div_to_l_@f2+3,w,c
  5034  005D8A  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5035  005D8C  8007               	bsf	__div_to_l_@quot,0,c
  5036  005D8E                     l1540:
  5037  005D8E  90D8               	bcf	status,0,c
  5038  005D90  3601               	rlcf	__div_to_l_@f1,f,c
  5039  005D92  3602               	rlcf	__div_to_l_@f1+1,f,c
  5040  005D94  3603               	rlcf	__div_to_l_@f1+2,f,c
  5041  005D96  3604               	rlcf	__div_to_l_@f1+3,f,c
  5042  005D98  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5043  005D9A  D7E1               	goto	l1539
  5044  005D9C  AE0C               	btfss	__div_to_l_@exp1,7,c
  5045  005D9E  D016               	goto	l1542
  5046  005DA0  500C               	movf	__div_to_l_@exp1,w,c
  5047  005DA2  0A80               	xorlw	128
  5048  005DA4  0F9F               	addlw	159
  5049  005DA6  B0D8               	btfsc	status,0,c
  5050  005DA8  D009               	goto	l1543
  5051  005DAA  0E00               	movlw	0
  5052  005DAC  6E01               	movwf	?__div_to_l_,c
  5053  005DAE  0E00               	movlw	0
  5054  005DB0  6E02               	movwf	?__div_to_l_+1,c
  5055  005DB2  0E00               	movlw	0
  5056  005DB4  6E03               	movwf	?__div_to_l_+2,c
  5057  005DB6  0E00               	movlw	0
  5058  005DB8  6E04               	movwf	?__div_to_l_+3,c
  5059  005DBA  0012               	return	
  5060  005DBC                     l1543:
  5061  005DBC  90D8               	bcf	status,0,c
  5062  005DBE  320A               	rrcf	__div_to_l_@quot+3,f,c
  5063  005DC0  3209               	rrcf	__div_to_l_@quot+2,f,c
  5064  005DC2  3208               	rrcf	__div_to_l_@quot+1,f,c
  5065  005DC4  3207               	rrcf	__div_to_l_@quot,f,c
  5066  005DC6  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5067  005DC8  D7F9               	goto	l1543
  5068  005DCA  D015               	goto	u4040
  5069  005DCC                     l1542:
  5070  005DCC  0E1F               	movlw	31
  5071  005DCE  640C               	cpfsgt	__div_to_l_@exp1,c
  5072  005DD0  D00F               	goto	l1548
  5073  005DD2  0E00               	movlw	0
  5074  005DD4  6E01               	movwf	?__div_to_l_,c
  5075  005DD6  0E00               	movlw	0
  5076  005DD8  6E02               	movwf	?__div_to_l_+1,c
  5077  005DDA  0E00               	movlw	0
  5078  005DDC  6E03               	movwf	?__div_to_l_+2,c
  5079  005DDE  0E00               	movlw	0
  5080  005DE0  6E04               	movwf	?__div_to_l_+3,c
  5081  005DE2  0012               	return	
  5082  005DE4  90D8               	bcf	status,0,c
  5083  005DE6  3607               	rlcf	__div_to_l_@quot,f,c
  5084  005DE8  3608               	rlcf	__div_to_l_@quot+1,f,c
  5085  005DEA  3609               	rlcf	__div_to_l_@quot+2,f,c
  5086  005DEC  360A               	rlcf	__div_to_l_@quot+3,f,c
  5087  005DEE  060C               	decf	__div_to_l_@exp1,f,c
  5088  005DF0                     l1548:
  5089  005DF0  500C               	movf	__div_to_l_@exp1,w,c
  5090  005DF2  A4D8               	btfss	status,2,c
  5091  005DF4  D7F7               	goto	l1549
  5092  005DF6                     u4040:
  5093  005DF6  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5094  005DFA  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5095  005DFE  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5096  005E02  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5097  005E06  0012               	return		;funcret
  5098  005E08                     __end_of__div_to_l_:
  5099                           	opt stack 0
  5100                           tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           prodh	equ	0xFF4
  5105                           prodl	equ	0xFF3
  5106                           postinc0	equ	0xFEE
  5107                           wreg	equ	0xFE8
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function ___llmod *****************
  5115 ;; Defined at:
  5116 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  dividend        4    0[COMRAM] unsigned long 
  5119 ;;  divisor         4    4[COMRAM] unsigned long 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  counter         1    8[COMRAM] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  4    0[COMRAM] unsigned long 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5131 ;;      Params:         8       0       0       0       0       0       0       0       0
  5132 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5134 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5135 ;;Total ram usage:        9 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_printf
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text11
  5145  004E84                     __ptext11:
  5146                           	opt stack 0
  5147  004E84                     ___llmod:
  5148                           	opt stack 29
  5149                           
  5150                           ;incstack = 0
  5151  004E84  5005               	movf	___llmod@divisor,w,c
  5152  004E86  1006               	iorwf	___llmod@divisor+1,w,c
  5153  004E88  1007               	iorwf	___llmod@divisor+2,w,c
  5154  004E8A  1008               	iorwf	___llmod@divisor+3,w,c
  5155  004E8C  B4D8               	btfsc	status,2,c
  5156  004E8E  D024               	goto	l1736
  5157  004E90  0E01               	movlw	1
  5158  004E92  6E09               	movwf	___llmod@counter,c
  5159  004E94  D006               	goto	l1731
  5160  004E96  90D8               	bcf	status,0,c
  5161  004E98  3605               	rlcf	___llmod@divisor,f,c
  5162  004E9A  3606               	rlcf	___llmod@divisor+1,f,c
  5163  004E9C  3607               	rlcf	___llmod@divisor+2,f,c
  5164  004E9E  3608               	rlcf	___llmod@divisor+3,f,c
  5165  004EA0  2A09               	incf	___llmod@counter,f,c
  5166  004EA2                     l1731:
  5167  004EA2  AE08               	btfss	___llmod@divisor+3,7,c
  5168  004EA4  D7F8               	goto	l1732
  5169  004EA6                     u4100:
  5170  004EA6  5005               	movf	___llmod@divisor,w,c
  5171  004EA8  5C01               	subwf	___llmod@dividend,w,c
  5172  004EAA  5006               	movf	___llmod@divisor+1,w,c
  5173  004EAC  5802               	subwfb	___llmod@dividend+1,w,c
  5174  004EAE  5007               	movf	___llmod@divisor+2,w,c
  5175  004EB0  5803               	subwfb	___llmod@dividend+2,w,c
  5176  004EB2  5008               	movf	___llmod@divisor+3,w,c
  5177  004EB4  5804               	subwfb	___llmod@dividend+3,w,c
  5178  004EB6  A0D8               	btfss	status,0,c
  5179  004EB8  D008               	goto	l1735
  5180  004EBA  5005               	movf	___llmod@divisor,w,c
  5181  004EBC  5E01               	subwf	___llmod@dividend,f,c
  5182  004EBE  5006               	movf	___llmod@divisor+1,w,c
  5183  004EC0  5A02               	subwfb	___llmod@dividend+1,f,c
  5184  004EC2  5007               	movf	___llmod@divisor+2,w,c
  5185  004EC4  5A03               	subwfb	___llmod@dividend+2,f,c
  5186  004EC6  5008               	movf	___llmod@divisor+3,w,c
  5187  004EC8  5A04               	subwfb	___llmod@dividend+3,f,c
  5188  004ECA                     l1735:
  5189  004ECA  90D8               	bcf	status,0,c
  5190  004ECC  3208               	rrcf	___llmod@divisor+3,f,c
  5191  004ECE  3207               	rrcf	___llmod@divisor+2,f,c
  5192  004ED0  3206               	rrcf	___llmod@divisor+1,f,c
  5193  004ED2  3205               	rrcf	___llmod@divisor,f,c
  5194  004ED4  2E09               	decfsz	___llmod@counter,f,c
  5195  004ED6  D7E7               	goto	u4100
  5196  004ED8                     l1736:
  5197  004ED8  C001  F001         	movff	___llmod@dividend,?___llmod
  5198  004EDC  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  5199  004EE0  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  5200  004EE4  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  5201  004EE8  0012               	return		;funcret
  5202  004EEA                     __end_of___llmod:
  5203                           	opt stack 0
  5204                           tblptru	equ	0xFF8
  5205                           tblptrh	equ	0xFF7
  5206                           tblptrl	equ	0xFF6
  5207                           tablat	equ	0xFF5
  5208                           prodh	equ	0xFF4
  5209                           prodl	equ	0xFF3
  5210                           postinc0	equ	0xFEE
  5211                           wreg	equ	0xFE8
  5212                           postinc2	equ	0xFDE
  5213                           postdec2	equ	0xFDD
  5214                           fsr2h	equ	0xFDA
  5215                           fsr2l	equ	0xFD9
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function ___lldiv *****************
  5219 ;; Defined at:
  5220 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  dividend        4    0[COMRAM] unsigned long 
  5223 ;;  divisor         4    4[COMRAM] unsigned long 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;  quotient        4    8[COMRAM] unsigned long 
  5226 ;;  counter         1   12[COMRAM] unsigned char 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  4    0[COMRAM] unsigned long 
  5229 ;; Registers used:
  5230 ;;		wreg, status,2, status,0
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5236 ;;      Params:         8       0       0       0       0       0       0       0       0
  5237 ;;      Locals:         5       0       0       0       0       0       0       0       0
  5238 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5239 ;;      Totals:        13       0       0       0       0       0       0       0       0
  5240 ;;Total ram usage:       13 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_printf
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text12
  5250  005146                     __ptext12:
  5251                           	opt stack 0
  5252  005146                     ___lldiv:
  5253                           	opt stack 29
  5254                           
  5255                           ;incstack = 0
  5256  005146  0E00               	movlw	0
  5257  005148  6E09               	movwf	___lldiv@quotient,c
  5258  00514A  0E00               	movlw	0
  5259  00514C  6E0A               	movwf	___lldiv@quotient+1,c
  5260  00514E  0E00               	movlw	0
  5261  005150  6E0B               	movwf	___lldiv@quotient+2,c
  5262  005152  0E00               	movlw	0
  5263  005154  6E0C               	movwf	___lldiv@quotient+3,c
  5264  005156  5005               	movf	___lldiv@divisor,w,c
  5265  005158  1006               	iorwf	___lldiv@divisor+1,w,c
  5266  00515A  1007               	iorwf	___lldiv@divisor+2,w,c
  5267  00515C  1008               	iorwf	___lldiv@divisor+3,w,c
  5268  00515E  B4D8               	btfsc	status,2,c
  5269  005160  D02A               	goto	l1726
  5270  005162  0E01               	movlw	1
  5271  005164  6E0D               	movwf	___lldiv@counter,c
  5272  005166  D006               	goto	l1721
  5273  005168  90D8               	bcf	status,0,c
  5274  00516A  3605               	rlcf	___lldiv@divisor,f,c
  5275  00516C  3606               	rlcf	___lldiv@divisor+1,f,c
  5276  00516E  3607               	rlcf	___lldiv@divisor+2,f,c
  5277  005170  3608               	rlcf	___lldiv@divisor+3,f,c
  5278  005172  2A0D               	incf	___lldiv@counter,f,c
  5279  005174                     l1721:
  5280  005174  AE08               	btfss	___lldiv@divisor+3,7,c
  5281  005176  D7F8               	goto	l1722
  5282  005178                     u4070:
  5283  005178  90D8               	bcf	status,0,c
  5284  00517A  3609               	rlcf	___lldiv@quotient,f,c
  5285  00517C  360A               	rlcf	___lldiv@quotient+1,f,c
  5286  00517E  360B               	rlcf	___lldiv@quotient+2,f,c
  5287  005180  360C               	rlcf	___lldiv@quotient+3,f,c
  5288  005182  5005               	movf	___lldiv@divisor,w,c
  5289  005184  5C01               	subwf	___lldiv@dividend,w,c
  5290  005186  5006               	movf	___lldiv@divisor+1,w,c
  5291  005188  5802               	subwfb	___lldiv@dividend+1,w,c
  5292  00518A  5007               	movf	___lldiv@divisor+2,w,c
  5293  00518C  5803               	subwfb	___lldiv@dividend+2,w,c
  5294  00518E  5008               	movf	___lldiv@divisor+3,w,c
  5295  005190  5804               	subwfb	___lldiv@dividend+3,w,c
  5296  005192  A0D8               	btfss	status,0,c
  5297  005194  D009               	goto	l1725
  5298  005196  5005               	movf	___lldiv@divisor,w,c
  5299  005198  5E01               	subwf	___lldiv@dividend,f,c
  5300  00519A  5006               	movf	___lldiv@divisor+1,w,c
  5301  00519C  5A02               	subwfb	___lldiv@dividend+1,f,c
  5302  00519E  5007               	movf	___lldiv@divisor+2,w,c
  5303  0051A0  5A03               	subwfb	___lldiv@dividend+2,f,c
  5304  0051A2  5008               	movf	___lldiv@divisor+3,w,c
  5305  0051A4  5A04               	subwfb	___lldiv@dividend+3,f,c
  5306  0051A6  8009               	bsf	___lldiv@quotient,0,c
  5307  0051A8                     l1725:
  5308  0051A8  90D8               	bcf	status,0,c
  5309  0051AA  3208               	rrcf	___lldiv@divisor+3,f,c
  5310  0051AC  3207               	rrcf	___lldiv@divisor+2,f,c
  5311  0051AE  3206               	rrcf	___lldiv@divisor+1,f,c
  5312  0051B0  3205               	rrcf	___lldiv@divisor,f,c
  5313  0051B2  2E0D               	decfsz	___lldiv@counter,f,c
  5314  0051B4  D7E1               	goto	u4070
  5315  0051B6                     l1726:
  5316  0051B6  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5317  0051BA  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5318  0051BE  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5319  0051C2  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5320  0051C6  0012               	return		;funcret
  5321  0051C8                     __end_of___lldiv:
  5322                           	opt stack 0
  5323                           tblptru	equ	0xFF8
  5324                           tblptrh	equ	0xFF7
  5325                           tblptrl	equ	0xFF6
  5326                           tablat	equ	0xFF5
  5327                           prodh	equ	0xFF4
  5328                           prodl	equ	0xFF3
  5329                           postinc0	equ	0xFEE
  5330                           wreg	equ	0xFE8
  5331                           postinc2	equ	0xFDE
  5332                           postdec2	equ	0xFDD
  5333                           fsr2h	equ	0xFDA
  5334                           fsr2l	equ	0xFD9
  5335                           status	equ	0xFD8
  5336                           
  5337 ;; *************** function _pow *****************
  5338 ;; Defined at:
  5339 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;  x               3    9[BANK0 ] unsigned long 
  5342 ;;  y               3   12[BANK0 ] unsigned long 
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;  yi              4   22[BANK0 ] unsigned long 
  5345 ;;  sign            1   21[BANK0 ] unsigned char 
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  3    9[BANK0 ] unsigned char 
  5348 ;; Registers used:
  5349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5355 ;;      Params:         0       6       0       0       0       0       0       0       0
  5356 ;;      Locals:         0      11       0       0       0       0       0       0       0
  5357 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5358 ;;      Totals:         0      17       0       0       0       0       0       0       0
  5359 ;;Total ram usage:       17 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    4
  5362 ;; This function calls:
  5363 ;;		___ftge
  5364 ;;		___ftmul
  5365 ;;		___ftneg
  5366 ;;		___fttol
  5367 ;;		___lltoft
  5368 ;;		_exp
  5369 ;;		_log
  5370 ;; This function is called by:
  5371 ;;		_main
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text13
  5376  005F3A                     __ptext13:
  5377                           	opt stack 0
  5378  005F3A                     _pow:
  5379                           	opt stack 26
  5380                           
  5381                           ;incstack = 0
  5382  005F3A  0E00               	movlw	0
  5383  005F3C  0100               	movlb	0	; () banked
  5384  005F3E  6F75               	movwf	pow@sign& (0+255),b
  5385                           
  5386                           ; BSR set to: 0
  5387  005F40  5169               	movf	pow@x& (0+255),w,b
  5388  005F42  116A               	iorwf	(pow@x+1)& (0+255),w,b
  5389  005F44  116B               	iorwf	(pow@x+2)& (0+255),w,b
  5390  005F46  A4D8               	btfss	status,2,c
  5391  005F48  D01D               	goto	l1804
  5392                           
  5393                           ; BSR set to: 0
  5394  005F4A  0E00               	movlw	0
  5395  005F4C  6E01               	movwf	___ftge@ff1,c
  5396  005F4E  0E00               	movlw	0
  5397  005F50  6E02               	movwf	___ftge@ff1+1,c
  5398  005F52  0E00               	movlw	0
  5399  005F54  6E03               	movwf	___ftge@ff1+2,c
  5400  005F56  C06C  F004         	movff	pow@y,___ftge@ff2
  5401  005F5A  C06D  F005         	movff	pow@y+1,___ftge@ff2+1
  5402  005F5E  C06E  F006         	movff	pow@y+2,___ftge@ff2+2
  5403  005F62  EC69  F029         	call	___ftge	;wreg free
  5404  005F66  A0D8               	btfss	status,0,c
  5405  005F68  D005               	goto	l1805
  5406  005F6A  0E00               	movlw	0
  5407  005F6C  0101               	movlb	1	; () banked
  5408  005F6E  6F29               	movwf	(_errno+1)& (0+255),b
  5409  005F70  0E21               	movlw	33
  5410  005F72  6F28               	movwf	_errno& (0+255),b
  5411  005F74                     l1805:
  5412  005F74  0E00               	movlw	0
  5413  005F76  0100               	movlb	0	; () banked
  5414  005F78  6F69               	movwf	?_pow& (0+255),b
  5415  005F7A  0E00               	movlw	0
  5416  005F7C  6F6A               	movwf	(?_pow+1)& (0+255),b
  5417  005F7E  0E00               	movlw	0
  5418  005F80  6F6B               	movwf	(?_pow+2)& (0+255),b
  5419                           
  5420                           ; BSR set to: 0
  5421  005F82  0012               	return	
  5422  005F84                     l1804:
  5423                           
  5424                           ; BSR set to: 0
  5425                           
  5426                           ; BSR set to: 0
  5427  005F84  516C               	movf	pow@y& (0+255),w,b
  5428  005F86  116D               	iorwf	(pow@y+1)& (0+255),w,b
  5429  005F88  116E               	iorwf	(pow@y+2)& (0+255),w,b
  5430  005F8A  A4D8               	btfss	status,2,c
  5431  005F8C  D007               	goto	l1807
  5432                           
  5433                           ; BSR set to: 0
  5434  005F8E  0E00               	movlw	0
  5435  005F90  6F69               	movwf	?_pow& (0+255),b
  5436  005F92  0E80               	movlw	128
  5437  005F94  6F6A               	movwf	(?_pow+1)& (0+255),b
  5438  005F96  0E3F               	movlw	63
  5439  005F98  6F6B               	movwf	(?_pow+2)& (0+255),b
  5440                           
  5441                           ; BSR set to: 0
  5442  005F9A  0012               	return	
  5443  005F9C                     l1807:
  5444                           
  5445                           ; BSR set to: 0
  5446                           
  5447                           ; BSR set to: 0
  5448  005F9C  AF6B               	btfss	(pow@x+2)& (0+255),7,b
  5449  005F9E  D043               	goto	l1808
  5450                           
  5451                           ; BSR set to: 0
  5452  005FA0  C06C  F037         	movff	pow@y,___fttol@f1
  5453  005FA4  C06D  F038         	movff	pow@y+1,___fttol@f1+1
  5454  005FA8  C06E  F039         	movff	pow@y+2,___fttol@f1+2
  5455  005FAC  EC67  F02D         	call	___fttol	;wreg free
  5456  005FB0  C037  F076         	movff	?___fttol,pow@yi
  5457  005FB4  C038  F077         	movff	?___fttol+1,pow@yi+1
  5458  005FB8  C039  F078         	movff	?___fttol+2,pow@yi+2
  5459  005FBC  C03A  F079         	movff	?___fttol+3,pow@yi+3
  5460  005FC0  C076  F009         	movff	pow@yi,___lltoft@c
  5461  005FC4  C077  F00A         	movff	pow@yi+1,___lltoft@c+1
  5462  005FC8  C078  F00B         	movff	pow@yi+2,___lltoft@c+2
  5463  005FCC  C079  F00C         	movff	pow@yi+3,___lltoft@c+3
  5464  005FD0  ECE1  F026         	call	___lltoft	;wreg free
  5465  005FD4  0100               	movlb	0	; () banked
  5466  005FD6  516C               	movf	pow@y& (0+255),w,b
  5467  005FD8  1809               	xorwf	?___lltoft,w,c
  5468  005FDA  E107               	bnz	u4560
  5469  005FDC  516D               	movf	(pow@y+1)& (0+255),w,b
  5470  005FDE  180A               	xorwf	?___lltoft+1,w,c
  5471  005FE0  E104               	bnz	u4560
  5472  005FE2  516E               	movf	(pow@y+2)& (0+255),w,b
  5473  005FE4  180B               	xorwf	?___lltoft+2,w,c
  5474  005FE6  B4D8               	btfsc	status,2,c
  5475  005FE8  D00D               	goto	l1809
  5476  005FEA                     u4560:
  5477                           
  5478                           ; BSR set to: 0
  5479  005FEA  0E00               	movlw	0
  5480  005FEC  0101               	movlb	1	; () banked
  5481  005FEE  6F29               	movwf	(_errno+1)& (0+255),b
  5482  005FF0  0E21               	movlw	33
  5483  005FF2  6F28               	movwf	_errno& (0+255),b
  5484  005FF4  0E00               	movlw	0
  5485  005FF6  0100               	movlb	0	; () banked
  5486  005FF8  6F69               	movwf	?_pow& (0+255),b
  5487  005FFA  0E00               	movlw	0
  5488  005FFC  6F6A               	movwf	(?_pow+1)& (0+255),b
  5489  005FFE  0E00               	movlw	0
  5490  006000  6F6B               	movwf	(?_pow+2)& (0+255),b
  5491                           
  5492                           ; BSR set to: 0
  5493  006002  0012               	return	
  5494  006004                     l1809:
  5495                           
  5496                           ; BSR set to: 0
  5497                           
  5498                           ; BSR set to: 0
  5499  006004  5176               	movf	pow@yi& (0+255),w,b
  5500  006006  0B01               	andlw	1
  5501  006008  6F75               	movwf	pow@sign& (0+255),b
  5502                           
  5503                           ; BSR set to: 0
  5504  00600A  C069  F001         	movff	pow@x,___ftneg@f1
  5505  00600E  C06A  F002         	movff	pow@x+1,___ftneg@f1+1
  5506  006012  C06B  F003         	movff	pow@x+2,___ftneg@f1+2
  5507  006016  ECD5  F025         	call	___ftneg	;wreg free
  5508  00601A  C001  F069         	movff	?___ftneg,pow@x
  5509  00601E  C002  F06A         	movff	?___ftneg+1,pow@x+1
  5510  006022  C003  F06B         	movff	?___ftneg+2,pow@x+2
  5511  006026                     l1808:
  5512  006026  C069  F03C         	movff	pow@x,log@x
  5513  00602A  C06A  F03D         	movff	pow@x+1,log@x+1
  5514  00602E  C06B  F03E         	movff	pow@x+2,log@x+2
  5515  006032  ECE1  F02D         	call	_log	;wreg free
  5516  006036  C03C  F06F         	movff	?_log,_pow$3066
  5517  00603A  C03D  F070         	movff	?_log+1,_pow$3066+1
  5518  00603E  C03E  F071         	movff	?_log+2,_pow$3066+2
  5519  006042  C06F  F021         	movff	_pow$3066,___ftmul@f1
  5520  006046  C070  F022         	movff	_pow$3066+1,___ftmul@f1+1
  5521  00604A  C071  F023         	movff	_pow$3066+2,___ftmul@f1+2
  5522  00604E  C06C  F024         	movff	pow@y,___ftmul@f2
  5523  006052  C06D  F025         	movff	pow@y+1,___ftmul@f2+1
  5524  006056  C06E  F026         	movff	pow@y+2,___ftmul@f2+2
  5525  00605A  EC73  F02C         	call	___ftmul	;wreg free
  5526  00605E  C021  F072         	movff	?___ftmul,_pow$3067
  5527  006062  C022  F073         	movff	?___ftmul+1,_pow$3067+1
  5528  006066  C023  F074         	movff	?___ftmul+2,_pow$3067+2
  5529  00606A  C072  F060         	movff	_pow$3067,exp@x
  5530  00606E  C073  F061         	movff	_pow$3067+1,exp@x+1
  5531  006072  C074  F062         	movff	_pow$3067+2,exp@x+2
  5532  006076  ECE0  F032         	call	_exp	;wreg free
  5533  00607A  C060  F069         	movff	?_exp,pow@x
  5534  00607E  C061  F06A         	movff	?_exp+1,pow@x+1
  5535  006082  C062  F06B         	movff	?_exp+2,pow@x+2
  5536  006086  0100               	movlb	0	; () banked
  5537  006088  5175               	movf	pow@sign& (0+255),w,b
  5538  00608A  B4D8               	btfsc	status,2,c
  5539  00608C  D00F               	goto	l1810
  5540                           
  5541                           ; BSR set to: 0
  5542  00608E  C069  F001         	movff	pow@x,___ftneg@f1
  5543  006092  C06A  F002         	movff	pow@x+1,___ftneg@f1+1
  5544  006096  C06B  F003         	movff	pow@x+2,___ftneg@f1+2
  5545  00609A  ECD5  F025         	call	___ftneg	;wreg free
  5546  00609E  C001  F069         	movff	?___ftneg,?_pow
  5547  0060A2  C002  F06A         	movff	?___ftneg+1,?_pow+1
  5548  0060A6  C003  F06B         	movff	?___ftneg+2,?_pow+2
  5549  0060AA  0012               	return	
  5550  0060AC                     l1810:
  5551                           
  5552                           ; BSR set to: 0
  5553  0060AC  C069  F069         	movff	pow@x,?_pow
  5554  0060B0  C06A  F06A         	movff	pow@x+1,?_pow+1
  5555  0060B4  C06B  F06B         	movff	pow@x+2,?_pow+2
  5556  0060B8  0012               	return		;funcret
  5557  0060BA                     __end_of_pow:
  5558                           	opt stack 0
  5559                           tblptru	equ	0xFF8
  5560                           tblptrh	equ	0xFF7
  5561                           tblptrl	equ	0xFF6
  5562                           tablat	equ	0xFF5
  5563                           prodh	equ	0xFF4
  5564                           prodl	equ	0xFF3
  5565                           postinc0	equ	0xFEE
  5566                           wreg	equ	0xFE8
  5567                           postinc2	equ	0xFDE
  5568                           postdec2	equ	0xFDD
  5569                           fsr2h	equ	0xFDA
  5570                           fsr2l	equ	0xFD9
  5571                           status	equ	0xFD8
  5572                           
  5573 ;; *************** function _log *****************
  5574 ;; Defined at:
  5575 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  x               3   59[COMRAM] unsigned char 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;  exponent        2   62[COMRAM] int 
  5580 ;; Return value:  Size  Location     Type
  5581 ;;                  3   59[COMRAM] int 
  5582 ;; Registers used:
  5583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5584 ;; Tracked objects:
  5585 ;;		On entry : 0/0
  5586 ;;		On exit  : 0/0
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5589 ;;      Params:         3       0       0       0       0       0       0       0       0
  5590 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5591 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5592 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5593 ;;Total ram usage:        5 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:    3
  5596 ;; This function calls:
  5597 ;;		___awtoft
  5598 ;;		___ftadd
  5599 ;;		___ftmul
  5600 ;;		_eval_poly
  5601 ;;		_frexp
  5602 ;; This function is called by:
  5603 ;;		_pow
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text14
  5608  005BC2                     __ptext14:
  5609                           	opt stack 0
  5610  005BC2                     _log:
  5611                           	opt stack 26
  5612                           
  5613                           ;incstack = 0
  5614  005BC2  AE3E               	btfss	log@x+2,7,c
  5615  005BC4  D00C               	goto	l2019
  5616  005BC6  0E00               	movlw	0
  5617  005BC8  0101               	movlb	1	; () banked
  5618  005BCA  6F29               	movwf	(_errno+1)& (0+255),b
  5619  005BCC  0E21               	movlw	33
  5620  005BCE  6F28               	movwf	_errno& (0+255),b
  5621  005BD0  0E00               	movlw	0
  5622  005BD2  6E3C               	movwf	?_log,c
  5623  005BD4  0E00               	movlw	0
  5624  005BD6  6E3D               	movwf	?_log+1,c
  5625  005BD8  0E00               	movlw	0
  5626  005BDA  6E3E               	movwf	?_log+2,c
  5627                           
  5628                           ; BSR set to: 1
  5629  005BDC  0012               	return	
  5630  005BDE                     l2019:
  5631                           
  5632                           ; BSR set to: 1
  5633  005BDE  503C               	movf	log@x,w,c
  5634  005BE0  103D               	iorwf	log@x+1,w,c
  5635  005BE2  103E               	iorwf	log@x+2,w,c
  5636  005BE4  A4D8               	btfss	status,2,c
  5637  005BE6  D00C               	goto	l2021
  5638  005BE8  0E00               	movlw	0
  5639  005BEA  0101               	movlb	1	; () banked
  5640  005BEC  6F29               	movwf	(_errno+1)& (0+255),b
  5641  005BEE  0E22               	movlw	34
  5642  005BF0  6F28               	movwf	_errno& (0+255),b
  5643  005BF2  0E00               	movlw	0
  5644  005BF4  6E3C               	movwf	?_log,c
  5645  005BF6  0E00               	movlw	0
  5646  005BF8  6E3D               	movwf	?_log+1,c
  5647  005BFA  0E00               	movlw	0
  5648  005BFC  6E3E               	movwf	?_log+2,c
  5649                           
  5650                           ; BSR set to: 1
  5651  005BFE  0012               	return	
  5652  005C00                     l2021:
  5653                           
  5654                           ; BSR set to: 1
  5655  005C00  0E00               	movlw	0
  5656  005C02  6E24               	movwf	___ftmul@f2,c
  5657  005C04  0E00               	movlw	0
  5658  005C06  6E25               	movwf	___ftmul@f2+1,c
  5659  005C08  0E40               	movlw	64
  5660  005C0A  6E26               	movwf	___ftmul@f2+2,c
  5661  005C0C  0E3F               	movlw	low log@exponent
  5662  005C0E  6E04               	movwf	frexp@eptr,c
  5663  005C10  0E00               	movlw	high log@exponent
  5664  005C12  6E05               	movwf	frexp@eptr+1,c
  5665  005C14  C03C  F001         	movff	log@x,frexp@value
  5666  005C18  C03D  F002         	movff	log@x+1,frexp@value+1
  5667  005C1C  C03E  F003         	movff	log@x+2,frexp@value+2
  5668  005C20  ECB1  F029         	call	_frexp	;wreg free
  5669  005C24  C001  F021         	movff	?_frexp,___ftmul@f1
  5670  005C28  C002  F022         	movff	?_frexp+1,___ftmul@f1+1
  5671  005C2C  C003  F023         	movff	?_frexp+2,___ftmul@f1+2
  5672  005C30  EC73  F02C         	call	___ftmul	;wreg free
  5673  005C34  C021  F015         	movff	?___ftmul,___ftadd@f1
  5674  005C38  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  5675  005C3C  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  5676  005C40  0E00               	movlw	0
  5677  005C42  6E18               	movwf	___ftadd@f2,c
  5678  005C44  0E80               	movlw	128
  5679  005C46  6E19               	movwf	___ftadd@f2+1,c
  5680  005C48  0EBF               	movlw	191
  5681  005C4A  6E1A               	movwf	___ftadd@f2+2,c
  5682  005C4C  EC28  F031         	call	___ftadd	;wreg free
  5683  005C50  C015  F03C         	movff	?___ftadd,log@x
  5684  005C54  C016  F03D         	movff	?___ftadd+1,log@x+1
  5685  005C58  C017  F03E         	movff	?___ftadd+2,log@x+2
  5686  005C5C  063F               	decf	log@exponent,f,c
  5687  005C5E  A0D8               	btfss	status,0,c
  5688  005C60  0640               	decf	log@exponent+1,f,c
  5689  005C62  C03C  F030         	movff	log@x,eval_poly@x
  5690  005C66  C03D  F031         	movff	log@x+1,eval_poly@x+1
  5691  005C6A  C03E  F032         	movff	log@x+2,eval_poly@x+2
  5692  005C6E  0E89               	movlw	low log@coeff
  5693  005C70  6E33               	movwf	eval_poly@d,c
  5694  005C72  0E7F               	movlw	high log@coeff
  5695  005C74  6E34               	movwf	eval_poly@d+1,c
  5696  005C76  0E00               	movlw	0
  5697  005C78  6E36               	movwf	eval_poly@n+1,c
  5698  005C7A  0E08               	movlw	8
  5699  005C7C  6E35               	movwf	eval_poly@n,c
  5700  005C7E  ECB3  F02A         	call	_eval_poly	;wreg free
  5701  005C82  C030  F03C         	movff	?_eval_poly,log@x
  5702  005C86  C031  F03D         	movff	?_eval_poly+1,log@x+1
  5703  005C8A  C032  F03E         	movff	?_eval_poly+2,log@x+2
  5704  005C8E  0E72               	movlw	114
  5705  005C90  6E24               	movwf	___ftmul@f2,c
  5706  005C92  0E31               	movlw	49
  5707  005C94  6E25               	movwf	___ftmul@f2+1,c
  5708  005C96  0E3F               	movlw	63
  5709  005C98  6E26               	movwf	___ftmul@f2+2,c
  5710  005C9A  C03F  F009         	movff	log@exponent,___awtoft@c
  5711  005C9E  C040  F00A         	movff	log@exponent+1,___awtoft@c+1
  5712  005CA2  EC25  F026         	call	___awtoft	;wreg free
  5713  005CA6  C009  F021         	movff	?___awtoft,___ftmul@f1
  5714  005CAA  C00A  F022         	movff	?___awtoft+1,___ftmul@f1+1
  5715  005CAE  C00B  F023         	movff	?___awtoft+2,___ftmul@f1+2
  5716  005CB2  EC73  F02C         	call	___ftmul	;wreg free
  5717  005CB6  C021  F015         	movff	?___ftmul,___ftadd@f1
  5718  005CBA  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  5719  005CBE  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  5720  005CC2  C03C  F018         	movff	log@x,___ftadd@f2
  5721  005CC6  C03D  F019         	movff	log@x+1,___ftadd@f2+1
  5722  005CCA  C03E  F01A         	movff	log@x+2,___ftadd@f2+2
  5723  005CCE  EC28  F031         	call	___ftadd	;wreg free
  5724  005CD2  C015  F03C         	movff	?___ftadd,?_log
  5725  005CD6  C016  F03D         	movff	?___ftadd+1,?_log+1
  5726  005CDA  C017  F03E         	movff	?___ftadd+2,?_log+2
  5727  005CDE  0012               	return	
  5728  005CE0                     __end_of_log:
  5729                           	opt stack 0
  5730                           tblptru	equ	0xFF8
  5731                           tblptrh	equ	0xFF7
  5732                           tblptrl	equ	0xFF6
  5733                           tablat	equ	0xFF5
  5734                           prodh	equ	0xFF4
  5735                           prodl	equ	0xFF3
  5736                           postinc0	equ	0xFEE
  5737                           wreg	equ	0xFE8
  5738                           postinc2	equ	0xFDE
  5739                           postdec2	equ	0xFDD
  5740                           fsr2h	equ	0xFDA
  5741                           fsr2l	equ	0xFD9
  5742                           status	equ	0xFD8
  5743                           
  5744 ;; *************** function _exp *****************
  5745 ;; Defined at:
  5746 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  x               3    0[BANK0 ] int 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  exponent        2    6[BANK0 ] int 
  5751 ;;  sign            1    8[BANK0 ] unsigned char 
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  3    0[BANK0 ] unsigned char 
  5754 ;; Registers used:
  5755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5761 ;;      Params:         0       3       0       0       0       0       0       0       0
  5762 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5763 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5764 ;;      Totals:         0       9       0       0       0       0       0       0       0
  5765 ;;Total ram usage:        9 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    3
  5768 ;; This function calls:
  5769 ;;		___awtoft
  5770 ;;		___ftdiv
  5771 ;;		___ftge
  5772 ;;		___ftmul
  5773 ;;		___ftneg
  5774 ;;		___ftsub
  5775 ;;		___fttol
  5776 ;;		_eval_poly
  5777 ;;		_floor
  5778 ;;		_ldexp
  5779 ;; This function is called by:
  5780 ;;		_pow
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           	psect	text15
  5785  0065C0                     __ptext15:
  5786                           	opt stack 0
  5787  0065C0                     _exp:
  5788                           	opt stack 26
  5789                           
  5790                           ;incstack = 0
  5791  0065C0  0100               	movlb	0	; () banked
  5792  0065C2  5160               	movf	exp@x& (0+255),w,b
  5793  0065C4  1161               	iorwf	(exp@x+1)& (0+255),w,b
  5794  0065C6  1162               	iorwf	(exp@x+2)& (0+255),w,b
  5795  0065C8  A4D8               	btfss	status,2,c
  5796  0065CA  D007               	goto	l1977
  5797                           
  5798                           ; BSR set to: 0
  5799  0065CC  0E00               	movlw	0
  5800  0065CE  6F60               	movwf	?_exp& (0+255),b
  5801  0065D0  0E80               	movlw	128
  5802  0065D2  6F61               	movwf	(?_exp+1)& (0+255),b
  5803  0065D4  0E3F               	movlw	63
  5804  0065D6  6F62               	movwf	(?_exp+2)& (0+255),b
  5805                           
  5806                           ; BSR set to: 0
  5807  0065D8  0012               	return	
  5808  0065DA                     l1977:
  5809                           
  5810                           ; BSR set to: 0
  5811                           
  5812                           ; BSR set to: 0
  5813  0065DA  0E72               	movlw	114
  5814  0065DC  6E01               	movwf	___ftge@ff1,c
  5815  0065DE  0E31               	movlw	49
  5816  0065E0  6E02               	movwf	___ftge@ff1+1,c
  5817  0065E2  0E44               	movlw	68
  5818  0065E4  6E03               	movwf	___ftge@ff1+2,c
  5819  0065E6  C060  F004         	movff	exp@x,___ftge@ff2
  5820  0065EA  C061  F005         	movff	exp@x+1,___ftge@ff2+1
  5821  0065EE  C062  F006         	movff	exp@x+2,___ftge@ff2+2
  5822  0065F2  EC69  F029         	call	___ftge	;wreg free
  5823  0065F6  B0D8               	btfsc	status,0,c
  5824  0065F8  D00D               	goto	l1979
  5825  0065FA  0E00               	movlw	0
  5826  0065FC  0101               	movlb	1	; () banked
  5827  0065FE  6F29               	movwf	(_errno+1)& (0+255),b
  5828  006600  0E22               	movlw	34
  5829  006602  6F28               	movwf	_errno& (0+255),b
  5830  006604  0EFF               	movlw	255
  5831  006606  0100               	movlb	0	; () banked
  5832  006608  6F60               	movwf	?_exp& (0+255),b
  5833  00660A  0E7F               	movlw	127
  5834  00660C  6F61               	movwf	(?_exp+1)& (0+255),b
  5835  00660E  0E7F               	movlw	127
  5836  006610  6F62               	movwf	(?_exp+2)& (0+255),b
  5837                           
  5838                           ; BSR set to: 0
  5839  006612  0012               	return	
  5840  006614                     l1979:
  5841                           
  5842                           ; BSR set to: 0
  5843  006614  C060  F001         	movff	exp@x,___ftge@ff1
  5844  006618  C061  F002         	movff	exp@x+1,___ftge@ff1+1
  5845  00661C  C062  F003         	movff	exp@x+2,___ftge@ff1+2
  5846  006620  0E49               	movlw	73
  5847  006622  6E04               	movwf	___ftge@ff2,c
  5848  006624  0E3A               	movlw	58
  5849  006626  6E05               	movwf	___ftge@ff2+1,c
  5850  006628  0EC4               	movlw	196
  5851  00662A  6E06               	movwf	___ftge@ff2+2,c
  5852  00662C  EC69  F029         	call	___ftge	;wreg free
  5853  006630  B0D8               	btfsc	status,0,c
  5854  006632  D00D               	goto	l1980
  5855  006634  0E00               	movlw	0
  5856  006636  0101               	movlb	1	; () banked
  5857  006638  6F29               	movwf	(_errno+1)& (0+255),b
  5858  00663A  0E22               	movlw	34
  5859  00663C  6F28               	movwf	_errno& (0+255),b
  5860  00663E  0E00               	movlw	0
  5861  006640  0100               	movlb	0	; () banked
  5862  006642  6F60               	movwf	?_exp& (0+255),b
  5863  006644  0E00               	movlw	0
  5864  006646  6F61               	movwf	(?_exp+1)& (0+255),b
  5865  006648  0E00               	movlw	0
  5866  00664A  6F62               	movwf	(?_exp+2)& (0+255),b
  5867                           
  5868                           ; BSR set to: 0
  5869  00664C  0012               	return	
  5870  00664E                     l1980:
  5871                           
  5872                           ; BSR set to: 0
  5873  00664E  0100               	movlb	0	; () banked
  5874  006650  AF62               	btfss	(exp@x+2)& (0+255),7,b
  5875  006652  D002               	goto	u4180
  5876  006654  0E01               	movlw	1
  5877  006656  D001               	goto	u4190
  5878  006658                     u4180:
  5879  006658  0E00               	movlw	0
  5880  00665A                     u4190:
  5881  00665A  6F68               	movwf	exp@sign& (0+255),b
  5882                           
  5883                           ; BSR set to: 0
  5884  00665C  5168               	movf	exp@sign& (0+255),w,b
  5885  00665E  B4D8               	btfsc	status,2,c
  5886  006660  D00E               	goto	l1981
  5887                           
  5888                           ; BSR set to: 0
  5889  006662  C060  F001         	movff	exp@x,___ftneg@f1
  5890  006666  C061  F002         	movff	exp@x+1,___ftneg@f1+1
  5891  00666A  C062  F003         	movff	exp@x+2,___ftneg@f1+2
  5892  00666E  ECD5  F025         	call	___ftneg	;wreg free
  5893  006672  C001  F060         	movff	?___ftneg,exp@x
  5894  006676  C002  F061         	movff	?___ftneg+1,exp@x+1
  5895  00667A  C003  F062         	movff	?___ftneg+2,exp@x+2
  5896  00667E                     l1981:
  5897  00667E  C060  F021         	movff	exp@x,___ftmul@f1
  5898  006682  C061  F022         	movff	exp@x+1,___ftmul@f1+1
  5899  006686  C062  F023         	movff	exp@x+2,___ftmul@f1+2
  5900  00668A  0EAA               	movlw	170
  5901  00668C  6E24               	movwf	___ftmul@f2,c
  5902  00668E  0EB8               	movlw	184
  5903  006690  6E25               	movwf	___ftmul@f2+1,c
  5904  006692  0E3F               	movlw	63
  5905  006694  6E26               	movwf	___ftmul@f2+2,c
  5906  006696  EC73  F02C         	call	___ftmul	;wreg free
  5907  00669A  C021  F060         	movff	?___ftmul,exp@x
  5908  00669E  C022  F061         	movff	?___ftmul+1,exp@x+1
  5909  0066A2  C023  F062         	movff	?___ftmul+2,exp@x+2
  5910  0066A6  C060  F050         	movff	exp@x,floor@x
  5911  0066AA  C061  F051         	movff	exp@x+1,floor@x+1
  5912  0066AE  C062  F052         	movff	exp@x+2,floor@x+2
  5913  0066B2  EC1C  F02B         	call	_floor	;wreg free
  5914  0066B6  C050  F063         	movff	?_floor,_exp$3068
  5915  0066BA  C051  F064         	movff	?_floor+1,_exp$3068+1
  5916  0066BE  C052  F065         	movff	?_floor+2,_exp$3068+2
  5917  0066C2  C063  F037         	movff	_exp$3068,___fttol@f1
  5918  0066C6  C064  F038         	movff	_exp$3068+1,___fttol@f1+1
  5919  0066CA  C065  F039         	movff	_exp$3068+2,___fttol@f1+2
  5920  0066CE  EC67  F02D         	call	___fttol	;wreg free
  5921  0066D2  C037  F066         	movff	?___fttol,exp@exponent
  5922  0066D6  C038  F067         	movff	?___fttol+1,exp@exponent+1
  5923  0066DA  C060  F021         	movff	exp@x,___ftsub@f1
  5924  0066DE  C061  F022         	movff	exp@x+1,___ftsub@f1+1
  5925  0066E2  C062  F023         	movff	exp@x+2,___ftsub@f1+2
  5926  0066E6  C066  F009         	movff	exp@exponent,___awtoft@c
  5927  0066EA  C067  F00A         	movff	exp@exponent+1,___awtoft@c+1
  5928  0066EE  EC25  F026         	call	___awtoft	;wreg free
  5929  0066F2  C009  F024         	movff	?___awtoft,___ftsub@f2
  5930  0066F6  C00A  F025         	movff	?___awtoft+1,___ftsub@f2+1
  5931  0066FA  C00B  F026         	movff	?___awtoft+2,___ftsub@f2+2
  5932  0066FE  EC41  F026         	call	___ftsub	;wreg free
  5933  006702  C021  F060         	movff	?___ftsub,exp@x
  5934  006706  C022  F061         	movff	?___ftsub+1,exp@x+1
  5935  00670A  C023  F062         	movff	?___ftsub+2,exp@x+2
  5936  00670E  C060  F030         	movff	exp@x,eval_poly@x
  5937  006712  C061  F031         	movff	exp@x+1,eval_poly@x+1
  5938  006716  C062  F032         	movff	exp@x+2,eval_poly@x+2
  5939  00671A  0E6B               	movlw	low exp@coeff
  5940  00671C  6E33               	movwf	eval_poly@d,c
  5941  00671E  0E7F               	movlw	high exp@coeff
  5942  006720  6E34               	movwf	eval_poly@d+1,c
  5943  006722  0E00               	movlw	0
  5944  006724  6E36               	movwf	eval_poly@n+1,c
  5945  006726  0E09               	movlw	9
  5946  006728  6E35               	movwf	eval_poly@n,c
  5947  00672A  ECB3  F02A         	call	_eval_poly	;wreg free
  5948  00672E  C030  F03C         	movff	?_eval_poly,ldexp@value
  5949  006732  C031  F03D         	movff	?_eval_poly+1,ldexp@value+1
  5950  006736  C032  F03E         	movff	?_eval_poly+2,ldexp@value+2
  5951  00673A  C066  F03F         	movff	exp@exponent,ldexp@newexp
  5952  00673E  C067  F040         	movff	exp@exponent+1,ldexp@newexp+1
  5953  006742  EC50  F02A         	call	_ldexp	;wreg free
  5954  006746  C03C  F060         	movff	?_ldexp,exp@x
  5955  00674A  C03D  F061         	movff	?_ldexp+1,exp@x+1
  5956  00674E  C03E  F062         	movff	?_ldexp+2,exp@x+2
  5957  006752  0100               	movlb	0	; () banked
  5958  006754  5168               	movf	exp@sign& (0+255),w,b
  5959  006756  B4D8               	btfsc	status,2,c
  5960  006758  D025               	goto	l1982
  5961                           
  5962                           ; BSR set to: 0
  5963  00675A  2960               	incf	exp@x& (0+255),w,b
  5964  00675C  E10E               	bnz	l5610
  5965  00675E  0E7F               	movlw	127
  5966  006760  1961               	xorwf	(exp@x+1)& (0+255),w,b
  5967  006762  E10B               	bnz	l5610
  5968  006764  0E7F               	movlw	127
  5969  006766  1962               	xorwf	(exp@x+2)& (0+255),w,b
  5970  006768  A4D8               	btfss	status,2,c
  5971  00676A  D007               	goto	l1983
  5972                           
  5973                           ; BSR set to: 0
  5974  00676C  0E00               	movlw	0
  5975  00676E  6F60               	movwf	?_exp& (0+255),b
  5976  006770  0E00               	movlw	0
  5977  006772  6F61               	movwf	(?_exp+1)& (0+255),b
  5978  006774  0E00               	movlw	0
  5979  006776  6F62               	movwf	(?_exp+2)& (0+255),b
  5980                           
  5981                           ; BSR set to: 0
  5982  006778  0012               	return	
  5983  00677A                     l1983:
  5984  00677A                     l5610:
  5985                           
  5986                           ; BSR set to: 0
  5987  00677A  0E00               	movlw	0
  5988  00677C  6E50               	movwf	___ftdiv@f1,c
  5989  00677E  0E80               	movlw	128
  5990  006780  6E51               	movwf	___ftdiv@f1+1,c
  5991  006782  0E3F               	movlw	63
  5992  006784  6E52               	movwf	___ftdiv@f1+2,c
  5993  006786  C060  F053         	movff	exp@x,___ftdiv@f2
  5994  00678A  C061  F054         	movff	exp@x+1,___ftdiv@f2+1
  5995  00678E  C062  F055         	movff	exp@x+2,___ftdiv@f2+2
  5996  006792  EC8B  F02B         	call	___ftdiv	;wreg free
  5997  006796  C050  F060         	movff	?___ftdiv,?_exp
  5998  00679A  C051  F061         	movff	?___ftdiv+1,?_exp+1
  5999  00679E  C052  F062         	movff	?___ftdiv+2,?_exp+2
  6000  0067A2  0012               	return	
  6001  0067A4                     l1982:
  6002                           
  6003                           ; BSR set to: 0
  6004  0067A4  C060  F060         	movff	exp@x,?_exp
  6005  0067A8  C061  F061         	movff	exp@x+1,?_exp+1
  6006  0067AC  C062  F062         	movff	exp@x+2,?_exp+2
  6007  0067B0  0012               	return		;funcret
  6008  0067B2                     __end_of_exp:
  6009                           	opt stack 0
  6010                           tblptru	equ	0xFF8
  6011                           tblptrh	equ	0xFF7
  6012                           tblptrl	equ	0xFF6
  6013                           tablat	equ	0xFF5
  6014                           prodh	equ	0xFF4
  6015                           prodl	equ	0xFF3
  6016                           postinc0	equ	0xFEE
  6017                           wreg	equ	0xFE8
  6018                           postinc2	equ	0xFDE
  6019                           postdec2	equ	0xFDD
  6020                           fsr2h	equ	0xFDA
  6021                           fsr2l	equ	0xFD9
  6022                           status	equ	0xFD8
  6023                           
  6024 ;; *************** function _ldexp *****************
  6025 ;; Defined at:
  6026 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;  value           3   59[COMRAM] unsigned char 
  6029 ;;  newexp          2   62[COMRAM] int 
  6030 ;; Auto vars:     Size  Location     Type
  6031 ;;		None
  6032 ;; Return value:  Size  Location     Type
  6033 ;;                  3   59[COMRAM] int 
  6034 ;; Registers used:
  6035 ;;		wreg, status,2, status,0
  6036 ;; Tracked objects:
  6037 ;;		On entry : 0/0
  6038 ;;		On exit  : 0/0
  6039 ;;		Unchanged: 0/0
  6040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6041 ;;      Params:         5       0       0       0       0       0       0       0       0
  6042 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6043 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6044 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6045 ;;Total ram usage:        7 bytes
  6046 ;; Hardware stack levels used:    1
  6047 ;; This function calls:
  6048 ;;		Nothing
  6049 ;; This function is called by:
  6050 ;;		_exp
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           	psect	text16
  6055  0054A0                     __ptext16:
  6056                           	opt stack 0
  6057  0054A0                     _ldexp:
  6058                           	opt stack 28
  6059                           
  6060                           ;incstack = 0
  6061  0054A0  503C               	movf	ldexp@value,w,c
  6062  0054A2  103D               	iorwf	ldexp@value+1,w,c
  6063  0054A4  103E               	iorwf	ldexp@value+2,w,c
  6064  0054A6  A4D8               	btfss	status,2,c
  6065  0054A8  D007               	goto	l2001
  6066  0054AA  0E00               	movlw	0
  6067  0054AC  6E3C               	movwf	?_ldexp,c
  6068  0054AE  0E00               	movlw	0
  6069  0054B0  6E3D               	movwf	?_ldexp+1,c
  6070  0054B2  0E00               	movlw	0
  6071  0054B4  6E3E               	movwf	?_ldexp+2,c
  6072  0054B6  0012               	return	
  6073  0054B8                     l2001:
  6074  0054B8  503E               	movf	ldexp@value+2,w,c
  6075  0054BA  0B7F               	andlw	127
  6076  0054BC  6E41               	movwf	??_ldexp& (0+255),c
  6077  0054BE  6A42               	clrf	(??_ldexp+1)& (0+255),c
  6078  0054C0  90D8               	bcf	status,0,c
  6079  0054C2  3641               	rlcf	??_ldexp,f,c
  6080  0054C4  3642               	rlcf	??_ldexp+1,f,c
  6081  0054C6  5041               	movf	??_ldexp,w,c
  6082  0054C8  263F               	addwf	ldexp@newexp,f,c
  6083  0054CA  5042               	movf	??_ldexp+1,w,c
  6084  0054CC  2240               	addwfc	ldexp@newexp+1,f,c
  6085  0054CE  AE3D               	btfss	ldexp@value+1,7,c
  6086  0054D0  D003               	goto	u3630
  6087  0054D2  6A41               	clrf	??_ldexp& (0+255),c
  6088  0054D4  2A41               	incf	??_ldexp& (0+255),f,c
  6089  0054D6  D001               	goto	u3638
  6090  0054D8                     u3630:
  6091  0054D8  6A41               	clrf	??_ldexp& (0+255),c
  6092  0054DA                     u3638:
  6093  0054DA  5041               	movf	??_ldexp,w,c
  6094  0054DC  263F               	addwf	ldexp@newexp,f,c
  6095  0054DE  0E00               	movlw	0
  6096  0054E0  2240               	addwfc	ldexp@newexp+1,f,c
  6097  0054E2  AE40               	btfss	ldexp@newexp+1,7,c
  6098  0054E4  D00C               	goto	l2003
  6099  0054E6  0E00               	movlw	0
  6100  0054E8  0101               	movlb	1	; () banked
  6101  0054EA  6F29               	movwf	(_errno+1)& (0+255),b
  6102  0054EC  0E22               	movlw	34
  6103  0054EE  6F28               	movwf	_errno& (0+255),b
  6104  0054F0  0E00               	movlw	0
  6105  0054F2  6E3C               	movwf	?_ldexp,c
  6106  0054F4  0E00               	movlw	0
  6107  0054F6  6E3D               	movwf	?_ldexp+1,c
  6108  0054F8  0E00               	movlw	0
  6109  0054FA                     L2:
  6110  0054FA  6E3E               	movwf	?_ldexp+2,c
  6111                           
  6112                           ; BSR set to: 1
  6113  0054FC  0012               	return	
  6114  0054FE                     l2003:
  6115                           
  6116                           ; BSR set to: 1
  6117  0054FE  BE40               	btfsc	ldexp@newexp+1,7,c
  6118  005500  D016               	goto	l2005
  6119  005502  0440               	decf	ldexp@newexp+1,w,c
  6120  005504  A0D8               	btfss	status,0,c
  6121  005506  D013               	goto	l2005
  6122  005508  0E00               	movlw	0
  6123  00550A  0101               	movlb	1	; () banked
  6124  00550C  6F29               	movwf	(_errno+1)& (0+255),b
  6125  00550E  0E22               	movlw	34
  6126  005510  6F28               	movwf	_errno& (0+255),b
  6127                           
  6128                           ; BSR set to: 1
  6129  005512  AE3E               	btfss	ldexp@value+2,7,c
  6130  005514  D006               	goto	l2006
  6131                           
  6132                           ; BSR set to: 1
  6133  005516  0EFF               	movlw	255
  6134  005518  6E3C               	movwf	?_ldexp,c
  6135  00551A  0E7F               	movlw	127
  6136  00551C  6E3D               	movwf	?_ldexp+1,c
  6137  00551E  0EFF               	movlw	255
  6138  005520  D7EC               	goto	L2
  6139  005522                     l2006:
  6140                           
  6141                           ; BSR set to: 1
  6142                           
  6143                           ; BSR set to: 1
  6144  005522  0EFF               	movlw	255
  6145  005524  6E3C               	movwf	?_ldexp,c
  6146  005526  0E7F               	movlw	127
  6147  005528  6E3D               	movwf	?_ldexp+1,c
  6148  00552A  0E7F               	movlw	127
  6149  00552C  D7E6               	goto	L2
  6150  00552E                     l2005:
  6151                           
  6152                           ; BSR set to: 1
  6153  00552E  3440               	rlcf	ldexp@newexp+1,w,c
  6154  005530  3040               	rrcf	ldexp@newexp+1,w,c
  6155  005532  6E42               	movwf	(??_ldexp+1)& (0+255),c
  6156  005534  303F               	rrcf	ldexp@newexp,w,c
  6157  005536  6E41               	movwf	??_ldexp& (0+255),c
  6158  005538  503E               	movf	ldexp@value+2,w,c
  6159  00553A  1841               	xorwf	??_ldexp,w,c
  6160  00553C  0B80               	andlw	-128
  6161  00553E  1841               	xorwf	??_ldexp,w,c
  6162  005540  6E3E               	movwf	ldexp@value+2,c
  6163  005542  C03F  F041         	movff	ldexp@newexp,??_ldexp
  6164  005546  0E01               	movlw	1
  6165  005548  1641               	andwf	??_ldexp,f,c
  6166  00554A  3241               	rrcf	??_ldexp,f,c
  6167  00554C  3241               	rrcf	??_ldexp,f,c
  6168  00554E  503D               	movf	ldexp@value+1,w,c
  6169  005550  1841               	xorwf	??_ldexp,w,c
  6170  005552  0B7F               	andlw	-129
  6171  005554  1841               	xorwf	??_ldexp,w,c
  6172  005556  6E3D               	movwf	ldexp@value+1,c
  6173  005558  C03C  F03C         	movff	ldexp@value,?_ldexp
  6174  00555C  C03D  F03D         	movff	ldexp@value+1,?_ldexp+1
  6175  005560  C03E  F03E         	movff	ldexp@value+2,?_ldexp+2
  6176  005564  0012               	return	
  6177  005566                     __end_of_ldexp:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           prodh	equ	0xFF4
  6184                           prodl	equ	0xFF3
  6185                           postinc0	equ	0xFEE
  6186                           wreg	equ	0xFE8
  6187                           postinc2	equ	0xFDE
  6188                           postdec2	equ	0xFDD
  6189                           fsr2h	equ	0xFDA
  6190                           fsr2l	equ	0xFD9
  6191                           status	equ	0xFD8
  6192                           
  6193 ;; *************** function _floor *****************
  6194 ;; Defined at:
  6195 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  6196 ;; Parameters:    Size  Location     Type
  6197 ;;  x               3   79[COMRAM] int 
  6198 ;; Auto vars:     Size  Location     Type
  6199 ;;  i               3   82[COMRAM] int 
  6200 ;;  expon           2   85[COMRAM] int 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  3   79[COMRAM] int 
  6203 ;; Registers used:
  6204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6210 ;;      Params:         3       0       0       0       0       0       0       0       0
  6211 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6213 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6214 ;;Total ram usage:        8 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    2
  6217 ;; This function calls:
  6218 ;;		___altoft
  6219 ;;		___ftadd
  6220 ;;		___ftge
  6221 ;;		___fttol
  6222 ;;		_frexp
  6223 ;; This function is called by:
  6224 ;;		_exp
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	text17
  6229  005638                     __ptext17:
  6230                           	opt stack 0
  6231  005638                     _floor:
  6232                           	opt stack 26
  6233                           
  6234                           ;incstack = 0
  6235  005638  C050  F001         	movff	floor@x,frexp@value
  6236  00563C  C051  F002         	movff	floor@x+1,frexp@value+1
  6237  005640  C052  F003         	movff	floor@x+2,frexp@value+2
  6238  005644  0E56               	movlw	low floor@expon
  6239  005646  6E04               	movwf	frexp@eptr,c
  6240  005648  0E00               	movlw	high floor@expon
  6241  00564A  6E05               	movwf	frexp@eptr+1,c
  6242  00564C  ECB1  F029         	call	_frexp	;wreg free
  6243  005650  AE57               	btfss	floor@expon+1,7,c
  6244  005652  D010               	goto	l1988
  6245  005654  AE52               	btfss	floor@x+2,7,c
  6246  005656  D007               	goto	l1989
  6247  005658  0E00               	movlw	0
  6248  00565A  6E50               	movwf	?_floor,c
  6249  00565C  0E80               	movlw	128
  6250  00565E  6E51               	movwf	?_floor+1,c
  6251  005660  0EBF               	movlw	191
  6252  005662  6E52               	movwf	?_floor+2,c
  6253  005664  0012               	return	
  6254  005666                     l1989:
  6255  005666  0E00               	movlw	0
  6256  005668  6E50               	movwf	?_floor,c
  6257  00566A  0E00               	movlw	0
  6258  00566C  6E51               	movwf	?_floor+1,c
  6259  00566E  0E00               	movlw	0
  6260  005670  6E52               	movwf	?_floor+2,c
  6261  005672  0012               	return	
  6262  005674                     l1988:
  6263  005674  5057               	movf	floor@expon+1,w,c
  6264  005676  E104               	bnz	u3600
  6265  005678  0E15               	movlw	21
  6266  00567A  5C56               	subwf	floor@expon,w,c
  6267  00567C  A0D8               	btfss	status,0,c
  6268  00567E  D007               	goto	l1991
  6269  005680                     u3600:
  6270  005680  C050  F050         	movff	floor@x,?_floor
  6271  005684  C051  F051         	movff	floor@x+1,?_floor+1
  6272  005688  C052  F052         	movff	floor@x+2,?_floor+2
  6273  00568C  0012               	return	
  6274  00568E                     l1991:
  6275  00568E  C050  F037         	movff	floor@x,___fttol@f1
  6276  005692  C051  F038         	movff	floor@x+1,___fttol@f1+1
  6277  005696  C052  F039         	movff	floor@x+2,___fttol@f1+2
  6278  00569A  EC67  F02D         	call	___fttol	;wreg free
  6279  00569E  C037  F046         	movff	?___fttol,___altoft@c
  6280  0056A2  C038  F047         	movff	?___fttol+1,___altoft@c+1
  6281  0056A6  C039  F048         	movff	?___fttol+2,___altoft@c+2
  6282  0056AA  C03A  F049         	movff	?___fttol+3,___altoft@c+3
  6283  0056AE  ECAD  F027         	call	___altoft	;wreg free
  6284  0056B2  C046  F053         	movff	?___altoft,floor@i
  6285  0056B6  C047  F054         	movff	?___altoft+1,floor@i+1
  6286  0056BA  C048  F055         	movff	?___altoft+2,floor@i+2
  6287  0056BE  C050  F001         	movff	floor@x,___ftge@ff1
  6288  0056C2  C051  F002         	movff	floor@x+1,___ftge@ff1+1
  6289  0056C6  C052  F003         	movff	floor@x+2,___ftge@ff1+2
  6290  0056CA  C053  F004         	movff	floor@i,___ftge@ff2
  6291  0056CE  C054  F005         	movff	floor@i+1,___ftge@ff2+1
  6292  0056D2  C055  F006         	movff	floor@i+2,___ftge@ff2+2
  6293  0056D6  EC69  F029         	call	___ftge	;wreg free
  6294  0056DA  B0D8               	btfsc	status,0,c
  6295  0056DC  D015               	goto	l1992
  6296  0056DE  C053  F015         	movff	floor@i,___ftadd@f1
  6297  0056E2  C054  F016         	movff	floor@i+1,___ftadd@f1+1
  6298  0056E6  C055  F017         	movff	floor@i+2,___ftadd@f1+2
  6299  0056EA  0E00               	movlw	0
  6300  0056EC  6E18               	movwf	___ftadd@f2,c
  6301  0056EE  0E80               	movlw	128
  6302  0056F0  6E19               	movwf	___ftadd@f2+1,c
  6303  0056F2  0EBF               	movlw	191
  6304  0056F4  6E1A               	movwf	___ftadd@f2+2,c
  6305  0056F6  EC28  F031         	call	___ftadd	;wreg free
  6306  0056FA  C015  F050         	movff	?___ftadd,?_floor
  6307  0056FE  C016  F051         	movff	?___ftadd+1,?_floor+1
  6308  005702  C017  F052         	movff	?___ftadd+2,?_floor+2
  6309  005706  0012               	return	
  6310  005708                     l1992:
  6311  005708  C053  F050         	movff	floor@i,?_floor
  6312  00570C  C054  F051         	movff	floor@i+1,?_floor+1
  6313  005710  C055  F052         	movff	floor@i+2,?_floor+2
  6314  005714  0012               	return		;funcret
  6315  005716                     __end_of_floor:
  6316                           	opt stack 0
  6317                           tblptru	equ	0xFF8
  6318                           tblptrh	equ	0xFF7
  6319                           tblptrl	equ	0xFF6
  6320                           tablat	equ	0xFF5
  6321                           prodh	equ	0xFF4
  6322                           prodl	equ	0xFF3
  6323                           postinc0	equ	0xFEE
  6324                           wreg	equ	0xFE8
  6325                           postinc2	equ	0xFDE
  6326                           postdec2	equ	0xFDD
  6327                           fsr2h	equ	0xFDA
  6328                           fsr2l	equ	0xFD9
  6329                           status	equ	0xFD8
  6330                           
  6331 ;; *************** function _frexp *****************
  6332 ;; Defined at:
  6333 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  value           3    0[COMRAM] int 
  6336 ;;  eptr            2    3[COMRAM] PTR int 
  6337 ;;		 -> log@exponent(2), floor@expon(2), 
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;		None
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  3    0[COMRAM] PTR int 
  6342 ;; Registers used:
  6343 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6349 ;;      Params:         5       0       0       0       0       0       0       0       0
  6350 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6351 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6352 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6353 ;;Total ram usage:        7 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; This function calls:
  6356 ;;		Nothing
  6357 ;; This function is called by:
  6358 ;;		_floor
  6359 ;;		_log
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           	psect	text18
  6364  005362                     __ptext18:
  6365                           	opt stack 0
  6366  005362                     _frexp:
  6367                           	opt stack 28
  6368                           
  6369                           ;incstack = 0
  6370  005362  5001               	movf	frexp@value,w,c
  6371  005364  1002               	iorwf	frexp@value+1,w,c
  6372  005366  1003               	iorwf	frexp@value+2,w,c
  6373  005368  A4D8               	btfss	status,2,c
  6374  00536A  D00F               	goto	l1997
  6375  00536C  C004  FFD9         	movff	frexp@eptr,fsr2l
  6376  005370  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6377  005374  0E00               	movlw	0
  6378  005376  6EDE               	movwf	postinc2,c
  6379  005378  0E00               	movlw	0
  6380  00537A  6EDD               	movwf	postdec2,c
  6381  00537C  0E00               	movlw	0
  6382  00537E  6E01               	movwf	?_frexp,c
  6383  005380  0E00               	movlw	0
  6384  005382  6E02               	movwf	?_frexp+1,c
  6385  005384  0E00               	movlw	0
  6386  005386  6E03               	movwf	?_frexp+2,c
  6387  005388  0012               	return	
  6388  00538A                     l1997:
  6389  00538A  5003               	movf	frexp@value+2,w,c
  6390  00538C  0B7F               	andlw	127
  6391  00538E  6E06               	movwf	??_frexp& (0+255),c
  6392  005390  6A07               	clrf	(??_frexp+1)& (0+255),c
  6393  005392  90D8               	bcf	status,0,c
  6394  005394  3606               	rlcf	??_frexp,f,c
  6395  005396  3607               	rlcf	??_frexp+1,f,c
  6396  005398  C004  FFD9         	movff	frexp@eptr,fsr2l
  6397  00539C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6398  0053A0  C006  FFDE         	movff	??_frexp,postinc2
  6399  0053A4  C007  FFDD         	movff	??_frexp+1,postdec2
  6400  0053A8  AE02               	btfss	frexp@value+1,7,c
  6401  0053AA  D003               	goto	u3250
  6402  0053AC  6A06               	clrf	??_frexp& (0+255),c
  6403  0053AE  2A06               	incf	??_frexp& (0+255),f,c
  6404  0053B0  D001               	goto	u3258
  6405  0053B2                     u3250:
  6406  0053B2  6A06               	clrf	??_frexp& (0+255),c
  6407  0053B4                     u3258:
  6408  0053B4  5006               	movf	??_frexp,w,c
  6409  0053B6  C004  FFD9         	movff	frexp@eptr,fsr2l
  6410  0053BA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6411  0053BE  12DE               	iorwf	postinc2,f,c
  6412  0053C0  0E00               	movlw	0
  6413  0053C2  12DD               	iorwf	postdec2,f,c
  6414  0053C4  C004  FFD9         	movff	frexp@eptr,fsr2l
  6415  0053C8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6416  0053CC  0E82               	movlw	130
  6417  0053CE  26DE               	addwf	postinc2,f,c
  6418  0053D0  0EFF               	movlw	255
  6419  0053D2  22DD               	addwfc	postdec2,f,c
  6420  0053D4  8003               	bsf	frexp@value+2,0,c
  6421  0053D6  8203               	bsf	frexp@value+2,1,c
  6422  0053D8  8403               	bsf	frexp@value+2,2,c
  6423  0053DA  8603               	bsf	frexp@value+2,3,c
  6424  0053DC  8803               	bsf	frexp@value+2,4,c
  6425  0053DE  8A03               	bsf	frexp@value+2,5,c
  6426  0053E0  9C03               	bcf	frexp@value+2,6,c
  6427  0053E2  9E02               	bcf	frexp@value+1,7,c
  6428  0053E4  C001  F001         	movff	frexp@value,?_frexp
  6429  0053E8  C002  F002         	movff	frexp@value+1,?_frexp+1
  6430  0053EC  C003  F003         	movff	frexp@value+2,?_frexp+2
  6431  0053F0  0012               	return	
  6432  0053F2                     __end_of_frexp:
  6433                           	opt stack 0
  6434                           tblptru	equ	0xFF8
  6435                           tblptrh	equ	0xFF7
  6436                           tblptrl	equ	0xFF6
  6437                           tablat	equ	0xFF5
  6438                           prodh	equ	0xFF4
  6439                           prodl	equ	0xFF3
  6440                           postinc0	equ	0xFEE
  6441                           wreg	equ	0xFE8
  6442                           postinc2	equ	0xFDE
  6443                           postdec2	equ	0xFDD
  6444                           fsr2h	equ	0xFDA
  6445                           fsr2l	equ	0xFD9
  6446                           status	equ	0xFD8
  6447                           
  6448 ;; *************** function ___ftsub *****************
  6449 ;; Defined at:
  6450 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  f1              3   32[COMRAM] float 
  6453 ;;  f2              3   35[COMRAM] float 
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;		None
  6456 ;; Return value:  Size  Location     Type
  6457 ;;                  3   32[COMRAM] float 
  6458 ;; Registers used:
  6459 ;;		wreg, status,2, status,0, cstack
  6460 ;; Tracked objects:
  6461 ;;		On entry : 0/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6465 ;;      Params:         6       0       0       0       0       0       0       0       0
  6466 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6467 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6468 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6469 ;;Total ram usage:        6 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; Hardware stack levels required when called:    2
  6472 ;; This function calls:
  6473 ;;		___ftadd
  6474 ;; This function is called by:
  6475 ;;		_printf
  6476 ;;		_sqrt
  6477 ;;		_exp
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           	psect	text19
  6482  004C82                     __ptext19:
  6483                           	opt stack 0
  6484  004C82                     ___ftsub:
  6485                           	opt stack 27
  6486                           
  6487                           ;incstack = 0
  6488  004C82  5024               	movf	___ftsub@f2,w,c
  6489  004C84  1025               	iorwf	___ftsub@f2+1,w,c
  6490  004C86  1026               	iorwf	___ftsub@f2+2,w,c
  6491  004C88  B4D8               	btfsc	status,2,c
  6492  004C8A  D006               	goto	l1681
  6493  004C8C  0E00               	movlw	0
  6494  004C8E  1A24               	xorwf	___ftsub@f2,f,c
  6495  004C90  0E00               	movlw	0
  6496  004C92  1A25               	xorwf	___ftsub@f2+1,f,c
  6497  004C94  0E80               	movlw	128
  6498  004C96  1A26               	xorwf	___ftsub@f2+2,f,c
  6499  004C98                     l1681:
  6500  004C98  C021  F015         	movff	___ftsub@f1,___ftadd@f1
  6501  004C9C  C022  F016         	movff	___ftsub@f1+1,___ftadd@f1+1
  6502  004CA0  C023  F017         	movff	___ftsub@f1+2,___ftadd@f1+2
  6503  004CA4  C024  F018         	movff	___ftsub@f2,___ftadd@f2
  6504  004CA8  C025  F019         	movff	___ftsub@f2+1,___ftadd@f2+1
  6505  004CAC  C026  F01A         	movff	___ftsub@f2+2,___ftadd@f2+2
  6506  004CB0  EC28  F031         	call	___ftadd	;wreg free
  6507  004CB4  C015  F021         	movff	?___ftadd,?___ftsub
  6508  004CB8  C016  F022         	movff	?___ftadd+1,?___ftsub+1
  6509  004CBC  C017  F023         	movff	?___ftadd+2,?___ftsub+2
  6510  004CC0  0012               	return	
  6511  004CC2                     __end_of___ftsub:
  6512                           	opt stack 0
  6513                           tblptru	equ	0xFF8
  6514                           tblptrh	equ	0xFF7
  6515                           tblptrl	equ	0xFF6
  6516                           tablat	equ	0xFF5
  6517                           prodh	equ	0xFF4
  6518                           prodl	equ	0xFF3
  6519                           postinc0	equ	0xFEE
  6520                           wreg	equ	0xFE8
  6521                           postinc2	equ	0xFDE
  6522                           postdec2	equ	0xFDD
  6523                           fsr2h	equ	0xFDA
  6524                           fsr2l	equ	0xFD9
  6525                           status	equ	0xFD8
  6526                           
  6527 ;; *************** function ___lltoft *****************
  6528 ;; Defined at:
  6529 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;  c               4    8[COMRAM] unsigned long 
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;  exp             1   16[COMRAM] unsigned char 
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  3    8[COMRAM] float 
  6536 ;; Registers used:
  6537 ;;		wreg, status,2, status,0, cstack
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6543 ;;      Params:         4       0       0       0       0       0       0       0       0
  6544 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6545 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6546 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6547 ;;Total ram usage:        9 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    1
  6550 ;; This function calls:
  6551 ;;		___ftpack
  6552 ;; This function is called by:
  6553 ;;		_printf
  6554 ;;		_pow
  6555 ;; This function uses a non-reentrant model
  6556 ;;
  6557                           
  6558                           	psect	text20
  6559  004DC2                     __ptext20:
  6560                           	opt stack 0
  6561  004DC2                     ___lltoft:
  6562                           	opt stack 28
  6563                           
  6564                           ;incstack = 0
  6565  004DC2  0E8E               	movlw	142
  6566  004DC4  6E11               	movwf	___lltoft@exp,c
  6567  004DC6  D006               	goto	l1742
  6568  004DC8  90D8               	bcf	status,0,c
  6569  004DCA  320C               	rrcf	___lltoft@c+3,f,c
  6570  004DCC  320B               	rrcf	___lltoft@c+2,f,c
  6571  004DCE  320A               	rrcf	___lltoft@c+1,f,c
  6572  004DD0  3209               	rrcf	___lltoft@c,f,c
  6573  004DD2  2A11               	incf	___lltoft@exp,f,c
  6574  004DD4                     l1742:
  6575  004DD4  0E00               	movlw	0
  6576  004DD6  1409               	andwf	___lltoft@c,w,c
  6577  004DD8  6E0D               	movwf	??___lltoft& (0+255),c
  6578  004DDA  0E00               	movlw	0
  6579  004DDC  140A               	andwf	___lltoft@c+1,w,c
  6580  004DDE  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6581  004DE0  0E00               	movlw	0
  6582  004DE2  140B               	andwf	___lltoft@c+2,w,c
  6583  004DE4  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6584  004DE6  0EFF               	movlw	255
  6585  004DE8  140C               	andwf	___lltoft@c+3,w,c
  6586  004DEA  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6587  004DEC  500D               	movf	??___lltoft,w,c
  6588  004DEE  100E               	iorwf	??___lltoft+1,w,c
  6589  004DF0  100F               	iorwf	??___lltoft+2,w,c
  6590  004DF2  1010               	iorwf	??___lltoft+3,w,c
  6591  004DF4  A4D8               	btfss	status,2,c
  6592  004DF6  D7E8               	goto	l1743
  6593  004DF8  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6594  004DFC  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6595  004E00  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6596  004E04  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6597  004E08  0E00               	movlw	0
  6598  004E0A  6E05               	movwf	___ftpack@sign,c
  6599  004E0C  ECF9  F029         	call	___ftpack	;wreg free
  6600  004E10  C001  F009         	movff	?___ftpack,?___lltoft
  6601  004E14  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6602  004E18  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6603  004E1C  0012               	return	
  6604  004E1E                     __end_of___lltoft:
  6605                           	opt stack 0
  6606                           tblptru	equ	0xFF8
  6607                           tblptrh	equ	0xFF7
  6608                           tblptrl	equ	0xFF6
  6609                           tablat	equ	0xFF5
  6610                           prodh	equ	0xFF4
  6611                           prodl	equ	0xFF3
  6612                           postinc0	equ	0xFEE
  6613                           wreg	equ	0xFE8
  6614                           postinc2	equ	0xFDE
  6615                           postdec2	equ	0xFDD
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8
  6619                           
  6620 ;; *************** function _initIO *****************
  6621 ;; Defined at:
  6622 ;;		line 14 in file "Inits.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;		None
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;		None
  6627 ;; Return value:  Size  Location     Type
  6628 ;;                  1    wreg      void 
  6629 ;; Registers used:
  6630 ;;		wreg, status,2
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6636 ;;      Params:         0       0       0       0       0       0       0       0       0
  6637 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6638 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6639 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6640 ;;Total ram usage:        0 bytes
  6641 ;; Hardware stack levels used:    1
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_main
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text21
  6650  004B66                     __ptext21:
  6651                           	opt stack 0
  6652  004B66                     _initIO:
  6653                           	opt stack 30
  6654                           
  6655                           ;Inits.c: 15: TRISA = 0;
  6656                           
  6657                           ;incstack = 0
  6658  004B66  0E00               	movlw	0
  6659  004B68  6E92               	movwf	3986,c	;volatile
  6660                           
  6661                           ;Inits.c: 16: TRISB = 0x07;
  6662  004B6A  0E07               	movlw	7
  6663  004B6C  6E93               	movwf	3987,c	;volatile
  6664                           
  6665                           ;Inits.c: 17: TRISC1 = 1;
  6666  004B6E  8294               	bsf	3988,1,c	;volatile
  6667                           
  6668                           ;Inits.c: 18: TRISC2 = 0;
  6669  004B70  9494               	bcf	3988,2,c	;volatile
  6670                           
  6671                           ;Inits.c: 19: LATA=LATB=LATC=LATD=LATE=0x00;
  6672  004B72  0E00               	movlw	0
  6673  004B74  6E8D               	movwf	3981,c	;volatile
  6674  004B76  CF8D FF8C          	movff	3981,3980	;volatile
  6675  004B7A  CF8C FF8B          	movff	3980,3979	;volatile
  6676  004B7E  CF8B FF8A          	movff	3979,3978	;volatile
  6677  004B82  CF8A FF89          	movff	3978,3977	;volatile
  6678  004B86  0012               	return		;funcret
  6679  004B88                     __end_of_initIO:
  6680                           	opt stack 0
  6681                           tblptru	equ	0xFF8
  6682                           tblptrh	equ	0xFF7
  6683                           tblptrl	equ	0xFF6
  6684                           tablat	equ	0xFF5
  6685                           prodh	equ	0xFF4
  6686                           prodl	equ	0xFF3
  6687                           postinc0	equ	0xFEE
  6688                           wreg	equ	0xFE8
  6689                           postinc2	equ	0xFDE
  6690                           postdec2	equ	0xFDD
  6691                           fsr2h	equ	0xFDA
  6692                           fsr2l	equ	0xFD9
  6693                           status	equ	0xFD8
  6694                           
  6695 ;; *************** function _initBT *****************
  6696 ;; Defined at:
  6697 ;;		line 22 in file "Inits.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;		None
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;		None
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  1    wreg      void 
  6704 ;; Registers used:
  6705 ;;		wreg, status,2, status,0, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6711 ;;      Params:         0       0       0       0       0       0       0       0       0
  6712 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6713 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6714 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6715 ;;Total ram usage:        1 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    3
  6718 ;; This function calls:
  6719 ;;		_USART_Init
  6720 ;; This function is called by:
  6721 ;;		_main
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           	psect	text22
  6726  004BF4                     __ptext22:
  6727                           	opt stack 0
  6728  004BF4                     _initBT:
  6729                           	opt stack 27
  6730                           
  6731                           ;Inits.c: 23: USART_Init(9600);
  6732                           
  6733                           ;incstack = 0
  6734  004BF4  0E80               	movlw	128
  6735  004BF6  0100               	movlb	0	; () banked
  6736  004BF8  6F60               	movwf	USART_Init@baud_rate& (0+255),b
  6737  004BFA  0E25               	movlw	37
  6738  004BFC  6F61               	movwf	(USART_Init@baud_rate+1)& (0+255),b
  6739  004BFE  0E00               	movlw	0
  6740  004C00  6F62               	movwf	(USART_Init@baud_rate+2)& (0+255),b
  6741  004C02  0E00               	movlw	0
  6742  004C04  6F63               	movwf	(USART_Init@baud_rate+3)& (0+255),b
  6743  004C06  ECE9  F027         	call	_USART_Init	;wreg free
  6744                           
  6745                           ;Inits.c: 24: _delay((unsigned long)((50)*(8000000/4000.0)));
  6746  004C0A  0E82               	movlw	130
  6747  004C0C  6E5F               	movwf	??_initBT& (0+255),c
  6748  004C0E  0EDE               	movlw	222
  6749  004C10                     u5087:
  6750  004C10  2EE8               	decfsz	wreg,f,c
  6751  004C12  D7FE               	bra	u5087
  6752  004C14  2E5F               	decfsz	??_initBT& (0+255),f,c
  6753  004C16  D7FC               	bra	u5087
  6754  004C18  0012               	return		;funcret
  6755  004C1A                     __end_of_initBT:
  6756                           	opt stack 0
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           prodh	equ	0xFF4
  6762                           prodl	equ	0xFF3
  6763                           postinc0	equ	0xFEE
  6764                           wreg	equ	0xFE8
  6765                           postinc2	equ	0xFDE
  6766                           postdec2	equ	0xFDD
  6767                           fsr2h	equ	0xFDA
  6768                           fsr2l	equ	0xFD9
  6769                           status	equ	0xFD8
  6770                           
  6771 ;; *************** function _USART_Init *****************
  6772 ;; Defined at:
  6773 ;;		line 8 in file "USART_Source_File.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;  baud_rate       4    0[BANK0 ] long 
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;  temp            3    4[BANK0 ] float 
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		wreg, status,2, status,0, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6787 ;;      Params:         0       4       0       0       0       0       0       0       0
  6788 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6790 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6791 ;;Total ram usage:        7 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    2
  6794 ;; This function calls:
  6795 ;;		___altoft
  6796 ;;		___ftadd
  6797 ;;		___ftdiv
  6798 ;;		___fttol
  6799 ;; This function is called by:
  6800 ;;		_initBT
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           	psect	text23
  6805  004FD2                     __ptext23:
  6806                           	opt stack 0
  6807  004FD2                     _USART_Init:
  6808                           	opt stack 27
  6809                           
  6810                           ;USART_Source_File.c: 10: float temp;
  6811                           ;USART_Source_File.c: 11: TRISC6=0;
  6812                           
  6813                           ;incstack = 0
  6814  004FD2  9C94               	bcf	3988,6,c	;volatile
  6815                           
  6816                           ;USART_Source_File.c: 12: TRISC7=1;
  6817  004FD4  8E94               	bsf	3988,7,c	;volatile
  6818                           
  6819                           ;USART_Source_File.c: 13: temp=(((float)(8000000/64)/(float)baud_rate)-1);
  6820  004FD6  C060  F046         	movff	USART_Init@baud_rate,___altoft@c
  6821  004FDA  C061  F047         	movff	USART_Init@baud_rate+1,___altoft@c+1
  6822  004FDE  C062  F048         	movff	USART_Init@baud_rate+2,___altoft@c+2
  6823  004FE2  C063  F049         	movff	USART_Init@baud_rate+3,___altoft@c+3
  6824  004FE6  ECAD  F027         	call	___altoft	;wreg free
  6825  004FEA  C046  F053         	movff	?___altoft,___ftdiv@f2
  6826  004FEE  C047  F054         	movff	?___altoft+1,___ftdiv@f2+1
  6827  004FF2  C048  F055         	movff	?___altoft+2,___ftdiv@f2+2
  6828  004FF6  0E24               	movlw	36
  6829  004FF8  6E50               	movwf	___ftdiv@f1,c
  6830  004FFA  0EF4               	movlw	244
  6831  004FFC  6E51               	movwf	___ftdiv@f1+1,c
  6832  004FFE  0E47               	movlw	71
  6833  005000  6E52               	movwf	___ftdiv@f1+2,c
  6834  005002  EC8B  F02B         	call	___ftdiv	;wreg free
  6835  005006  C050  F015         	movff	?___ftdiv,___ftadd@f1
  6836  00500A  C051  F016         	movff	?___ftdiv+1,___ftadd@f1+1
  6837  00500E  C052  F017         	movff	?___ftdiv+2,___ftadd@f1+2
  6838  005012  0E00               	movlw	0
  6839  005014  6E18               	movwf	___ftadd@f2,c
  6840  005016  0E80               	movlw	128
  6841  005018  6E19               	movwf	___ftadd@f2+1,c
  6842  00501A  0EBF               	movlw	191
  6843  00501C  6E1A               	movwf	___ftadd@f2+2,c
  6844  00501E  EC28  F031         	call	___ftadd	;wreg free
  6845  005022  C015  F064         	movff	?___ftadd,USART_Init@temp
  6846  005026  C016  F065         	movff	?___ftadd+1,USART_Init@temp+1
  6847  00502A  C017  F066         	movff	?___ftadd+2,USART_Init@temp+2
  6848                           
  6849                           ;USART_Source_File.c: 14: SPBRG=(int)temp;
  6850  00502E  C064  F037         	movff	USART_Init@temp,___fttol@f1
  6851  005032  C065  F038         	movff	USART_Init@temp+1,___fttol@f1+1
  6852  005036  C066  F039         	movff	USART_Init@temp+2,___fttol@f1+2
  6853  00503A  EC67  F02D         	call	___fttol	;wreg free
  6854  00503E  5037               	movf	?___fttol,w,c
  6855  005040  6EAF               	movwf	4015,c	;volatile
  6856                           
  6857                           ;USART_Source_File.c: 15: TXSTA=0x20;
  6858  005042  0E20               	movlw	32
  6859  005044  6EAC               	movwf	4012,c	;volatile
  6860                           
  6861                           ;USART_Source_File.c: 16: RCSTA=0x90;
  6862  005046  0E90               	movlw	144
  6863  005048  6EAB               	movwf	4011,c	;volatile
  6864  00504A  0012               	return		;funcret
  6865  00504C                     __end_of_USART_Init:
  6866                           	opt stack 0
  6867                           tblptru	equ	0xFF8
  6868                           tblptrh	equ	0xFF7
  6869                           tblptrl	equ	0xFF6
  6870                           tablat	equ	0xFF5
  6871                           prodh	equ	0xFF4
  6872                           prodl	equ	0xFF3
  6873                           postinc0	equ	0xFEE
  6874                           wreg	equ	0xFE8
  6875                           postinc2	equ	0xFDE
  6876                           postdec2	equ	0xFDD
  6877                           fsr2h	equ	0xFDA
  6878                           fsr2l	equ	0xFD9
  6879                           status	equ	0xFD8
  6880                           
  6881 ;; *************** function ___fttol *****************
  6882 ;; Defined at:
  6883 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;  f1              3   54[COMRAM] float 
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;  lval            4   64[COMRAM] unsigned long 
  6888 ;;  exp1            1   68[COMRAM] unsigned char 
  6889 ;;  sign1           1   63[COMRAM] unsigned char 
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  4   54[COMRAM] long 
  6892 ;; Registers used:
  6893 ;;		wreg, status,2, status,0
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6899 ;;      Params:         4       0       0       0       0       0       0       0       0
  6900 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6901 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6902 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6903 ;;Total ram usage:       15 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; This function calls:
  6906 ;;		Nothing
  6907 ;; This function is called by:
  6908 ;;		_USART_Init
  6909 ;;		_printf
  6910 ;;		_pow
  6911 ;;		_exp
  6912 ;;		_floor
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           	psect	text24
  6917  005ACE                     __ptext24:
  6918                           	opt stack 0
  6919  005ACE                     ___fttol:
  6920                           	opt stack 29
  6921                           
  6922                           ;incstack = 0
  6923  005ACE  C039  F03B         	movff	___fttol@f1+2,??___fttol
  6924  005AD2  6A3C               	clrf	(??___fttol+1)& (0+255),c
  6925  005AD4  6A3D               	clrf	(??___fttol+2)& (0+255),c
  6926  005AD6  3438               	rlcf	___fttol@f1+1,w,c
  6927  005AD8  363B               	rlcf	??___fttol& (0+255),f,c
  6928  005ADA  E301               	bnc	u3161
  6929  005ADC  803C               	bsf	(??___fttol+1)& (0+255),0,c
  6930  005ADE                     u3161:
  6931  005ADE  503B               	movf	??___fttol,w,c
  6932  005AE0  6E45               	movwf	___fttol@exp1,c
  6933  005AE2  5045               	movf	___fttol@exp1,w,c
  6934  005AE4  A4D8               	btfss	status,2,c
  6935  005AE6  D009               	goto	l1685
  6936  005AE8  0E00               	movlw	0
  6937  005AEA  6E37               	movwf	?___fttol,c
  6938  005AEC  0E00               	movlw	0
  6939  005AEE  6E38               	movwf	?___fttol+1,c
  6940  005AF0  0E00               	movlw	0
  6941  005AF2  6E39               	movwf	?___fttol+2,c
  6942  005AF4  0E00               	movlw	0
  6943  005AF6  6E3A               	movwf	?___fttol+3,c
  6944  005AF8  0012               	return	
  6945  005AFA                     l1685:
  6946  005AFA  0E17               	movlw	23
  6947  005AFC  6E3B               	movwf	??___fttol& (0+255),c
  6948  005AFE  C037  F03C         	movff	___fttol@f1,??___fttol+1
  6949  005B02  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  6950  005B06  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  6951  005B0A  283B               	incf	??___fttol,w,c
  6952  005B0C  6E3F               	movwf	(??___fttol+4)& (0+255),c
  6953  005B0E  D004               	goto	u3180
  6954  005B10                     u3185:
  6955  005B10  90D8               	bcf	status,0,c
  6956  005B12  323E               	rrcf	??___fttol+3,f,c
  6957  005B14  323D               	rrcf	??___fttol+2,f,c
  6958  005B16  323C               	rrcf	??___fttol+1,f,c
  6959  005B18                     u3180:
  6960  005B18  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  6961  005B1A  D7FA               	goto	u3185
  6962  005B1C  503C               	movf	??___fttol+1,w,c
  6963  005B1E  6E40               	movwf	___fttol@sign1,c
  6964  005B20  8E38               	bsf	___fttol@f1+1,7,c
  6965  005B22  0EFF               	movlw	255
  6966  005B24  1637               	andwf	___fttol@f1,f,c
  6967  005B26  0EFF               	movlw	255
  6968  005B28  1638               	andwf	___fttol@f1+1,f,c
  6969  005B2A  0E00               	movlw	0
  6970  005B2C  1639               	andwf	___fttol@f1+2,f,c
  6971  005B2E  5037               	movf	___fttol@f1,w,c
  6972  005B30  6E41               	movwf	___fttol@lval,c
  6973  005B32  5038               	movf	___fttol@f1+1,w,c
  6974  005B34  6E42               	movwf	___fttol@lval+1,c
  6975  005B36  5039               	movf	___fttol@f1+2,w,c
  6976  005B38  6E43               	movwf	___fttol@lval+2,c
  6977  005B3A  6A44               	clrf	___fttol@lval+3,c
  6978  005B3C  0E8E               	movlw	142
  6979  005B3E  5E45               	subwf	___fttol@exp1,f,c
  6980  005B40  AE45               	btfss	___fttol@exp1,7,c
  6981  005B42  D016               	goto	l1687
  6982  005B44  5045               	movf	___fttol@exp1,w,c
  6983  005B46  0A80               	xorlw	128
  6984  005B48  0F8F               	addlw	143
  6985  005B4A  B0D8               	btfsc	status,0,c
  6986  005B4C  D009               	goto	l1688
  6987  005B4E  0E00               	movlw	0
  6988  005B50  6E37               	movwf	?___fttol,c
  6989  005B52  0E00               	movlw	0
  6990  005B54  6E38               	movwf	?___fttol+1,c
  6991  005B56  0E00               	movlw	0
  6992  005B58  6E39               	movwf	?___fttol+2,c
  6993  005B5A  0E00               	movlw	0
  6994  005B5C  6E3A               	movwf	?___fttol+3,c
  6995  005B5E  0012               	return	
  6996  005B60                     l1688:
  6997  005B60  90D8               	bcf	status,0,c
  6998  005B62  3244               	rrcf	___fttol@lval+3,f,c
  6999  005B64  3243               	rrcf	___fttol@lval+2,f,c
  7000  005B66  3242               	rrcf	___fttol@lval+1,f,c
  7001  005B68  3241               	rrcf	___fttol@lval,f,c
  7002  005B6A  3E45               	incfsz	___fttol@exp1,f,c
  7003  005B6C  D7F9               	goto	l1688
  7004  005B6E  D015               	goto	u3220
  7005  005B70                     l1687:
  7006  005B70  0E17               	movlw	23
  7007  005B72  6445               	cpfsgt	___fttol@exp1,c
  7008  005B74  D00F               	goto	l1693
  7009  005B76  0E00               	movlw	0
  7010  005B78  6E37               	movwf	?___fttol,c
  7011  005B7A  0E00               	movlw	0
  7012  005B7C  6E38               	movwf	?___fttol+1,c
  7013  005B7E  0E00               	movlw	0
  7014  005B80  6E39               	movwf	?___fttol+2,c
  7015  005B82  0E00               	movlw	0
  7016  005B84  6E3A               	movwf	?___fttol+3,c
  7017  005B86  0012               	return	
  7018  005B88  90D8               	bcf	status,0,c
  7019  005B8A  3641               	rlcf	___fttol@lval,f,c
  7020  005B8C  3642               	rlcf	___fttol@lval+1,f,c
  7021  005B8E  3643               	rlcf	___fttol@lval+2,f,c
  7022  005B90  3644               	rlcf	___fttol@lval+3,f,c
  7023  005B92  0645               	decf	___fttol@exp1,f,c
  7024  005B94                     l1693:
  7025  005B94  5045               	movf	___fttol@exp1,w,c
  7026  005B96  A4D8               	btfss	status,2,c
  7027  005B98  D7F7               	goto	l1694
  7028  005B9A                     u3220:
  7029  005B9A  5040               	movf	___fttol@sign1,w,c
  7030  005B9C  B4D8               	btfsc	status,2,c
  7031  005B9E  D008               	goto	l1696
  7032  005BA0  1E44               	comf	___fttol@lval+3,f,c
  7033  005BA2  1E43               	comf	___fttol@lval+2,f,c
  7034  005BA4  1E42               	comf	___fttol@lval+1,f,c
  7035  005BA6  6C41               	negf	___fttol@lval,c
  7036  005BA8  0E00               	movlw	0
  7037  005BAA  2242               	addwfc	___fttol@lval+1,f,c
  7038  005BAC  2243               	addwfc	___fttol@lval+2,f,c
  7039  005BAE  2244               	addwfc	___fttol@lval+3,f,c
  7040  005BB0                     l1696:
  7041  005BB0  C041  F037         	movff	___fttol@lval,?___fttol
  7042  005BB4  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  7043  005BB8  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  7044  005BBC  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  7045  005BC0  0012               	return	
  7046  005BC2                     __end_of___fttol:
  7047                           	opt stack 0
  7048                           tblptru	equ	0xFF8
  7049                           tblptrh	equ	0xFF7
  7050                           tblptrl	equ	0xFF6
  7051                           tablat	equ	0xFF5
  7052                           prodh	equ	0xFF4
  7053                           prodl	equ	0xFF3
  7054                           postinc0	equ	0xFEE
  7055                           wreg	equ	0xFE8
  7056                           postinc2	equ	0xFDE
  7057                           postdec2	equ	0xFDD
  7058                           fsr2h	equ	0xFDA
  7059                           fsr2l	equ	0xFD9
  7060                           status	equ	0xFD8
  7061                           
  7062 ;; *************** function ___altoft *****************
  7063 ;; Defined at:
  7064 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;  c               4   69[COMRAM] long 
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;  sign            1   78[COMRAM] unsigned char 
  7069 ;;  exp             1   77[COMRAM] unsigned char 
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  3   69[COMRAM] float 
  7072 ;; Registers used:
  7073 ;;		wreg, status,2, status,0, cstack
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7079 ;;      Params:         4       0       0       0       0       0       0       0       0
  7080 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7081 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7082 ;;      Totals:        10       0       0       0       0       0       0       0       0
  7083 ;;Total ram usage:       10 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    1
  7086 ;; This function calls:
  7087 ;;		___ftpack
  7088 ;; This function is called by:
  7089 ;;		_USART_Init
  7090 ;;		_floor
  7091 ;; This function uses a non-reentrant model
  7092 ;;
  7093                           
  7094                           	psect	text25
  7095  004F5A                     __ptext25:
  7096                           	opt stack 0
  7097  004F5A                     ___altoft:
  7098                           	opt stack 26
  7099                           
  7100                           ;incstack = 0
  7101  004F5A  0E00               	movlw	0
  7102  004F5C  6E4F               	movwf	___altoft@sign,c
  7103  004F5E  0E8E               	movlw	142
  7104  004F60  6E4E               	movwf	___altoft@exp,c
  7105  004F62  AE49               	btfss	___altoft@c+3,7,c
  7106  004F64  D011               	goto	l1393
  7107  004F66  1E49               	comf	___altoft@c+3,f,c
  7108  004F68  1E48               	comf	___altoft@c+2,f,c
  7109  004F6A  1E47               	comf	___altoft@c+1,f,c
  7110  004F6C  6C46               	negf	___altoft@c,c
  7111  004F6E  0E00               	movlw	0
  7112  004F70  2247               	addwfc	___altoft@c+1,f,c
  7113  004F72  2248               	addwfc	___altoft@c+2,f,c
  7114  004F74  2249               	addwfc	___altoft@c+3,f,c
  7115  004F76  0E01               	movlw	1
  7116  004F78  6E4F               	movwf	___altoft@sign,c
  7117  004F7A  D006               	goto	l1393
  7118  004F7C  90D8               	bcf	status,0,c
  7119  004F7E  3249               	rrcf	___altoft@c+3,f,c
  7120  004F80  3248               	rrcf	___altoft@c+2,f,c
  7121  004F82  3247               	rrcf	___altoft@c+1,f,c
  7122  004F84  3246               	rrcf	___altoft@c,f,c
  7123  004F86  2A4E               	incf	___altoft@exp,f,c
  7124  004F88                     l1393:
  7125  004F88  0E00               	movlw	0
  7126  004F8A  1446               	andwf	___altoft@c,w,c
  7127  004F8C  6E4A               	movwf	??___altoft& (0+255),c
  7128  004F8E  0E00               	movlw	0
  7129  004F90  1447               	andwf	___altoft@c+1,w,c
  7130  004F92  6E4B               	movwf	(??___altoft+1)& (0+255),c
  7131  004F94  0E00               	movlw	0
  7132  004F96  1448               	andwf	___altoft@c+2,w,c
  7133  004F98  6E4C               	movwf	(??___altoft+2)& (0+255),c
  7134  004F9A  0EFF               	movlw	255
  7135  004F9C  1449               	andwf	___altoft@c+3,w,c
  7136  004F9E  6E4D               	movwf	(??___altoft+3)& (0+255),c
  7137  004FA0  504A               	movf	??___altoft,w,c
  7138  004FA2  104B               	iorwf	??___altoft+1,w,c
  7139  004FA4  104C               	iorwf	??___altoft+2,w,c
  7140  004FA6  104D               	iorwf	??___altoft+3,w,c
  7141  004FA8  A4D8               	btfss	status,2,c
  7142  004FAA  D7E8               	goto	l1394
  7143  004FAC  C046  F001         	movff	___altoft@c,___ftpack@arg
  7144  004FB0  C047  F002         	movff	___altoft@c+1,___ftpack@arg+1
  7145  004FB4  C048  F003         	movff	___altoft@c+2,___ftpack@arg+2
  7146  004FB8  C04E  F004         	movff	___altoft@exp,___ftpack@exp
  7147  004FBC  C04F  F005         	movff	___altoft@sign,___ftpack@sign
  7148  004FC0  ECF9  F029         	call	___ftpack	;wreg free
  7149  004FC4  C001  F046         	movff	?___ftpack,?___altoft
  7150  004FC8  C002  F047         	movff	?___ftpack+1,?___altoft+1
  7151  004FCC  C003  F048         	movff	?___ftpack+2,?___altoft+2
  7152  004FD0  0012               	return	
  7153  004FD2                     __end_of___altoft:
  7154                           	opt stack 0
  7155                           tblptru	equ	0xFF8
  7156                           tblptrh	equ	0xFF7
  7157                           tblptrl	equ	0xFF6
  7158                           tablat	equ	0xFF5
  7159                           prodh	equ	0xFF4
  7160                           prodl	equ	0xFF3
  7161                           postinc0	equ	0xFEE
  7162                           wreg	equ	0xFE8
  7163                           postinc2	equ	0xFDE
  7164                           postdec2	equ	0xFDD
  7165                           fsr2h	equ	0xFDA
  7166                           fsr2l	equ	0xFD9
  7167                           status	equ	0xFD8
  7168                           
  7169 ;; *************** function _get_last_z_angle *****************
  7170 ;; Defined at:
  7171 ;;		line 60 in file "main.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;		None
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;		None
  7176 ;; Return value:  Size  Location     Type
  7177 ;;                  3    0[COMRAM] float 
  7178 ;; Registers used:
  7179 ;;		None
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7185 ;;      Params:         3       0       0       0       0       0       0       0       0
  7186 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7188 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7189 ;;Total ram usage:        3 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; This function calls:
  7192 ;;		Nothing
  7193 ;; This function is called by:
  7194 ;;		_main
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           	psect	text26
  7199  0049FE                     __ptext26:
  7200                           	opt stack 0
  7201  0049FE                     _get_last_z_angle:
  7202                           	opt stack 30
  7203                           
  7204                           ;incstack = 0
  7205  0049FE  C11F  F001         	movff	_last_z_angle,?_get_last_z_angle
  7206  004A02  C120  F002         	movff	_last_z_angle+1,?_get_last_z_angle+1
  7207  004A06  C121  F003         	movff	_last_z_angle+2,?_get_last_z_angle+2
  7208  004A0A  0012               	return		;funcret
  7209  004A0C                     __end_of_get_last_z_angle:
  7210                           	opt stack 0
  7211                           tblptru	equ	0xFF8
  7212                           tblptrh	equ	0xFF7
  7213                           tblptrl	equ	0xFF6
  7214                           tablat	equ	0xFF5
  7215                           prodh	equ	0xFF4
  7216                           prodl	equ	0xFF3
  7217                           postinc0	equ	0xFEE
  7218                           wreg	equ	0xFE8
  7219                           postinc2	equ	0xFDE
  7220                           postdec2	equ	0xFDD
  7221                           fsr2h	equ	0xFDA
  7222                           fsr2l	equ	0xFD9
  7223                           status	equ	0xFD8
  7224                           
  7225 ;; *************** function _get_last_y_angle *****************
  7226 ;; Defined at:
  7227 ;;		line 59 in file "main.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;		None
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  3    0[COMRAM] float 
  7234 ;; Registers used:
  7235 ;;		None
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7241 ;;      Params:         3       0       0       0       0       0       0       0       0
  7242 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7244 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7245 ;;Total ram usage:        3 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; This function calls:
  7248 ;;		Nothing
  7249 ;; This function is called by:
  7250 ;;		_main
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           	psect	text27
  7255  0049F0                     __ptext27:
  7256                           	opt stack 0
  7257  0049F0                     _get_last_y_angle:
  7258                           	opt stack 30
  7259                           
  7260                           ;incstack = 0
  7261  0049F0  C122  F001         	movff	_last_y_angle,?_get_last_y_angle
  7262  0049F4  C123  F002         	movff	_last_y_angle+1,?_get_last_y_angle+1
  7263  0049F8  C124  F003         	movff	_last_y_angle+2,?_get_last_y_angle+2
  7264  0049FC  0012               	return		;funcret
  7265  0049FE                     __end_of_get_last_y_angle:
  7266                           	opt stack 0
  7267                           tblptru	equ	0xFF8
  7268                           tblptrh	equ	0xFF7
  7269                           tblptrl	equ	0xFF6
  7270                           tablat	equ	0xFF5
  7271                           prodh	equ	0xFF4
  7272                           prodl	equ	0xFF3
  7273                           postinc0	equ	0xFEE
  7274                           wreg	equ	0xFE8
  7275                           postinc2	equ	0xFDE
  7276                           postdec2	equ	0xFDD
  7277                           fsr2h	equ	0xFDA
  7278                           fsr2l	equ	0xFD9
  7279                           status	equ	0xFD8
  7280                           
  7281 ;; *************** function _get_last_x_angle *****************
  7282 ;; Defined at:
  7283 ;;		line 58 in file "main.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;		None
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;		None
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  3    0[COMRAM] float 
  7290 ;; Registers used:
  7291 ;;		None
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7297 ;;      Params:         3       0       0       0       0       0       0       0       0
  7298 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7299 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7300 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7301 ;;Total ram usage:        3 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; This function calls:
  7304 ;;		Nothing
  7305 ;; This function is called by:
  7306 ;;		_main
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           	psect	text28
  7311  0049E2                     __ptext28:
  7312                           	opt stack 0
  7313  0049E2                     _get_last_x_angle:
  7314                           	opt stack 30
  7315                           
  7316                           ;incstack = 0
  7317  0049E2  C125  F001         	movff	_last_x_angle,?_get_last_x_angle
  7318  0049E6  C126  F002         	movff	_last_x_angle+1,?_get_last_x_angle+1
  7319  0049EA  C127  F003         	movff	_last_x_angle+2,?_get_last_x_angle+2
  7320  0049EE  0012               	return		;funcret
  7321  0049F0                     __end_of_get_last_x_angle:
  7322                           	opt stack 0
  7323                           tblptru	equ	0xFF8
  7324                           tblptrh	equ	0xFF7
  7325                           tblptrl	equ	0xFF6
  7326                           tablat	equ	0xFF5
  7327                           prodh	equ	0xFF4
  7328                           prodl	equ	0xFF3
  7329                           postinc0	equ	0xFEE
  7330                           wreg	equ	0xFE8
  7331                           postinc2	equ	0xFDE
  7332                           postdec2	equ	0xFDD
  7333                           fsr2h	equ	0xFDA
  7334                           fsr2l	equ	0xFD9
  7335                           status	equ	0xFD8
  7336                           
  7337 ;; *************** function _get_last_gyro_z_angle *****************
  7338 ;; Defined at:
  7339 ;;		line 63 in file "main.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;		None
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;		None
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  3    0[COMRAM] float 
  7346 ;; Registers used:
  7347 ;;		None
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7353 ;;      Params:         3       0       0       0       0       0       0       0       0
  7354 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7355 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7356 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7357 ;;Total ram usage:        3 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; This function calls:
  7360 ;;		Nothing
  7361 ;; This function is called by:
  7362 ;;		_main
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text29
  7367  0049D4                     __ptext29:
  7368                           	opt stack 0
  7369  0049D4                     _get_last_gyro_z_angle:
  7370                           	opt stack 30
  7371                           
  7372                           ;incstack = 0
  7373  0049D4  C116  F001         	movff	_last_gyro_z_angle,?_get_last_gyro_z_angle
  7374  0049D8  C117  F002         	movff	_last_gyro_z_angle+1,?_get_last_gyro_z_angle+1
  7375  0049DC  C118  F003         	movff	_last_gyro_z_angle+2,?_get_last_gyro_z_angle+2
  7376  0049E0  0012               	return		;funcret
  7377  0049E2                     __end_of_get_last_gyro_z_angle:
  7378                           	opt stack 0
  7379                           tblptru	equ	0xFF8
  7380                           tblptrh	equ	0xFF7
  7381                           tblptrl	equ	0xFF6
  7382                           tablat	equ	0xFF5
  7383                           prodh	equ	0xFF4
  7384                           prodl	equ	0xFF3
  7385                           postinc0	equ	0xFEE
  7386                           wreg	equ	0xFE8
  7387                           postinc2	equ	0xFDE
  7388                           postdec2	equ	0xFDD
  7389                           fsr2h	equ	0xFDA
  7390                           fsr2l	equ	0xFD9
  7391                           status	equ	0xFD8
  7392                           
  7393 ;; *************** function _get_last_gyro_y_angle *****************
  7394 ;; Defined at:
  7395 ;;		line 62 in file "main.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;		None
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;		None
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  3    0[COMRAM] float 
  7402 ;; Registers used:
  7403 ;;		None
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7409 ;;      Params:         3       0       0       0       0       0       0       0       0
  7410 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7411 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7412 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7413 ;;Total ram usage:        3 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; This function calls:
  7416 ;;		Nothing
  7417 ;; This function is called by:
  7418 ;;		_main
  7419 ;; This function uses a non-reentrant model
  7420 ;;
  7421                           
  7422                           	psect	text30
  7423  0049C6                     __ptext30:
  7424                           	opt stack 0
  7425  0049C6                     _get_last_gyro_y_angle:
  7426                           	opt stack 30
  7427                           
  7428                           ;incstack = 0
  7429  0049C6  C119  F001         	movff	_last_gyro_y_angle,?_get_last_gyro_y_angle
  7430  0049CA  C11A  F002         	movff	_last_gyro_y_angle+1,?_get_last_gyro_y_angle+1
  7431  0049CE  C11B  F003         	movff	_last_gyro_y_angle+2,?_get_last_gyro_y_angle+2
  7432  0049D2  0012               	return		;funcret
  7433  0049D4                     __end_of_get_last_gyro_y_angle:
  7434                           	opt stack 0
  7435                           tblptru	equ	0xFF8
  7436                           tblptrh	equ	0xFF7
  7437                           tblptrl	equ	0xFF6
  7438                           tablat	equ	0xFF5
  7439                           prodh	equ	0xFF4
  7440                           prodl	equ	0xFF3
  7441                           postinc0	equ	0xFEE
  7442                           wreg	equ	0xFE8
  7443                           postinc2	equ	0xFDE
  7444                           postdec2	equ	0xFDD
  7445                           fsr2h	equ	0xFDA
  7446                           fsr2l	equ	0xFD9
  7447                           status	equ	0xFD8
  7448                           
  7449 ;; *************** function _get_last_gyro_x_angle *****************
  7450 ;; Defined at:
  7451 ;;		line 61 in file "main.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;		None
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;		None
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  3    0[COMRAM] float 
  7458 ;; Registers used:
  7459 ;;		None
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7465 ;;      Params:         3       0       0       0       0       0       0       0       0
  7466 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7467 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7468 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7469 ;;Total ram usage:        3 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; This function calls:
  7472 ;;		Nothing
  7473 ;; This function is called by:
  7474 ;;		_main
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           	psect	text31
  7479  0049B8                     __ptext31:
  7480                           	opt stack 0
  7481  0049B8                     _get_last_gyro_x_angle:
  7482                           	opt stack 30
  7483                           
  7484                           ;incstack = 0
  7485  0049B8  C11C  F001         	movff	_last_gyro_x_angle,?_get_last_gyro_x_angle
  7486  0049BC  C11D  F002         	movff	_last_gyro_x_angle+1,?_get_last_gyro_x_angle+1
  7487  0049C0  C11E  F003         	movff	_last_gyro_x_angle+2,?_get_last_gyro_x_angle+2
  7488  0049C4  0012               	return		;funcret
  7489  0049C6                     __end_of_get_last_gyro_x_angle:
  7490                           	opt stack 0
  7491                           tblptru	equ	0xFF8
  7492                           tblptrh	equ	0xFF7
  7493                           tblptrl	equ	0xFF6
  7494                           tablat	equ	0xFF5
  7495                           prodh	equ	0xFF4
  7496                           prodl	equ	0xFF3
  7497                           postinc0	equ	0xFEE
  7498                           wreg	equ	0xFE8
  7499                           postinc2	equ	0xFDE
  7500                           postdec2	equ	0xFDD
  7501                           fsr2h	equ	0xFDA
  7502                           fsr2l	equ	0xFD9
  7503                           status	equ	0xFD8
  7504                           
  7505 ;; *************** function _calibrate_sensors *****************
  7506 ;; Defined at:
  7507 ;;		line 96 in file "main.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;		None
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;  i               2    2[BANK0 ] int 
  7512 ;;  _z_gyro         3   19[BANK0 ] float 
  7513 ;;  _y_gyro         3   16[BANK0 ] float 
  7514 ;;  _x_gyro         3   13[BANK0 ] float 
  7515 ;;  _z_accel        3   10[BANK0 ] float 
  7516 ;;  _y_accel        3    7[BANK0 ] float 
  7517 ;;  _x_accel        3    4[BANK0 ] float 
  7518 ;;  num_readings    2   22[BANK0 ] int 
  7519 ;; Return value:  Size  Location     Type
  7520 ;;                  1    wreg      void 
  7521 ;; Registers used:
  7522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7523 ;; Tracked objects:
  7524 ;;		On entry : 0/0
  7525 ;;		On exit  : 0/0
  7526 ;;		Unchanged: 0/0
  7527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7528 ;;      Params:         0       0       0       0       0       0       0       0       0
  7529 ;;      Locals:         0      22       0       0       0       0       0       0       0
  7530 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7531 ;;      Totals:         0      24       0       0       0       0       0       0       0
  7532 ;;Total ram usage:       24 bytes
  7533 ;; Hardware stack levels used:    1
  7534 ;; Hardware stack levels required when called:    5
  7535 ;; This function calls:
  7536 ;;		___awtoft
  7537 ;;		___ftadd
  7538 ;;		___ftdiv
  7539 ;;		_read_gyro_accel_vals
  7540 ;; This function is called by:
  7541 ;;		_main
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text32
  7546  006A04                     __ptext32:
  7547                           	opt stack 0
  7548  006A04                     _calibrate_sensors:
  7549                           	opt stack 25
  7550                           
  7551                           ;main.c: 97: int num_readings = 10;
  7552                           
  7553                           ;incstack = 0
  7554  006A04  0E00               	movlw	0
  7555  006A06  0100               	movlb	0	; () banked
  7556  006A08  6F77               	movwf	(calibrate_sensors@num_readings+1)& (0+255),b
  7557  006A0A  0E0A               	movlw	10
  7558  006A0C  6F76               	movwf	calibrate_sensors@num_readings& (0+255),b
  7559                           
  7560                           ;main.c: 98: float _x_accel = 0;
  7561  006A0E  0E00               	movlw	0
  7562  006A10  6F64               	movwf	calibrate_sensors@_x_accel& (0+255),b
  7563  006A12  0E00               	movlw	0
  7564  006A14  6F65               	movwf	(calibrate_sensors@_x_accel+1)& (0+255),b
  7565  006A16  0E00               	movlw	0
  7566  006A18  6F66               	movwf	(calibrate_sensors@_x_accel+2)& (0+255),b
  7567                           
  7568                           ;main.c: 99: float _y_accel = 0;
  7569  006A1A  0E00               	movlw	0
  7570  006A1C  6F67               	movwf	calibrate_sensors@_y_accel& (0+255),b
  7571  006A1E  0E00               	movlw	0
  7572  006A20  6F68               	movwf	(calibrate_sensors@_y_accel+1)& (0+255),b
  7573  006A22  0E00               	movlw	0
  7574  006A24  6F69               	movwf	(calibrate_sensors@_y_accel+2)& (0+255),b
  7575                           
  7576                           ;main.c: 100: float _z_accel = 0;
  7577  006A26  0E00               	movlw	0
  7578  006A28  6F6A               	movwf	calibrate_sensors@_z_accel& (0+255),b
  7579  006A2A  0E00               	movlw	0
  7580  006A2C  6F6B               	movwf	(calibrate_sensors@_z_accel+1)& (0+255),b
  7581  006A2E  0E00               	movlw	0
  7582  006A30  6F6C               	movwf	(calibrate_sensors@_z_accel+2)& (0+255),b
  7583                           
  7584                           ;main.c: 101: float _x_gyro = 0;
  7585  006A32  0E00               	movlw	0
  7586  006A34  6F6D               	movwf	calibrate_sensors@_x_gyro& (0+255),b
  7587  006A36  0E00               	movlw	0
  7588  006A38  6F6E               	movwf	(calibrate_sensors@_x_gyro+1)& (0+255),b
  7589  006A3A  0E00               	movlw	0
  7590  006A3C  6F6F               	movwf	(calibrate_sensors@_x_gyro+2)& (0+255),b
  7591                           
  7592                           ;main.c: 102: float _y_gyro = 0;
  7593  006A3E  0E00               	movlw	0
  7594  006A40  6F70               	movwf	calibrate_sensors@_y_gyro& (0+255),b
  7595  006A42  0E00               	movlw	0
  7596  006A44  6F71               	movwf	(calibrate_sensors@_y_gyro+1)& (0+255),b
  7597  006A46  0E00               	movlw	0
  7598  006A48  6F72               	movwf	(calibrate_sensors@_y_gyro+2)& (0+255),b
  7599                           
  7600                           ;main.c: 103: float _z_gyro = 0;
  7601  006A4A  0E00               	movlw	0
  7602  006A4C  6F73               	movwf	calibrate_sensors@_z_gyro& (0+255),b
  7603  006A4E  0E00               	movlw	0
  7604  006A50  6F74               	movwf	(calibrate_sensors@_z_gyro+1)& (0+255),b
  7605  006A52  0E00               	movlw	0
  7606  006A54  6F75               	movwf	(calibrate_sensors@_z_gyro+2)& (0+255),b
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;main.c: 108: read_gyro_accel_vals();
  7610  006A56  EC0F  F027         	call	_read_gyro_accel_vals	;wreg free
  7611                           
  7612                           ;main.c: 111: for (int i = 0; i < num_readings; i++) {
  7613  006A5A  0E00               	movlw	0
  7614  006A5C  0100               	movlb	0	; () banked
  7615  006A5E  6F63               	movwf	(calibrate_sensors@i+1)& (0+255),b
  7616  006A60  0E00               	movlw	0
  7617  006A62  6F62               	movwf	calibrate_sensors@i& (0+255),b
  7618  006A64  D0AE               	goto	l112
  7619  006A66                     
  7620                           ; BSR set to: 0
  7621                           ;main.c: 112: read_gyro_accel_vals();
  7622                           
  7623                           ; BSR set to: 0
  7624  006A66  EC0F  F027         	call	_read_gyro_accel_vals	;wreg free
  7625                           
  7626                           ;main.c: 113: _x_accel += x_accel;
  7627  006A6A  C064  F015         	movff	calibrate_sensors@_x_accel,___ftadd@f1
  7628  006A6E  C065  F016         	movff	calibrate_sensors@_x_accel+1,___ftadd@f1+1
  7629  006A72  C066  F017         	movff	calibrate_sensors@_x_accel+2,___ftadd@f1+2
  7630  006A76  C0FD  F009         	movff	_x_accel,___awtoft@c
  7631  006A7A  C0FE  F00A         	movff	_x_accel+1,___awtoft@c+1
  7632  006A7E  EC25  F026         	call	___awtoft	;wreg free
  7633  006A82  C009  F018         	movff	?___awtoft,___ftadd@f2
  7634  006A86  C00A  F019         	movff	?___awtoft+1,___ftadd@f2+1
  7635  006A8A  C00B  F01A         	movff	?___awtoft+2,___ftadd@f2+2
  7636  006A8E  EC28  F031         	call	___ftadd	;wreg free
  7637  006A92  C015  F064         	movff	?___ftadd,calibrate_sensors@_x_accel
  7638  006A96  C016  F065         	movff	?___ftadd+1,calibrate_sensors@_x_accel+1
  7639  006A9A  C017  F066         	movff	?___ftadd+2,calibrate_sensors@_x_accel+2
  7640                           
  7641                           ;main.c: 114: _y_accel += y_accel;
  7642  006A9E  C067  F015         	movff	calibrate_sensors@_y_accel,___ftadd@f1
  7643  006AA2  C068  F016         	movff	calibrate_sensors@_y_accel+1,___ftadd@f1+1
  7644  006AA6  C069  F017         	movff	calibrate_sensors@_y_accel+2,___ftadd@f1+2
  7645  006AAA  C0FB  F009         	movff	_y_accel,___awtoft@c
  7646  006AAE  C0FC  F00A         	movff	_y_accel+1,___awtoft@c+1
  7647  006AB2  EC25  F026         	call	___awtoft	;wreg free
  7648  006AB6  C009  F018         	movff	?___awtoft,___ftadd@f2
  7649  006ABA  C00A  F019         	movff	?___awtoft+1,___ftadd@f2+1
  7650  006ABE  C00B  F01A         	movff	?___awtoft+2,___ftadd@f2+2
  7651  006AC2  EC28  F031         	call	___ftadd	;wreg free
  7652  006AC6  C015  F067         	movff	?___ftadd,calibrate_sensors@_y_accel
  7653  006ACA  C016  F068         	movff	?___ftadd+1,calibrate_sensors@_y_accel+1
  7654  006ACE  C017  F069         	movff	?___ftadd+2,calibrate_sensors@_y_accel+2
  7655                           
  7656                           ;main.c: 115: _z_accel += z_accel;
  7657  006AD2  C06A  F015         	movff	calibrate_sensors@_z_accel,___ftadd@f1
  7658  006AD6  C06B  F016         	movff	calibrate_sensors@_z_accel+1,___ftadd@f1+1
  7659  006ADA  C06C  F017         	movff	calibrate_sensors@_z_accel+2,___ftadd@f1+2
  7660  006ADE  C0F9  F009         	movff	_z_accel,___awtoft@c
  7661  006AE2  C0FA  F00A         	movff	_z_accel+1,___awtoft@c+1
  7662  006AE6  EC25  F026         	call	___awtoft	;wreg free
  7663  006AEA  C009  F018         	movff	?___awtoft,___ftadd@f2
  7664  006AEE  C00A  F019         	movff	?___awtoft+1,___ftadd@f2+1
  7665  006AF2  C00B  F01A         	movff	?___awtoft+2,___ftadd@f2+2
  7666  006AF6  EC28  F031         	call	___ftadd	;wreg free
  7667  006AFA  C015  F06A         	movff	?___ftadd,calibrate_sensors@_z_accel
  7668  006AFE  C016  F06B         	movff	?___ftadd+1,calibrate_sensors@_z_accel+1
  7669  006B02  C017  F06C         	movff	?___ftadd+2,calibrate_sensors@_z_accel+2
  7670                           
  7671                           ;main.c: 116: _x_gyro += x_gyro;
  7672  006B06  C06D  F015         	movff	calibrate_sensors@_x_gyro,___ftadd@f1
  7673  006B0A  C06E  F016         	movff	calibrate_sensors@_x_gyro+1,___ftadd@f1+1
  7674  006B0E  C06F  F017         	movff	calibrate_sensors@_x_gyro+2,___ftadd@f1+2
  7675  006B12  C0F7  F009         	movff	_x_gyro,___awtoft@c
  7676  006B16  C0F8  F00A         	movff	_x_gyro+1,___awtoft@c+1
  7677  006B1A  EC25  F026         	call	___awtoft	;wreg free
  7678  006B1E  C009  F018         	movff	?___awtoft,___ftadd@f2
  7679  006B22  C00A  F019         	movff	?___awtoft+1,___ftadd@f2+1
  7680  006B26  C00B  F01A         	movff	?___awtoft+2,___ftadd@f2+2
  7681  006B2A  EC28  F031         	call	___ftadd	;wreg free
  7682  006B2E  C015  F06D         	movff	?___ftadd,calibrate_sensors@_x_gyro
  7683  006B32  C016  F06E         	movff	?___ftadd+1,calibrate_sensors@_x_gyro+1
  7684  006B36  C017  F06F         	movff	?___ftadd+2,calibrate_sensors@_x_gyro+2
  7685                           
  7686                           ;main.c: 117: _y_gyro += y_gyro;
  7687  006B3A  C070  F015         	movff	calibrate_sensors@_y_gyro,___ftadd@f1
  7688  006B3E  C071  F016         	movff	calibrate_sensors@_y_gyro+1,___ftadd@f1+1
  7689  006B42  C072  F017         	movff	calibrate_sensors@_y_gyro+2,___ftadd@f1+2
  7690  006B46  C0F5  F009         	movff	_y_gyro,___awtoft@c
  7691  006B4A  C0F6  F00A         	movff	_y_gyro+1,___awtoft@c+1
  7692  006B4E  EC25  F026         	call	___awtoft	;wreg free
  7693  006B52  C009  F018         	movff	?___awtoft,___ftadd@f2
  7694  006B56  C00A  F019         	movff	?___awtoft+1,___ftadd@f2+1
  7695  006B5A  C00B  F01A         	movff	?___awtoft+2,___ftadd@f2+2
  7696  006B5E  EC28  F031         	call	___ftadd	;wreg free
  7697  006B62  C015  F070         	movff	?___ftadd,calibrate_sensors@_y_gyro
  7698  006B66  C016  F071         	movff	?___ftadd+1,calibrate_sensors@_y_gyro+1
  7699  006B6A  C017  F072         	movff	?___ftadd+2,calibrate_sensors@_y_gyro+2
  7700                           
  7701                           ;main.c: 118: _z_gyro += z_gyro;
  7702  006B6E  C073  F015         	movff	calibrate_sensors@_z_gyro,___ftadd@f1
  7703  006B72  C074  F016         	movff	calibrate_sensors@_z_gyro+1,___ftadd@f1+1
  7704  006B76  C075  F017         	movff	calibrate_sensors@_z_gyro+2,___ftadd@f1+2
  7705  006B7A  C0F3  F009         	movff	_z_gyro,___awtoft@c
  7706  006B7E  C0F4  F00A         	movff	_z_gyro+1,___awtoft@c+1
  7707  006B82  EC25  F026         	call	___awtoft	;wreg free
  7708  006B86  C009  F018         	movff	?___awtoft,___ftadd@f2
  7709  006B8A  C00A  F019         	movff	?___awtoft+1,___ftadd@f2+1
  7710  006B8E  C00B  F01A         	movff	?___awtoft+2,___ftadd@f2+2
  7711  006B92  EC28  F031         	call	___ftadd	;wreg free
  7712  006B96  C015  F073         	movff	?___ftadd,calibrate_sensors@_z_gyro
  7713  006B9A  C016  F074         	movff	?___ftadd+1,calibrate_sensors@_z_gyro+1
  7714  006B9E  C017  F075         	movff	?___ftadd+2,calibrate_sensors@_z_gyro+2
  7715                           
  7716                           ;main.c: 119: _delay((unsigned long)((100)*(8000000/4000.0)));
  7717  006BA2  0E02               	movlw	2
  7718  006BA4  0100               	movlb	0	; () banked
  7719  006BA6  6F61               	movwf	(??_calibrate_sensors+1)& (0+255),b
  7720  006BA8  0E04               	movlw	4
  7721  006BAA  6F60               	movwf	??_calibrate_sensors& (0+255),b
  7722  006BAC  0EBA               	movlw	186
  7723  006BAE                     u5097:
  7724  006BAE  2EE8               	decfsz	wreg,f,c
  7725  006BB0  D7FE               	bra	u5097
  7726  006BB2  2F60               	decfsz	??_calibrate_sensors& (0+255),f,b
  7727  006BB4  D7FC               	bra	u5097
  7728  006BB6  2F61               	decfsz	(??_calibrate_sensors+1)& (0+255),f,b
  7729  006BB8  D7FA               	bra	u5097
  7730  006BBA  F000               	nop	
  7731  006BBC  0100               	movlb	0	; () banked
  7732  006BBE  4B62               	infsnz	calibrate_sensors@i& (0+255),f,b
  7733  006BC0  2B63               	incf	(calibrate_sensors@i+1)& (0+255),f,b
  7734  006BC2                     l112:
  7735                           
  7736                           ; BSR set to: 0
  7737                           
  7738                           ; BSR set to: 0
  7739  006BC2  5176               	movf	calibrate_sensors@num_readings& (0+255),w,b
  7740  006BC4  5D62               	subwf	calibrate_sensors@i& (0+255),w,b
  7741  006BC6  5163               	movf	(calibrate_sensors@i+1)& (0+255),w,b
  7742  006BC8  0A80               	xorlw	128
  7743  006BCA  6F60               	movwf	??_calibrate_sensors& (0+255),b
  7744  006BCC  5177               	movf	(calibrate_sensors@num_readings+1)& (0+255),w,b
  7745  006BCE  0A80               	xorlw	128
  7746  006BD0  5960               	subwfb	??_calibrate_sensors& (0+255),w,b
  7747  006BD2  A0D8               	btfss	status,0,c
  7748  006BD4  D748               	goto	l113
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;main.c: 120: }
  7752                           ;main.c: 121: _x_accel /= num_readings;
  7753                           
  7754                           ; BSR set to: 0
  7755  006BD6  C064  F050         	movff	calibrate_sensors@_x_accel,___ftdiv@f1
  7756  006BDA  C065  F051         	movff	calibrate_sensors@_x_accel+1,___ftdiv@f1+1
  7757  006BDE  C066  F052         	movff	calibrate_sensors@_x_accel+2,___ftdiv@f1+2
  7758  006BE2  C076  F009         	movff	calibrate_sensors@num_readings,___awtoft@c
  7759  006BE6  C077  F00A         	movff	calibrate_sensors@num_readings+1,___awtoft@c+1
  7760  006BEA  EC25  F026         	call	___awtoft	;wreg free
  7761  006BEE  C009  F053         	movff	?___awtoft,___ftdiv@f2
  7762  006BF2  C00A  F054         	movff	?___awtoft+1,___ftdiv@f2+1
  7763  006BF6  C00B  F055         	movff	?___awtoft+2,___ftdiv@f2+2
  7764  006BFA  EC8B  F02B         	call	___ftdiv	;wreg free
  7765  006BFE  C050  F064         	movff	?___ftdiv,calibrate_sensors@_x_accel
  7766  006C02  C051  F065         	movff	?___ftdiv+1,calibrate_sensors@_x_accel+1
  7767  006C06  C052  F066         	movff	?___ftdiv+2,calibrate_sensors@_x_accel+2
  7768                           
  7769                           ;main.c: 122: _y_accel /= num_readings;
  7770  006C0A  C067  F050         	movff	calibrate_sensors@_y_accel,___ftdiv@f1
  7771  006C0E  C068  F051         	movff	calibrate_sensors@_y_accel+1,___ftdiv@f1+1
  7772  006C12  C069  F052         	movff	calibrate_sensors@_y_accel+2,___ftdiv@f1+2
  7773  006C16  C076  F009         	movff	calibrate_sensors@num_readings,___awtoft@c
  7774  006C1A  C077  F00A         	movff	calibrate_sensors@num_readings+1,___awtoft@c+1
  7775  006C1E  EC25  F026         	call	___awtoft	;wreg free
  7776  006C22  C009  F053         	movff	?___awtoft,___ftdiv@f2
  7777  006C26  C00A  F054         	movff	?___awtoft+1,___ftdiv@f2+1
  7778  006C2A  C00B  F055         	movff	?___awtoft+2,___ftdiv@f2+2
  7779  006C2E  EC8B  F02B         	call	___ftdiv	;wreg free
  7780  006C32  C050  F067         	movff	?___ftdiv,calibrate_sensors@_y_accel
  7781  006C36  C051  F068         	movff	?___ftdiv+1,calibrate_sensors@_y_accel+1
  7782  006C3A  C052  F069         	movff	?___ftdiv+2,calibrate_sensors@_y_accel+2
  7783                           
  7784                           ;main.c: 123: _z_accel /= num_readings;
  7785  006C3E  C06A  F050         	movff	calibrate_sensors@_z_accel,___ftdiv@f1
  7786  006C42  C06B  F051         	movff	calibrate_sensors@_z_accel+1,___ftdiv@f1+1
  7787  006C46  C06C  F052         	movff	calibrate_sensors@_z_accel+2,___ftdiv@f1+2
  7788  006C4A  C076  F009         	movff	calibrate_sensors@num_readings,___awtoft@c
  7789  006C4E  C077  F00A         	movff	calibrate_sensors@num_readings+1,___awtoft@c+1
  7790  006C52  EC25  F026         	call	___awtoft	;wreg free
  7791  006C56  C009  F053         	movff	?___awtoft,___ftdiv@f2
  7792  006C5A  C00A  F054         	movff	?___awtoft+1,___ftdiv@f2+1
  7793  006C5E  C00B  F055         	movff	?___awtoft+2,___ftdiv@f2+2
  7794  006C62  EC8B  F02B         	call	___ftdiv	;wreg free
  7795  006C66  C050  F06A         	movff	?___ftdiv,calibrate_sensors@_z_accel
  7796  006C6A  C051  F06B         	movff	?___ftdiv+1,calibrate_sensors@_z_accel+1
  7797  006C6E  C052  F06C         	movff	?___ftdiv+2,calibrate_sensors@_z_accel+2
  7798                           
  7799                           ;main.c: 124: _x_gyro /= num_readings;
  7800  006C72  C06D  F050         	movff	calibrate_sensors@_x_gyro,___ftdiv@f1
  7801  006C76  C06E  F051         	movff	calibrate_sensors@_x_gyro+1,___ftdiv@f1+1
  7802  006C7A  C06F  F052         	movff	calibrate_sensors@_x_gyro+2,___ftdiv@f1+2
  7803  006C7E  C076  F009         	movff	calibrate_sensors@num_readings,___awtoft@c
  7804  006C82  C077  F00A         	movff	calibrate_sensors@num_readings+1,___awtoft@c+1
  7805  006C86  EC25  F026         	call	___awtoft	;wreg free
  7806  006C8A  C009  F053         	movff	?___awtoft,___ftdiv@f2
  7807  006C8E  C00A  F054         	movff	?___awtoft+1,___ftdiv@f2+1
  7808  006C92  C00B  F055         	movff	?___awtoft+2,___ftdiv@f2+2
  7809  006C96  EC8B  F02B         	call	___ftdiv	;wreg free
  7810  006C9A  C050  F06D         	movff	?___ftdiv,calibrate_sensors@_x_gyro
  7811  006C9E  C051  F06E         	movff	?___ftdiv+1,calibrate_sensors@_x_gyro+1
  7812  006CA2  C052  F06F         	movff	?___ftdiv+2,calibrate_sensors@_x_gyro+2
  7813                           
  7814                           ;main.c: 125: _y_gyro /= num_readings;
  7815  006CA6  C070  F050         	movff	calibrate_sensors@_y_gyro,___ftdiv@f1
  7816  006CAA  C071  F051         	movff	calibrate_sensors@_y_gyro+1,___ftdiv@f1+1
  7817  006CAE  C072  F052         	movff	calibrate_sensors@_y_gyro+2,___ftdiv@f1+2
  7818  006CB2  C076  F009         	movff	calibrate_sensors@num_readings,___awtoft@c
  7819  006CB6  C077  F00A         	movff	calibrate_sensors@num_readings+1,___awtoft@c+1
  7820  006CBA  EC25  F026         	call	___awtoft	;wreg free
  7821  006CBE  C009  F053         	movff	?___awtoft,___ftdiv@f2
  7822  006CC2  C00A  F054         	movff	?___awtoft+1,___ftdiv@f2+1
  7823  006CC6  C00B  F055         	movff	?___awtoft+2,___ftdiv@f2+2
  7824  006CCA  EC8B  F02B         	call	___ftdiv	;wreg free
  7825  006CCE  C050  F070         	movff	?___ftdiv,calibrate_sensors@_y_gyro
  7826  006CD2  C051  F071         	movff	?___ftdiv+1,calibrate_sensors@_y_gyro+1
  7827  006CD6  C052  F072         	movff	?___ftdiv+2,calibrate_sensors@_y_gyro+2
  7828                           
  7829                           ;main.c: 126: _z_gyro /= num_readings;
  7830  006CDA  C073  F050         	movff	calibrate_sensors@_z_gyro,___ftdiv@f1
  7831  006CDE  C074  F051         	movff	calibrate_sensors@_z_gyro+1,___ftdiv@f1+1
  7832  006CE2  C075  F052         	movff	calibrate_sensors@_z_gyro+2,___ftdiv@f1+2
  7833  006CE6  C076  F009         	movff	calibrate_sensors@num_readings,___awtoft@c
  7834  006CEA  C077  F00A         	movff	calibrate_sensors@num_readings+1,___awtoft@c+1
  7835  006CEE  EC25  F026         	call	___awtoft	;wreg free
  7836  006CF2  C009  F053         	movff	?___awtoft,___ftdiv@f2
  7837  006CF6  C00A  F054         	movff	?___awtoft+1,___ftdiv@f2+1
  7838  006CFA  C00B  F055         	movff	?___awtoft+2,___ftdiv@f2+2
  7839  006CFE  EC8B  F02B         	call	___ftdiv	;wreg free
  7840  006D02  C050  F073         	movff	?___ftdiv,calibrate_sensors@_z_gyro
  7841  006D06  C051  F074         	movff	?___ftdiv+1,calibrate_sensors@_z_gyro+1
  7842  006D0A  C052  F075         	movff	?___ftdiv+2,calibrate_sensors@_z_gyro+2
  7843                           
  7844                           ;main.c: 129: base_x_accel = _x_accel;
  7845  006D0E  C064  F113         	movff	calibrate_sensors@_x_accel,_base_x_accel
  7846  006D12  C065  F114         	movff	calibrate_sensors@_x_accel+1,_base_x_accel+1
  7847  006D16  C066  F115         	movff	calibrate_sensors@_x_accel+2,_base_x_accel+2
  7848                           
  7849                           ;main.c: 130: base_y_accel = _y_accel;
  7850  006D1A  C067  F110         	movff	calibrate_sensors@_y_accel,_base_y_accel
  7851  006D1E  C068  F111         	movff	calibrate_sensors@_y_accel+1,_base_y_accel+1
  7852  006D22  C069  F112         	movff	calibrate_sensors@_y_accel+2,_base_y_accel+2
  7853                           
  7854                           ;main.c: 131: base_z_accel = _z_accel;
  7855  006D26  C06A  F10D         	movff	calibrate_sensors@_z_accel,_base_z_accel
  7856  006D2A  C06B  F10E         	movff	calibrate_sensors@_z_accel+1,_base_z_accel+1
  7857  006D2E  C06C  F10F         	movff	calibrate_sensors@_z_accel+2,_base_z_accel+2
  7858                           
  7859                           ;main.c: 132: base_x_gyro = _x_gyro;
  7860  006D32  C06D  F10A         	movff	calibrate_sensors@_x_gyro,_base_x_gyro
  7861  006D36  C06E  F10B         	movff	calibrate_sensors@_x_gyro+1,_base_x_gyro+1
  7862  006D3A  C06F  F10C         	movff	calibrate_sensors@_x_gyro+2,_base_x_gyro+2
  7863                           
  7864                           ;main.c: 133: base_y_gyro = _y_gyro;
  7865  006D3E  C070  F107         	movff	calibrate_sensors@_y_gyro,_base_y_gyro
  7866  006D42  C071  F108         	movff	calibrate_sensors@_y_gyro+1,_base_y_gyro+1
  7867  006D46  C072  F109         	movff	calibrate_sensors@_y_gyro+2,_base_y_gyro+2
  7868                           
  7869                           ;main.c: 134: base_z_gyro = _z_gyro;
  7870  006D4A  C073  F104         	movff	calibrate_sensors@_z_gyro,_base_z_gyro
  7871  006D4E  C074  F105         	movff	calibrate_sensors@_z_gyro+1,_base_z_gyro+1
  7872  006D52  C075  F106         	movff	calibrate_sensors@_z_gyro+2,_base_z_gyro+2
  7873  006D56  0012               	return		;funcret
  7874  006D58                     __end_of_calibrate_sensors:
  7875                           	opt stack 0
  7876                           tblptru	equ	0xFF8
  7877                           tblptrh	equ	0xFF7
  7878                           tblptrl	equ	0xFF6
  7879                           tablat	equ	0xFF5
  7880                           prodh	equ	0xFF4
  7881                           prodl	equ	0xFF3
  7882                           postinc0	equ	0xFEE
  7883                           wreg	equ	0xFE8
  7884                           postinc2	equ	0xFDE
  7885                           postdec2	equ	0xFDD
  7886                           fsr2h	equ	0xFDA
  7887                           fsr2l	equ	0xFD9
  7888                           status	equ	0xFD8
  7889                           
  7890 ;; *************** function _read_gyro_accel_vals *****************
  7891 ;; Defined at:
  7892 ;;		line 65 in file "main.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;		None
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;		None
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7906 ;;      Params:         0       0       0       0       0       0       0       0       0
  7907 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7908 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7909 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7910 ;;Total ram usage:        0 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    4
  7913 ;; This function calls:
  7914 ;;		_MPU6050_getMotion6
  7915 ;; This function is called by:
  7916 ;;		_calibrate_sensors
  7917 ;;		_main
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text33
  7922  004E1E                     __ptext33:
  7923                           	opt stack 0
  7924  004E1E                     _read_gyro_accel_vals:
  7925                           	opt stack 26
  7926                           
  7927                           ;main.c: 76: MPU6050_getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
  7928                           
  7929                           ;incstack = 0
  7930  004E1E  0E45               	movlw	low _ax
  7931  004E20  6E21               	movwf	MPU6050_getMotion6@ax,c
  7932  004E22  0E01               	movlw	high _ax
  7933  004E24  6E22               	movwf	MPU6050_getMotion6@ax+1,c
  7934  004E26  0E43               	movlw	low _ay
  7935  004E28  6E23               	movwf	MPU6050_getMotion6@ay,c
  7936  004E2A  0E01               	movlw	high _ay
  7937  004E2C  6E24               	movwf	MPU6050_getMotion6@ay+1,c
  7938  004E2E  0E41               	movlw	low _az
  7939  004E30  6E25               	movwf	MPU6050_getMotion6@az,c
  7940  004E32  0E01               	movlw	high _az
  7941  004E34  6E26               	movwf	MPU6050_getMotion6@az+1,c
  7942  004E36  0E3F               	movlw	low _gx
  7943  004E38  6E27               	movwf	MPU6050_getMotion6@gx,c
  7944  004E3A  0E01               	movlw	high _gx
  7945  004E3C  6E28               	movwf	MPU6050_getMotion6@gx+1,c
  7946  004E3E  0E3D               	movlw	low _gy
  7947  004E40  6E29               	movwf	MPU6050_getMotion6@gy,c
  7948  004E42  0E01               	movlw	high _gy
  7949  004E44  6E2A               	movwf	MPU6050_getMotion6@gy+1,c
  7950  004E46  0E3B               	movlw	low _gz
  7951  004E48  6E2B               	movwf	MPU6050_getMotion6@gz,c
  7952  004E4A  0E01               	movlw	high _gz
  7953  004E4C  6E2C               	movwf	MPU6050_getMotion6@gz+1,c
  7954  004E4E  ECED  F02C         	call	_MPU6050_getMotion6	;wreg free
  7955                           
  7956                           ;main.c: 78: x_accel = ax;
  7957  004E52  C145  F0FD         	movff	_ax,_x_accel
  7958  004E56  C146  F0FE         	movff	_ax+1,_x_accel+1
  7959                           
  7960                           ;main.c: 79: y_accel = ay;
  7961  004E5A  C143  F0FB         	movff	_ay,_y_accel
  7962  004E5E  C144  F0FC         	movff	_ay+1,_y_accel+1
  7963                           
  7964                           ;main.c: 80: z_accel = az;
  7965  004E62  C141  F0F9         	movff	_az,_z_accel
  7966  004E66  C142  F0FA         	movff	_az+1,_z_accel+1
  7967                           
  7968                           ;main.c: 81: x_gyro = gx;
  7969  004E6A  C13F  F0F7         	movff	_gx,_x_gyro
  7970  004E6E  C140  F0F8         	movff	_gx+1,_x_gyro+1
  7971                           
  7972                           ;main.c: 82: y_gyro = gy;
  7973  004E72  C13D  F0F5         	movff	_gy,_y_gyro
  7974  004E76  C13E  F0F6         	movff	_gy+1,_y_gyro+1
  7975                           
  7976                           ;main.c: 83: z_gyro = gz;
  7977  004E7A  C13B  F0F3         	movff	_gz,_z_gyro
  7978  004E7E  C13C  F0F4         	movff	_gz+1,_z_gyro+1
  7979  004E82  0012               	return		;funcret
  7980  004E84                     __end_of_read_gyro_accel_vals:
  7981                           	opt stack 0
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           postinc0	equ	0xFEE
  7989                           wreg	equ	0xFE8
  7990                           postinc2	equ	0xFDE
  7991                           postdec2	equ	0xFDD
  7992                           fsr2h	equ	0xFDA
  7993                           fsr2l	equ	0xFD9
  7994                           status	equ	0xFD8
  7995                           
  7996 ;; *************** function _MPU6050_getMotion6 *****************
  7997 ;; Defined at:
  7998 ;;		line 1733 in file "MPU6050.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;  ax              2   32[COMRAM] PTR int 
  8001 ;;		 -> ax(2), 
  8002 ;;  ay              2   34[COMRAM] PTR int 
  8003 ;;		 -> ay(2), 
  8004 ;;  az              2   36[COMRAM] PTR int 
  8005 ;;		 -> az(2), 
  8006 ;;  gx              2   38[COMRAM] PTR int 
  8007 ;;		 -> gx(2), 
  8008 ;;  gy              2   40[COMRAM] PTR int 
  8009 ;;		 -> gy(2), 
  8010 ;;  gz              2   42[COMRAM] PTR int 
  8011 ;;		 -> gz(2), 
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;		None
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8023 ;;      Params:        12       0       0       0       0       0       0       0       0
  8024 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8025 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8026 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8027 ;;Total ram usage:       14 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    3
  8030 ;; This function calls:
  8031 ;;		_I2Cdev_readBytes
  8032 ;; This function is called by:
  8033 ;;		_read_gyro_accel_vals
  8034 ;;		_MPU6050_getMotion9
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           	psect	text34
  8039  0059DA                     __ptext34:
  8040                           	opt stack 0
  8041  0059DA                     _MPU6050_getMotion6:
  8042                           	opt stack 26
  8043                           
  8044                           ;MPU6050.c: 1734: I2Cdev_readBytes(mpu6050.devAddr, 0x3B, 14, mpu6050.buffer);
  8045                           
  8046                           ;incstack = 0
  8047  0059DA  0E3B               	movlw	59
  8048  0059DC  6E15               	movwf	I2Cdev_readBytes@regAddr,c
  8049  0059DE  0E0E               	movlw	14
  8050  0059E0  6E16               	movwf	I2Cdev_readBytes@length,c
  8051  0059E2  0E2D               	movlw	low (_mpu6050+1)
  8052  0059E4  6E17               	movwf	I2Cdev_readBytes@data,c
  8053  0059E6  0E01               	movlw	high (_mpu6050+1)
  8054  0059E8  6E18               	movwf	I2Cdev_readBytes@data+1,c
  8055  0059EA  0101               	movlb	1	; () banked
  8056  0059EC  512C               	movf	_mpu6050& (0+255),w,b
  8057  0059EE  ECFE  F02B         	call	_I2Cdev_readBytes
  8058                           
  8059                           ;MPU6050.c: 1735: *ax = (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
  8060  0059F2  0101               	movlb	1	; () banked
  8061  0059F4  512E               	movf	(_mpu6050+2)& (0+255),w,b
  8062  0059F6  C12D  F02D         	movff	_mpu6050+1,??_MPU6050_getMotion6
  8063  0059FA  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  8064  0059FC  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  8065  005A00  6A2D               	clrf	??_MPU6050_getMotion6,c
  8066  005A02  122D               	iorwf	??_MPU6050_getMotion6,f,c
  8067  005A04  0E00               	movlw	0
  8068  005A06  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  8069  005A08  C021  FFD9         	movff	MPU6050_getMotion6@ax,fsr2l
  8070  005A0C  C022  FFDA         	movff	MPU6050_getMotion6@ax+1,fsr2h
  8071  005A10  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  8072  005A14  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  8073                           
  8074                           ; BSR set to: 1
  8075                           ;MPU6050.c: 1736: *ay = (((int16_t)mpu6050.buffer[2]) << 8) | mpu6050.buffer[3];
  8076  005A18  5130               	movf	(_mpu6050+4)& (0+255),w,b
  8077  005A1A  C12F  F02D         	movff	_mpu6050+3,??_MPU6050_getMotion6
  8078  005A1E  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  8079  005A20  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  8080  005A24  6A2D               	clrf	??_MPU6050_getMotion6,c
  8081  005A26  122D               	iorwf	??_MPU6050_getMotion6,f,c
  8082  005A28  0E00               	movlw	0
  8083  005A2A  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  8084  005A2C  C023  FFD9         	movff	MPU6050_getMotion6@ay,fsr2l
  8085  005A30  C024  FFDA         	movff	MPU6050_getMotion6@ay+1,fsr2h
  8086  005A34  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  8087  005A38  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  8088                           
  8089                           ; BSR set to: 1
  8090                           ;MPU6050.c: 1737: *az = (((int16_t)mpu6050.buffer[4]) << 8) | mpu6050.buffer[5];
  8091  005A3C  5132               	movf	(_mpu6050+6)& (0+255),w,b
  8092  005A3E  C131  F02D         	movff	_mpu6050+5,??_MPU6050_getMotion6
  8093  005A42  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  8094  005A44  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  8095  005A48  6A2D               	clrf	??_MPU6050_getMotion6,c
  8096  005A4A  122D               	iorwf	??_MPU6050_getMotion6,f,c
  8097  005A4C  0E00               	movlw	0
  8098  005A4E  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  8099  005A50  C025  FFD9         	movff	MPU6050_getMotion6@az,fsr2l
  8100  005A54  C026  FFDA         	movff	MPU6050_getMotion6@az+1,fsr2h
  8101  005A58  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  8102  005A5C  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  8103                           
  8104                           ; BSR set to: 1
  8105                           ;MPU6050.c: 1738: *gx = (((int16_t)mpu6050.buffer[8]) << 8) | mpu6050.buffer[9];
  8106  005A60  5136               	movf	(_mpu6050+10)& (0+255),w,b
  8107  005A62  C135  F02D         	movff	_mpu6050+9,??_MPU6050_getMotion6
  8108  005A66  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  8109  005A68  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  8110  005A6C  6A2D               	clrf	??_MPU6050_getMotion6,c
  8111  005A6E  122D               	iorwf	??_MPU6050_getMotion6,f,c
  8112  005A70  0E00               	movlw	0
  8113  005A72  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  8114  005A74  C027  FFD9         	movff	MPU6050_getMotion6@gx,fsr2l
  8115  005A78  C028  FFDA         	movff	MPU6050_getMotion6@gx+1,fsr2h
  8116  005A7C  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  8117  005A80  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  8118                           
  8119                           ; BSR set to: 1
  8120                           ;MPU6050.c: 1739: *gy = (((int16_t)mpu6050.buffer[10]) << 8) | mpu6050.buffer[11];
  8121  005A84  5138               	movf	(_mpu6050+12)& (0+255),w,b
  8122  005A86  C137  F02D         	movff	_mpu6050+11,??_MPU6050_getMotion6
  8123  005A8A  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  8124  005A8C  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  8125  005A90  6A2D               	clrf	??_MPU6050_getMotion6,c
  8126  005A92  122D               	iorwf	??_MPU6050_getMotion6,f,c
  8127  005A94  0E00               	movlw	0
  8128  005A96  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  8129  005A98  C029  FFD9         	movff	MPU6050_getMotion6@gy,fsr2l
  8130  005A9C  C02A  FFDA         	movff	MPU6050_getMotion6@gy+1,fsr2h
  8131  005AA0  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  8132  005AA4  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  8133                           
  8134                           ; BSR set to: 1
  8135                           ;MPU6050.c: 1740: *gz = (((int16_t)mpu6050.buffer[12]) << 8) | mpu6050.buffer[13];
  8136  005AA8  513A               	movf	(_mpu6050+14)& (0+255),w,b
  8137  005AAA  C139  F02D         	movff	_mpu6050+13,??_MPU6050_getMotion6
  8138  005AAE  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  8139  005AB0  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  8140  005AB4  6A2D               	clrf	??_MPU6050_getMotion6,c
  8141  005AB6  122D               	iorwf	??_MPU6050_getMotion6,f,c
  8142  005AB8  0E00               	movlw	0
  8143  005ABA  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  8144  005ABC  C02B  FFD9         	movff	MPU6050_getMotion6@gz,fsr2l
  8145  005AC0  C02C  FFDA         	movff	MPU6050_getMotion6@gz+1,fsr2h
  8146  005AC4  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  8147  005AC8  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  8148                           
  8149                           ; BSR set to: 1
  8150  005ACC  0012               	return		;funcret
  8151  005ACE                     __end_of_MPU6050_getMotion6:
  8152                           	opt stack 0
  8153                           tblptru	equ	0xFF8
  8154                           tblptrh	equ	0xFF7
  8155                           tblptrl	equ	0xFF6
  8156                           tablat	equ	0xFF5
  8157                           prodh	equ	0xFF4
  8158                           prodl	equ	0xFF3
  8159                           postinc0	equ	0xFEE
  8160                           wreg	equ	0xFE8
  8161                           postinc2	equ	0xFDE
  8162                           postdec2	equ	0xFDD
  8163                           fsr2h	equ	0xFDA
  8164                           fsr2l	equ	0xFD9
  8165                           status	equ	0xFD8
  8166                           
  8167 ;; *************** function ___awtoft *****************
  8168 ;; Defined at:
  8169 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  8170 ;; Parameters:    Size  Location     Type
  8171 ;;  c               2    8[COMRAM] int 
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;  sign            1   11[COMRAM] unsigned char 
  8174 ;; Return value:  Size  Location     Type
  8175 ;;                  3    8[COMRAM] float 
  8176 ;; Registers used:
  8177 ;;		wreg, status,2, status,0, cstack
  8178 ;; Tracked objects:
  8179 ;;		On entry : 0/0
  8180 ;;		On exit  : 0/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8183 ;;      Params:         3       0       0       0       0       0       0       0       0
  8184 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8185 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8186 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8187 ;;Total ram usage:        4 bytes
  8188 ;; Hardware stack levels used:    1
  8189 ;; Hardware stack levels required when called:    1
  8190 ;; This function calls:
  8191 ;;		___ftpack
  8192 ;; This function is called by:
  8193 ;;		_calibrate_sensors
  8194 ;;		_main
  8195 ;;		_exp
  8196 ;;		_log
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           	psect	text35
  8201  004C4A                     __ptext35:
  8202                           	opt stack 0
  8203  004C4A                     ___awtoft:
  8204                           	opt stack 27
  8205                           
  8206                           ; BSR set to: 1
  8207                           ;incstack = 0
  8208  004C4A  0E00               	movlw	0
  8209  004C4C  6E0C               	movwf	___awtoft@sign,c
  8210  004C4E  AE0A               	btfss	___awtoft@c+1,7,c
  8211  004C50  D006               	goto	l1522
  8212  004C52  6C09               	negf	___awtoft@c,c
  8213  004C54  1E0A               	comf	___awtoft@c+1,f,c
  8214  004C56  B0D8               	btfsc	status,0,c
  8215  004C58  2A0A               	incf	___awtoft@c+1,f,c
  8216  004C5A  0E01               	movlw	1
  8217  004C5C  6E0C               	movwf	___awtoft@sign,c
  8218  004C5E                     l1522:
  8219  004C5E  C009  F001         	movff	___awtoft@c,___ftpack@arg
  8220  004C62  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  8221  004C66  6A03               	clrf	___ftpack@arg+2,c
  8222  004C68  0E8E               	movlw	142
  8223  004C6A  6E04               	movwf	___ftpack@exp,c
  8224  004C6C  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  8225  004C70  ECF9  F029         	call	___ftpack	;wreg free
  8226  004C74  C001  F009         	movff	?___ftpack,?___awtoft
  8227  004C78  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  8228  004C7C  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  8229  004C80  0012               	return	
  8230  004C82                     __end_of___awtoft:
  8231                           	opt stack 0
  8232                           tblptru	equ	0xFF8
  8233                           tblptrh	equ	0xFF7
  8234                           tblptrl	equ	0xFF6
  8235                           tablat	equ	0xFF5
  8236                           prodh	equ	0xFF4
  8237                           prodl	equ	0xFF3
  8238                           postinc0	equ	0xFEE
  8239                           wreg	equ	0xFE8
  8240                           postinc2	equ	0xFDE
  8241                           postdec2	equ	0xFDD
  8242                           fsr2h	equ	0xFDA
  8243                           fsr2l	equ	0xFD9
  8244                           status	equ	0xFD8
  8245                           
  8246 ;; *************** function _atan *****************
  8247 ;; Defined at:
  8248 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atan.c"
  8249 ;; Parameters:    Size  Location     Type
  8250 ;;  f               3   45[BANK0 ] float 
  8251 ;; Auto vars:     Size  Location     Type
  8252 ;;  val             3   58[BANK0 ] float 
  8253 ;;  val_squared     3   55[BANK0 ] float 
  8254 ;;  x               3   51[BANK0 ] float 
  8255 ;;  y               3   48[BANK0 ] float 
  8256 ;;  recip           1   54[BANK0 ] unsigned char 
  8257 ;; Return value:  Size  Location     Type
  8258 ;;                  3   45[BANK0 ] unsigned char 
  8259 ;; Registers used:
  8260 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8261 ;; Tracked objects:
  8262 ;;		On entry : 0/0
  8263 ;;		On exit  : 0/0
  8264 ;;		Unchanged: 0/0
  8265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8266 ;;      Params:         0       3       0       0       0       0       0       0       0
  8267 ;;      Locals:         0      13       0       0       0       0       0       0       0
  8268 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8269 ;;      Totals:         0      16       0       0       0       0       0       0       0
  8270 ;;Total ram usage:       16 bytes
  8271 ;; Hardware stack levels used:    1
  8272 ;; Hardware stack levels required when called:    3
  8273 ;; This function calls:
  8274 ;;		___ftadd
  8275 ;;		___ftdiv
  8276 ;;		___ftge
  8277 ;;		___ftmul
  8278 ;;		___ftneg
  8279 ;;		_eval_poly
  8280 ;;		_fabs
  8281 ;; This function is called by:
  8282 ;;		_main
  8283 ;; This function uses a non-reentrant model
  8284 ;;
  8285                           
  8286                           	psect	text36
  8287  0063FC                     __ptext36:
  8288                           	opt stack 0
  8289  0063FC                     _atan:
  8290                           	opt stack 27
  8291                           
  8292                           ;incstack = 0
  8293  0063FC  C08D  F004         	movff	atan@f,fabs@d
  8294  006400  C08E  F005         	movff	atan@f+1,fabs@d+1
  8295  006404  C08F  F006         	movff	atan@f+2,fabs@d+2
  8296  006408  EC0D  F026         	call	_fabs	;wreg free
  8297  00640C  C004  F09A         	movff	?_fabs,atan@val
  8298  006410  C005  F09B         	movff	?_fabs+1,atan@val+1
  8299  006414  C006  F09C         	movff	?_fabs+2,atan@val+2
  8300  006418  0100               	movlb	0	; () banked
  8301  00641A  519A               	movf	atan@val& (0+255),w,b
  8302  00641C  119B               	iorwf	(atan@val+1)& (0+255),w,b
  8303  00641E  119C               	iorwf	(atan@val+2)& (0+255),w,b
  8304  006420  A4D8               	btfss	status,2,c
  8305  006422  D007               	goto	l1452
  8306                           
  8307                           ; BSR set to: 0
  8308  006424  0E00               	movlw	0
  8309  006426  6F8D               	movwf	?_atan& (0+255),b
  8310  006428  0E00               	movlw	0
  8311  00642A  6F8E               	movwf	(?_atan+1)& (0+255),b
  8312  00642C  0E00               	movlw	0
  8313  00642E  6F8F               	movwf	(?_atan+2)& (0+255),b
  8314                           
  8315                           ; BSR set to: 0
  8316  006430  0012               	return	
  8317  006432                     l1452:
  8318                           
  8319                           ; BSR set to: 0
  8320                           
  8321                           ; BSR set to: 0
  8322  006432  0E00               	movlw	0
  8323  006434  6E01               	movwf	___ftge@ff1,c
  8324  006436  0E80               	movlw	128
  8325  006438  6E02               	movwf	___ftge@ff1+1,c
  8326  00643A  0E3F               	movlw	63
  8327  00643C  6E03               	movwf	___ftge@ff1+2,c
  8328  00643E  C09A  F004         	movff	atan@val,___ftge@ff2
  8329  006442  C09B  F005         	movff	atan@val+1,___ftge@ff2+1
  8330  006446  C09C  F006         	movff	atan@val+2,___ftge@ff2+2
  8331  00644A  EC69  F029         	call	___ftge	;wreg free
  8332  00644E  B0D8               	btfsc	status,0,c
  8333  006450  D002               	goto	u4610
  8334  006452  0E01               	movlw	1
  8335  006454  D001               	goto	u4620
  8336  006456                     u4610:
  8337  006456  0E00               	movlw	0
  8338  006458                     u4620:
  8339  006458  0100               	movlb	0	; () banked
  8340  00645A  6F96               	movwf	atan@recip& (0+255),b
  8341  00645C  5196               	movf	atan@recip& (0+255),w,b
  8342  00645E  B4D8               	btfsc	status,2,c
  8343  006460  D014               	goto	l1454
  8344                           
  8345                           ; BSR set to: 0
  8346  006462  0E00               	movlw	0
  8347  006464  6E50               	movwf	___ftdiv@f1,c
  8348  006466  0E80               	movlw	128
  8349  006468  6E51               	movwf	___ftdiv@f1+1,c
  8350  00646A  0E3F               	movlw	63
  8351  00646C  6E52               	movwf	___ftdiv@f1+2,c
  8352  00646E  C09A  F053         	movff	atan@val,___ftdiv@f2
  8353  006472  C09B  F054         	movff	atan@val+1,___ftdiv@f2+1
  8354  006476  C09C  F055         	movff	atan@val+2,___ftdiv@f2+2
  8355  00647A  EC8B  F02B         	call	___ftdiv	;wreg free
  8356  00647E  C050  F09A         	movff	?___ftdiv,atan@val
  8357  006482  C051  F09B         	movff	?___ftdiv+1,atan@val+1
  8358  006486  C052  F09C         	movff	?___ftdiv+2,atan@val+2
  8359  00648A                     l1454:
  8360  00648A  C09A  F021         	movff	atan@val,___ftmul@f1
  8361  00648E  C09B  F022         	movff	atan@val+1,___ftmul@f1+1
  8362  006492  C09C  F023         	movff	atan@val+2,___ftmul@f1+2
  8363  006496  C09A  F024         	movff	atan@val,___ftmul@f2
  8364  00649A  C09B  F025         	movff	atan@val+1,___ftmul@f2+1
  8365  00649E  C09C  F026         	movff	atan@val+2,___ftmul@f2+2
  8366  0064A2  EC73  F02C         	call	___ftmul	;wreg free
  8367  0064A6  C021  F097         	movff	?___ftmul,atan@val_squared
  8368  0064AA  C022  F098         	movff	?___ftmul+1,atan@val_squared+1
  8369  0064AE  C023  F099         	movff	?___ftmul+2,atan@val_squared+2
  8370  0064B2  C097  F030         	movff	atan@val_squared,eval_poly@x
  8371  0064B6  C098  F031         	movff	atan@val_squared+1,eval_poly@x+1
  8372  0064BA  C099  F032         	movff	atan@val_squared+2,eval_poly@x+2
  8373  0064BE  0EB6               	movlw	low atan@coeff_b
  8374  0064C0  6E33               	movwf	eval_poly@d,c
  8375  0064C2  0E7F               	movlw	high atan@coeff_b
  8376  0064C4  6E34               	movwf	eval_poly@d+1,c
  8377  0064C6  0E00               	movlw	0
  8378  0064C8  6E36               	movwf	eval_poly@n+1,c
  8379  0064CA  0E04               	movlw	4
  8380  0064CC  6E35               	movwf	eval_poly@n,c
  8381  0064CE  ECB3  F02A         	call	_eval_poly	;wreg free
  8382  0064D2  C030  F090         	movff	?_eval_poly,atan@y
  8383  0064D6  C031  F091         	movff	?_eval_poly+1,atan@y+1
  8384  0064DA  C032  F092         	movff	?_eval_poly+2,atan@y+2
  8385  0064DE  C097  F030         	movff	atan@val_squared,eval_poly@x
  8386  0064E2  C098  F031         	movff	atan@val_squared+1,eval_poly@x+1
  8387  0064E6  C099  F032         	movff	atan@val_squared+2,eval_poly@x+2
  8388  0064EA  0EA4               	movlw	low atan@coeff_a
  8389  0064EC  6E33               	movwf	eval_poly@d,c
  8390  0064EE  0E7F               	movlw	high atan@coeff_a
  8391  0064F0  6E34               	movwf	eval_poly@d+1,c
  8392  0064F2  0E00               	movlw	0
  8393  0064F4  6E36               	movwf	eval_poly@n+1,c
  8394  0064F6  0E05               	movlw	5
  8395  0064F8  6E35               	movwf	eval_poly@n,c
  8396  0064FA  ECB3  F02A         	call	_eval_poly	;wreg free
  8397  0064FE  C030  F093         	movff	?_eval_poly,atan@x
  8398  006502  C031  F094         	movff	?_eval_poly+1,atan@x+1
  8399  006506  C032  F095         	movff	?_eval_poly+2,atan@x+2
  8400  00650A  C09A  F021         	movff	atan@val,___ftmul@f1
  8401  00650E  C09B  F022         	movff	atan@val+1,___ftmul@f1+1
  8402  006512  C09C  F023         	movff	atan@val+2,___ftmul@f1+2
  8403  006516  C090  F053         	movff	atan@y,___ftdiv@f2
  8404  00651A  C091  F054         	movff	atan@y+1,___ftdiv@f2+1
  8405  00651E  C092  F055         	movff	atan@y+2,___ftdiv@f2+2
  8406  006522  C093  F050         	movff	atan@x,___ftdiv@f1
  8407  006526  C094  F051         	movff	atan@x+1,___ftdiv@f1+1
  8408  00652A  C095  F052         	movff	atan@x+2,___ftdiv@f1+2
  8409  00652E  EC8B  F02B         	call	___ftdiv	;wreg free
  8410  006532  C050  F024         	movff	?___ftdiv,___ftmul@f2
  8411  006536  C051  F025         	movff	?___ftdiv+1,___ftmul@f2+1
  8412  00653A  C052  F026         	movff	?___ftdiv+2,___ftmul@f2+2
  8413  00653E  EC73  F02C         	call	___ftmul	;wreg free
  8414  006542  C021  F09A         	movff	?___ftmul,atan@val
  8415  006546  C022  F09B         	movff	?___ftmul+1,atan@val+1
  8416  00654A  C023  F09C         	movff	?___ftmul+2,atan@val+2
  8417  00654E  0100               	movlb	0	; () banked
  8418  006550  5196               	movf	atan@recip& (0+255),w,b
  8419  006552  B4D8               	btfsc	status,2,c
  8420  006554  D01C               	goto	l1455
  8421                           
  8422                           ; BSR set to: 0
  8423  006556  C09A  F001         	movff	atan@val,___ftneg@f1
  8424  00655A  C09B  F002         	movff	atan@val+1,___ftneg@f1+1
  8425  00655E  C09C  F003         	movff	atan@val+2,___ftneg@f1+2
  8426  006562  ECD5  F025         	call	___ftneg	;wreg free
  8427  006566  C001  F015         	movff	?___ftneg,___ftadd@f1
  8428  00656A  C002  F016         	movff	?___ftneg+1,___ftadd@f1+1
  8429  00656E  C003  F017         	movff	?___ftneg+2,___ftadd@f1+2
  8430  006572  0E10               	movlw	16
  8431  006574  6E18               	movwf	___ftadd@f2,c
  8432  006576  0EC9               	movlw	201
  8433  006578  6E19               	movwf	___ftadd@f2+1,c
  8434  00657A  0E3F               	movlw	63
  8435  00657C  6E1A               	movwf	___ftadd@f2+2,c
  8436  00657E  EC28  F031         	call	___ftadd	;wreg free
  8437  006582  C015  F09A         	movff	?___ftadd,atan@val
  8438  006586  C016  F09B         	movff	?___ftadd+1,atan@val+1
  8439  00658A  C017  F09C         	movff	?___ftadd+2,atan@val+2
  8440  00658E                     l1455:
  8441  00658E  0100               	movlb	0	; () banked
  8442  006590  BF8F               	btfsc	(atan@f+2)& (0+255),7,b
  8443  006592  D007               	goto	l1457
  8444                           
  8445                           ; BSR set to: 0
  8446  006594  C09A  F08D         	movff	atan@val,?_atan
  8447  006598  C09B  F08E         	movff	atan@val+1,?_atan+1
  8448  00659C  C09C  F08F         	movff	atan@val+2,?_atan+2
  8449  0065A0  0012               	return	
  8450  0065A2                     l1457:
  8451                           
  8452                           ; BSR set to: 0
  8453                           
  8454                           ; BSR set to: 0
  8455  0065A2  C09A  F001         	movff	atan@val,___ftneg@f1
  8456  0065A6  C09B  F002         	movff	atan@val+1,___ftneg@f1+1
  8457  0065AA  C09C  F003         	movff	atan@val+2,___ftneg@f1+2
  8458  0065AE  ECD5  F025         	call	___ftneg	;wreg free
  8459  0065B2  C001  F08D         	movff	?___ftneg,?_atan
  8460  0065B6  C002  F08E         	movff	?___ftneg+1,?_atan+1
  8461  0065BA  C003  F08F         	movff	?___ftneg+2,?_atan+2
  8462  0065BE  0012               	return	
  8463  0065C0                     __end_of_atan:
  8464                           	opt stack 0
  8465                           tblptru	equ	0xFF8
  8466                           tblptrh	equ	0xFF7
  8467                           tblptrl	equ	0xFF6
  8468                           tablat	equ	0xFF5
  8469                           prodh	equ	0xFF4
  8470                           prodl	equ	0xFF3
  8471                           postinc0	equ	0xFEE
  8472                           wreg	equ	0xFE8
  8473                           postinc2	equ	0xFDE
  8474                           postdec2	equ	0xFDD
  8475                           fsr2h	equ	0xFDA
  8476                           fsr2l	equ	0xFD9
  8477                           status	equ	0xFD8
  8478                           
  8479 ;; *************** function _fabs *****************
  8480 ;; Defined at:
  8481 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fabs.c"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;  d               3    3[COMRAM] unsigned char 
  8484 ;; Auto vars:     Size  Location     Type
  8485 ;;		None
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  3    3[COMRAM] unsigned char 
  8488 ;; Registers used:
  8489 ;;		wreg, status,2, status,0, cstack
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8495 ;;      Params:         3       0       0       0       0       0       0       0       0
  8496 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8497 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8498 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8499 ;;Total ram usage:        3 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:    1
  8502 ;; This function calls:
  8503 ;;		___ftneg
  8504 ;; This function is called by:
  8505 ;;		_atan
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           	psect	text37
  8510  004C1A                     __ptext37:
  8511                           	opt stack 0
  8512  004C1A                     _fabs:
  8513                           	opt stack 28
  8514                           
  8515                           ;incstack = 0
  8516  004C1A  AE06               	btfss	fabs@d+2,7,c
  8517  004C1C  D00F               	goto	l1532
  8518  004C1E  C004  F001         	movff	fabs@d,___ftneg@f1
  8519  004C22  C005  F002         	movff	fabs@d+1,___ftneg@f1+1
  8520  004C26  C006  F003         	movff	fabs@d+2,___ftneg@f1+2
  8521  004C2A  ECD5  F025         	call	___ftneg	;wreg free
  8522  004C2E  C001  F004         	movff	?___ftneg,?_fabs
  8523  004C32  C002  F005         	movff	?___ftneg+1,?_fabs+1
  8524  004C36  C003  F006         	movff	?___ftneg+2,?_fabs+2
  8525  004C3A  0012               	return	
  8526  004C3C                     l1532:
  8527  004C3C  C004  F004         	movff	fabs@d,?_fabs
  8528  004C40  C005  F005         	movff	fabs@d+1,?_fabs+1
  8529  004C44  C006  F006         	movff	fabs@d+2,?_fabs+2
  8530  004C48  0012               	return		;funcret
  8531  004C4A                     __end_of_fabs:
  8532                           	opt stack 0
  8533                           tblptru	equ	0xFF8
  8534                           tblptrh	equ	0xFF7
  8535                           tblptrl	equ	0xFF6
  8536                           tablat	equ	0xFF5
  8537                           prodh	equ	0xFF4
  8538                           prodl	equ	0xFF3
  8539                           postinc0	equ	0xFEE
  8540                           wreg	equ	0xFE8
  8541                           postinc2	equ	0xFDE
  8542                           postdec2	equ	0xFDD
  8543                           fsr2h	equ	0xFDA
  8544                           fsr2l	equ	0xFD9
  8545                           status	equ	0xFD8
  8546                           
  8547 ;; *************** function ___ftneg *****************
  8548 ;; Defined at:
  8549 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;  f1              3    0[COMRAM] float 
  8552 ;; Auto vars:     Size  Location     Type
  8553 ;;		None
  8554 ;; Return value:  Size  Location     Type
  8555 ;;                  3    0[COMRAM] float 
  8556 ;; Registers used:
  8557 ;;		wreg, status,2, status,0
  8558 ;; Tracked objects:
  8559 ;;		On entry : 0/0
  8560 ;;		On exit  : 0/0
  8561 ;;		Unchanged: 0/0
  8562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8563 ;;      Params:         3       0       0       0       0       0       0       0       0
  8564 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8565 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8566 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8567 ;;Total ram usage:        3 bytes
  8568 ;; Hardware stack levels used:    1
  8569 ;; This function calls:
  8570 ;;		Nothing
  8571 ;; This function is called by:
  8572 ;;		_main
  8573 ;;		_printf
  8574 ;;		_atan
  8575 ;;		_fabs
  8576 ;;		_pow
  8577 ;;		_exp
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           	psect	text38
  8582  004BAA                     __ptext38:
  8583                           	opt stack 0
  8584  004BAA                     ___ftneg:
  8585                           	opt stack 29
  8586                           
  8587                           ;incstack = 0
  8588  004BAA  5001               	movf	___ftneg@f1,w,c
  8589  004BAC  1002               	iorwf	___ftneg@f1+1,w,c
  8590  004BAE  1003               	iorwf	___ftneg@f1+2,w,c
  8591  004BB0  B4D8               	btfsc	status,2,c
  8592  004BB2  D006               	goto	l1675
  8593  004BB4  0E00               	movlw	0
  8594  004BB6  1A01               	xorwf	___ftneg@f1,f,c
  8595  004BB8  0E00               	movlw	0
  8596  004BBA  1A02               	xorwf	___ftneg@f1+1,f,c
  8597  004BBC  0E80               	movlw	128
  8598  004BBE  1A03               	xorwf	___ftneg@f1+2,f,c
  8599  004BC0                     l1675:
  8600  004BC0  C001  F001         	movff	___ftneg@f1,?___ftneg
  8601  004BC4  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  8602  004BC8  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  8603  004BCC  0012               	return		;funcret
  8604  004BCE                     __end_of___ftneg:
  8605                           	opt stack 0
  8606                           tblptru	equ	0xFF8
  8607                           tblptrh	equ	0xFF7
  8608                           tblptrl	equ	0xFF6
  8609                           tablat	equ	0xFF5
  8610                           prodh	equ	0xFF4
  8611                           prodl	equ	0xFF3
  8612                           postinc0	equ	0xFEE
  8613                           wreg	equ	0xFE8
  8614                           postinc2	equ	0xFDE
  8615                           postdec2	equ	0xFDD
  8616                           fsr2h	equ	0xFDA
  8617                           fsr2l	equ	0xFD9
  8618                           status	equ	0xFD8
  8619                           
  8620 ;; *************** function _eval_poly *****************
  8621 ;; Defined at:
  8622 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8623 ;; Parameters:    Size  Location     Type
  8624 ;;  x               3   47[COMRAM] float 
  8625 ;;  d               2   50[COMRAM] PTR const 
  8626 ;;		 -> log@coeff(27), exp@coeff(30), atan@coeff_a(18), atan@coeff_b(15), 
  8627 ;;  n               2   52[COMRAM] int 
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;  res             3   56[COMRAM] int 
  8630 ;; Return value:  Size  Location     Type
  8631 ;;                  3   47[COMRAM] int 
  8632 ;; Registers used:
  8633 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8634 ;; Tracked objects:
  8635 ;;		On entry : 0/0
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8639 ;;      Params:         7       0       0       0       0       0       0       0       0
  8640 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8641 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8642 ;;      Totals:        12       0       0       0       0       0       0       0       0
  8643 ;;Total ram usage:       12 bytes
  8644 ;; Hardware stack levels used:    1
  8645 ;; Hardware stack levels required when called:    2
  8646 ;; This function calls:
  8647 ;;		___ftadd
  8648 ;;		___ftmul
  8649 ;;		___wmul
  8650 ;; This function is called by:
  8651 ;;		_atan
  8652 ;;		_exp
  8653 ;;		_log
  8654 ;; This function uses a non-reentrant model
  8655 ;;
  8656                           
  8657                           	psect	text39
  8658  005566                     __ptext39:
  8659                           	opt stack 0
  8660  005566                     _eval_poly:
  8661                           	opt stack 26
  8662                           
  8663                           ;incstack = 0
  8664  005566  C035  F00F         	movff	eval_poly@n,___wmul@multiplier
  8665  00556A  C036  F010         	movff	eval_poly@n+1,___wmul@multiplier+1
  8666  00556E  0E00               	movlw	0
  8667  005570  6E12               	movwf	___wmul@multiplicand+1,c
  8668  005572  0E03               	movlw	3
  8669  005574  6E11               	movwf	___wmul@multiplicand,c
  8670  005576  ECE7  F025         	call	___wmul	;wreg free
  8671  00557A  C033  F037         	movff	eval_poly@d,??_eval_poly
  8672  00557E  C034  F038         	movff	eval_poly@d+1,??_eval_poly+1
  8673  005582  500F               	movf	?___wmul,w,c
  8674  005584  2637               	addwf	??_eval_poly,f,c
  8675  005586  5010               	movf	?___wmul+1,w,c
  8676  005588  2238               	addwfc	??_eval_poly+1,f,c
  8677  00558A  C037  FFF6         	movff	??_eval_poly,tblptrl
  8678  00558E  C038  FFF7         	movff	??_eval_poly+1,tblptrh
  8679  005592                     	if	0	;tblptru may be non-zero
  8680  005592                     	endif
  8681  005592                     	if	0	;tblptru may be non-zero
  8682  005592                     	endif
  8683  005592  0009               	tblrd		*+
  8684  005594  CFF5 F039          	movff	tablat,eval_poly@res
  8685  005598  0009               	tblrd		*+
  8686  00559A  CFF5 F03A          	movff	tablat,eval_poly@res+1
  8687  00559E  000A               	tblrd		*-
  8688  0055A0  CFF5 F03B          	movff	tablat,eval_poly@res+2
  8689  0055A4  D03E               	goto	l1526
  8690  0055A6  C039  F024         	movff	eval_poly@res,___ftmul@f2
  8691  0055AA  C03A  F025         	movff	eval_poly@res+1,___ftmul@f2+1
  8692  0055AE  C03B  F026         	movff	eval_poly@res+2,___ftmul@f2+2
  8693  0055B2  C030  F021         	movff	eval_poly@x,___ftmul@f1
  8694  0055B6  C031  F022         	movff	eval_poly@x+1,___ftmul@f1+1
  8695  0055BA  C032  F023         	movff	eval_poly@x+2,___ftmul@f1+2
  8696  0055BE  EC73  F02C         	call	___ftmul	;wreg free
  8697  0055C2  C021  F015         	movff	?___ftmul,___ftadd@f1
  8698  0055C6  C022  F016         	movff	?___ftmul+1,___ftadd@f1+1
  8699  0055CA  C023  F017         	movff	?___ftmul+2,___ftadd@f1+2
  8700  0055CE  0E00               	movlw	0
  8701  0055D0  6E12               	movwf	___wmul@multiplicand+1,c
  8702  0055D2  0E03               	movlw	3
  8703  0055D4  6E11               	movwf	___wmul@multiplicand,c
  8704  0055D6  0635               	decf	eval_poly@n,f,c
  8705  0055D8  A0D8               	btfss	status,0,c
  8706  0055DA  0636               	decf	eval_poly@n+1,f,c
  8707  0055DC  C035  F00F         	movff	eval_poly@n,___wmul@multiplier
  8708  0055E0  C036  F010         	movff	eval_poly@n+1,___wmul@multiplier+1
  8709  0055E4  ECE7  F025         	call	___wmul	;wreg free
  8710  0055E8  C033  F037         	movff	eval_poly@d,??_eval_poly
  8711  0055EC  C034  F038         	movff	eval_poly@d+1,??_eval_poly+1
  8712  0055F0  500F               	movf	?___wmul,w,c
  8713  0055F2  2637               	addwf	??_eval_poly,f,c
  8714  0055F4  5010               	movf	?___wmul+1,w,c
  8715  0055F6  2238               	addwfc	??_eval_poly+1,f,c
  8716  0055F8  C037  FFF6         	movff	??_eval_poly,tblptrl
  8717  0055FC  C038  FFF7         	movff	??_eval_poly+1,tblptrh
  8718  005600                     	if	0	;tblptru may be non-zero
  8719  005600                     	endif
  8720  005600                     	if	0	;tblptru may be non-zero
  8721  005600                     	endif
  8722  005600  0009               	tblrd		*+
  8723  005602  CFF5 F018          	movff	tablat,___ftadd@f2
  8724  005606  0009               	tblrd		*+
  8725  005608  CFF5 F019          	movff	tablat,___ftadd@f2+1
  8726  00560C  000A               	tblrd		*-
  8727  00560E  CFF5 F01A          	movff	tablat,___ftadd@f2+2
  8728  005612  EC28  F031         	call	___ftadd	;wreg free
  8729  005616  C015  F039         	movff	?___ftadd,eval_poly@res
  8730  00561A  C016  F03A         	movff	?___ftadd+1,eval_poly@res+1
  8731  00561E  C017  F03B         	movff	?___ftadd+2,eval_poly@res+2
  8732  005622                     l1526:
  8733  005622  5035               	movf	eval_poly@n,w,c
  8734  005624  1036               	iorwf	eval_poly@n+1,w,c
  8735  005626  A4D8               	btfss	status,2,c
  8736  005628  D7BE               	goto	l1527
  8737  00562A  C039  F030         	movff	eval_poly@res,?_eval_poly
  8738  00562E  C03A  F031         	movff	eval_poly@res+1,?_eval_poly+1
  8739  005632  C03B  F032         	movff	eval_poly@res+2,?_eval_poly+2
  8740  005636  0012               	return		;funcret
  8741  005638                     __end_of_eval_poly:
  8742                           	opt stack 0
  8743                           tblptru	equ	0xFF8
  8744                           tblptrh	equ	0xFF7
  8745                           tblptrl	equ	0xFF6
  8746                           tablat	equ	0xFF5
  8747                           prodh	equ	0xFF4
  8748                           prodl	equ	0xFF3
  8749                           postinc0	equ	0xFEE
  8750                           wreg	equ	0xFE8
  8751                           postinc2	equ	0xFDE
  8752                           postdec2	equ	0xFDD
  8753                           fsr2h	equ	0xFDA
  8754                           fsr2l	equ	0xFD9
  8755                           status	equ	0xFD8
  8756                           
  8757 ;; *************** function ___ftmul *****************
  8758 ;; Defined at:
  8759 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;  f1              3   32[COMRAM] float 
  8762 ;;  f2              3   35[COMRAM] float 
  8763 ;; Auto vars:     Size  Location     Type
  8764 ;;  f3_as_produc    3   42[COMRAM] unsigned um
  8765 ;;  sign            1   46[COMRAM] unsigned char 
  8766 ;;  cntr            1   45[COMRAM] unsigned char 
  8767 ;;  exp             1   41[COMRAM] unsigned char 
  8768 ;; Return value:  Size  Location     Type
  8769 ;;                  3   32[COMRAM] float 
  8770 ;; Registers used:
  8771 ;;		wreg, status,2, status,0, cstack
  8772 ;; Tracked objects:
  8773 ;;		On entry : 0/0
  8774 ;;		On exit  : 0/0
  8775 ;;		Unchanged: 0/0
  8776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8777 ;;      Params:         6       0       0       0       0       0       0       0       0
  8778 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8779 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8780 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8781 ;;Total ram usage:       15 bytes
  8782 ;; Hardware stack levels used:    1
  8783 ;; Hardware stack levels required when called:    1
  8784 ;; This function calls:
  8785 ;;		___ftpack
  8786 ;; This function is called by:
  8787 ;;		_main
  8788 ;;		_fround
  8789 ;;		_scale
  8790 ;;		_printf
  8791 ;;		_atan
  8792 ;;		_eval_poly
  8793 ;;		_pow
  8794 ;;		_sqrt
  8795 ;;		_exp
  8796 ;;		_log
  8797 ;; This function uses a non-reentrant model
  8798 ;;
  8799                           
  8800                           	psect	text40
  8801  0058E6                     __ptext40:
  8802                           	opt stack 0
  8803  0058E6                     ___ftmul:
  8804                           	opt stack 28
  8805                           
  8806                           ;incstack = 0
  8807  0058E6  C023  F027         	movff	___ftmul@f1+2,??___ftmul
  8808  0058EA  6A28               	clrf	(??___ftmul+1)& (0+255),c
  8809  0058EC  6A29               	clrf	(??___ftmul+2)& (0+255),c
  8810  0058EE  3422               	rlcf	___ftmul@f1+1,w,c
  8811  0058F0  3627               	rlcf	??___ftmul& (0+255),f,c
  8812  0058F2  E301               	bnc	u3071
  8813  0058F4  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  8814  0058F6                     u3071:
  8815  0058F6  5027               	movf	??___ftmul,w,c
  8816  0058F8  6E2A               	movwf	___ftmul@exp,c
  8817  0058FA  502A               	movf	___ftmul@exp,w,c
  8818  0058FC  A4D8               	btfss	status,2,c
  8819  0058FE  D007               	goto	l1664
  8820  005900  0E00               	movlw	0
  8821  005902  6E21               	movwf	?___ftmul,c
  8822  005904  0E00               	movlw	0
  8823  005906  6E22               	movwf	?___ftmul+1,c
  8824  005908  0E00               	movlw	0
  8825  00590A  6E23               	movwf	?___ftmul+2,c
  8826  00590C  0012               	return	
  8827  00590E                     l1664:
  8828  00590E  C026  F027         	movff	___ftmul@f2+2,??___ftmul
  8829  005912  6A28               	clrf	(??___ftmul+1)& (0+255),c
  8830  005914  6A29               	clrf	(??___ftmul+2)& (0+255),c
  8831  005916  3425               	rlcf	___ftmul@f2+1,w,c
  8832  005918  3627               	rlcf	??___ftmul& (0+255),f,c
  8833  00591A  E301               	bnc	u3091
  8834  00591C  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  8835  00591E                     u3091:
  8836  00591E  5027               	movf	??___ftmul,w,c
  8837  005920  6E2F               	movwf	___ftmul@sign,c
  8838  005922  502F               	movf	___ftmul@sign,w,c
  8839  005924  A4D8               	btfss	status,2,c
  8840  005926  D007               	goto	l1666
  8841  005928  0E00               	movlw	0
  8842  00592A  6E21               	movwf	?___ftmul,c
  8843  00592C  0E00               	movlw	0
  8844  00592E  6E22               	movwf	?___ftmul+1,c
  8845  005930  0E00               	movlw	0
  8846  005932  6E23               	movwf	?___ftmul+2,c
  8847  005934  0012               	return	
  8848  005936                     l1666:
  8849  005936  502F               	movf	___ftmul@sign,w,c
  8850  005938  0F7B               	addlw	123
  8851  00593A  262A               	addwf	___ftmul@exp,f,c
  8852  00593C  C023  F02F         	movff	___ftmul@f1+2,___ftmul@sign
  8853  005940  5026               	movf	___ftmul@f2+2,w,c
  8854  005942  1A2F               	xorwf	___ftmul@sign,f,c
  8855  005944  0E80               	movlw	128
  8856  005946  162F               	andwf	___ftmul@sign,f,c
  8857  005948  8E22               	bsf	___ftmul@f1+1,7,c
  8858  00594A  8E25               	bsf	___ftmul@f2+1,7,c
  8859  00594C  0EFF               	movlw	255
  8860  00594E  1624               	andwf	___ftmul@f2,f,c
  8861  005950  0EFF               	movlw	255
  8862  005952  1625               	andwf	___ftmul@f2+1,f,c
  8863  005954  0E00               	movlw	0
  8864  005956  1626               	andwf	___ftmul@f2+2,f,c
  8865  005958  0E00               	movlw	0
  8866  00595A  6E2B               	movwf	___ftmul@f3_as_product,c
  8867  00595C  0E00               	movlw	0
  8868  00595E  6E2C               	movwf	___ftmul@f3_as_product+1,c
  8869  005960  0E00               	movlw	0
  8870  005962  6E2D               	movwf	___ftmul@f3_as_product+2,c
  8871  005964  0E07               	movlw	7
  8872  005966  6E2E               	movwf	___ftmul@cntr,c
  8873  005968  A021               	btfss	___ftmul@f1,0,c
  8874  00596A  D006               	goto	l1668
  8875  00596C  5024               	movf	___ftmul@f2,w,c
  8876  00596E  262B               	addwf	___ftmul@f3_as_product,f,c
  8877  005970  5025               	movf	___ftmul@f2+1,w,c
  8878  005972  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  8879  005974  5026               	movf	___ftmul@f2+2,w,c
  8880  005976  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  8881  005978                     l1668:
  8882  005978  90D8               	bcf	status,0,c
  8883  00597A  3223               	rrcf	___ftmul@f1+2,f,c
  8884  00597C  3222               	rrcf	___ftmul@f1+1,f,c
  8885  00597E  3221               	rrcf	___ftmul@f1,f,c
  8886  005980  90D8               	bcf	status,0,c
  8887  005982  3624               	rlcf	___ftmul@f2,f,c
  8888  005984  3625               	rlcf	___ftmul@f2+1,f,c
  8889  005986  3626               	rlcf	___ftmul@f2+2,f,c
  8890  005988  2E2E               	decfsz	___ftmul@cntr,f,c
  8891  00598A  D7EE               	goto	l1667
  8892  00598C  0E09               	movlw	9
  8893  00598E  6E2E               	movwf	___ftmul@cntr,c
  8894  005990  A021               	btfss	___ftmul@f1,0,c
  8895  005992  D006               	goto	l1671
  8896  005994  5024               	movf	___ftmul@f2,w,c
  8897  005996  262B               	addwf	___ftmul@f3_as_product,f,c
  8898  005998  5025               	movf	___ftmul@f2+1,w,c
  8899  00599A  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  8900  00599C  5026               	movf	___ftmul@f2+2,w,c
  8901  00599E  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  8902  0059A0                     l1671:
  8903  0059A0  90D8               	bcf	status,0,c
  8904  0059A2  3223               	rrcf	___ftmul@f1+2,f,c
  8905  0059A4  3222               	rrcf	___ftmul@f1+1,f,c
  8906  0059A6  3221               	rrcf	___ftmul@f1,f,c
  8907  0059A8  90D8               	bcf	status,0,c
  8908  0059AA  322D               	rrcf	___ftmul@f3_as_product+2,f,c
  8909  0059AC  322C               	rrcf	___ftmul@f3_as_product+1,f,c
  8910  0059AE  322B               	rrcf	___ftmul@f3_as_product,f,c
  8911  0059B0  2E2E               	decfsz	___ftmul@cntr,f,c
  8912  0059B2  D7EE               	goto	l1670
  8913  0059B4  C02B  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  8914  0059B8  C02C  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8915  0059BC  C02D  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8916  0059C0  C02A  F004         	movff	___ftmul@exp,___ftpack@exp
  8917  0059C4  C02F  F005         	movff	___ftmul@sign,___ftpack@sign
  8918  0059C8  ECF9  F029         	call	___ftpack	;wreg free
  8919  0059CC  C001  F021         	movff	?___ftpack,?___ftmul
  8920  0059D0  C002  F022         	movff	?___ftpack+1,?___ftmul+1
  8921  0059D4  C003  F023         	movff	?___ftpack+2,?___ftmul+2
  8922  0059D8  0012               	return	
  8923  0059DA                     __end_of___ftmul:
  8924                           	opt stack 0
  8925                           tblptru	equ	0xFF8
  8926                           tblptrh	equ	0xFF7
  8927                           tblptrl	equ	0xFF6
  8928                           tablat	equ	0xFF5
  8929                           prodh	equ	0xFF4
  8930                           prodl	equ	0xFF3
  8931                           postinc0	equ	0xFEE
  8932                           wreg	equ	0xFE8
  8933                           postinc2	equ	0xFDE
  8934                           postdec2	equ	0xFDD
  8935                           fsr2h	equ	0xFDA
  8936                           fsr2l	equ	0xFD9
  8937                           status	equ	0xFD8
  8938                           
  8939 ;; *************** function ___ftadd *****************
  8940 ;; Defined at:
  8941 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;  f1              3   20[COMRAM] float 
  8944 ;;  f2              3   23[COMRAM] float 
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;  exp1            1   31[COMRAM] unsigned char 
  8947 ;;  exp2            1   30[COMRAM] unsigned char 
  8948 ;;  sign            1   29[COMRAM] unsigned char 
  8949 ;; Return value:  Size  Location     Type
  8950 ;;                  3   20[COMRAM] float 
  8951 ;; Registers used:
  8952 ;;		wreg, status,2, status,0, cstack
  8953 ;; Tracked objects:
  8954 ;;		On entry : 0/0
  8955 ;;		On exit  : 0/0
  8956 ;;		Unchanged: 0/0
  8957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8958 ;;      Params:         6       0       0       0       0       0       0       0       0
  8959 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8960 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8961 ;;      Totals:        12       0       0       0       0       0       0       0       0
  8962 ;;Total ram usage:       12 bytes
  8963 ;; Hardware stack levels used:    1
  8964 ;; Hardware stack levels required when called:    1
  8965 ;; This function calls:
  8966 ;;		___ftpack
  8967 ;; This function is called by:
  8968 ;;		_calibrate_sensors
  8969 ;;		_main
  8970 ;;		_USART_Init
  8971 ;;		_printf
  8972 ;;		_atan
  8973 ;;		_eval_poly
  8974 ;;		___ftsub
  8975 ;;		_floor
  8976 ;;		_log
  8977 ;; This function uses a non-reentrant model
  8978 ;;
  8979                           
  8980                           	psect	text41
  8981  006250                     __ptext41:
  8982                           	opt stack 0
  8983  006250                     ___ftadd:
  8984                           	opt stack 27
  8985                           
  8986                           ;incstack = 0
  8987  006250  C017  F01B         	movff	___ftadd@f1+2,??___ftadd
  8988  006254  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  8989  006256  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  8990  006258  3416               	rlcf	___ftadd@f1+1,w,c
  8991  00625A  361B               	rlcf	??___ftadd& (0+255),f,c
  8992  00625C  E301               	bnc	u2861
  8993  00625E  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  8994  006260                     u2861:
  8995  006260  501B               	movf	??___ftadd,w,c
  8996  006262  6E20               	movwf	___ftadd@exp1,c
  8997  006264  C01A  F01B         	movff	___ftadd@f2+2,??___ftadd
  8998  006268  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  8999  00626A  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  9000  00626C  3419               	rlcf	___ftadd@f2+1,w,c
  9001  00626E  361B               	rlcf	??___ftadd& (0+255),f,c
  9002  006270  E301               	bnc	u2871
  9003  006272  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  9004  006274                     u2871:
  9005  006274  501B               	movf	??___ftadd,w,c
  9006  006276  6E1F               	movwf	___ftadd@exp2,c
  9007  006278  5020               	movf	___ftadd@exp1,w,c
  9008  00627A  B4D8               	btfsc	status,2,c
  9009  00627C  D00B               	goto	u2900
  9010  00627E  501F               	movf	___ftadd@exp2,w,c
  9011  006280  5C20               	subwf	___ftadd@exp1,w,c
  9012  006282  B0D8               	btfsc	status,0,c
  9013  006284  D00E               	goto	l1599
  9014  006286  5020               	movf	___ftadd@exp1,w,c
  9015  006288  0800               	sublw	0
  9016  00628A  241F               	addwf	___ftadd@exp2,w,c
  9017  00628C  6E1B               	movwf	??___ftadd& (0+255),c
  9018  00628E  0E18               	movlw	24
  9019  006290  641B               	cpfsgt	??___ftadd,c
  9020  006292  D007               	goto	l1599
  9021  006294                     u2900:
  9022  006294  C018  F015         	movff	___ftadd@f2,?___ftadd
  9023  006298  C019  F016         	movff	___ftadd@f2+1,?___ftadd+1
  9024  00629C  C01A  F017         	movff	___ftadd@f2+2,?___ftadd+2
  9025  0062A0  0012               	return	
  9026  0062A2                     l1599:
  9027  0062A2  501F               	movf	___ftadd@exp2,w,c
  9028  0062A4  B4D8               	btfsc	status,2,c
  9029  0062A6  D00B               	goto	u2930
  9030  0062A8  5020               	movf	___ftadd@exp1,w,c
  9031  0062AA  5C1F               	subwf	___ftadd@exp2,w,c
  9032  0062AC  B0D8               	btfsc	status,0,c
  9033  0062AE  D00E               	goto	l1603
  9034  0062B0  501F               	movf	___ftadd@exp2,w,c
  9035  0062B2  0800               	sublw	0
  9036  0062B4  2420               	addwf	___ftadd@exp1,w,c
  9037  0062B6  6E1B               	movwf	??___ftadd& (0+255),c
  9038  0062B8  0E18               	movlw	24
  9039  0062BA  641B               	cpfsgt	??___ftadd,c
  9040  0062BC  D007               	goto	l1603
  9041  0062BE                     u2930:
  9042  0062BE  C015  F015         	movff	___ftadd@f1,?___ftadd
  9043  0062C2  C016  F016         	movff	___ftadd@f1+1,?___ftadd+1
  9044  0062C6  C017  F017         	movff	___ftadd@f1+2,?___ftadd+2
  9045  0062CA  0012               	return	
  9046  0062CC                     l1603:
  9047  0062CC  0E06               	movlw	6
  9048  0062CE  6E1E               	movwf	___ftadd@sign,c
  9049  0062D0  BE17               	btfsc	___ftadd@f1+2,7,c
  9050  0062D2  8E1E               	bsf	___ftadd@sign,7,c
  9051  0062D4  BE1A               	btfsc	___ftadd@f2+2,7,c
  9052  0062D6  8C1E               	bsf	___ftadd@sign,6,c
  9053  0062D8  8E16               	bsf	___ftadd@f1+1,7,c
  9054  0062DA  0EFF               	movlw	255
  9055  0062DC  1615               	andwf	___ftadd@f1,f,c
  9056  0062DE  0EFF               	movlw	255
  9057  0062E0  1616               	andwf	___ftadd@f1+1,f,c
  9058  0062E2  0E00               	movlw	0
  9059  0062E4  1617               	andwf	___ftadd@f1+2,f,c
  9060  0062E6  8E19               	bsf	___ftadd@f2+1,7,c
  9061  0062E8  0EFF               	movlw	255
  9062  0062EA  1618               	andwf	___ftadd@f2,f,c
  9063  0062EC  0EFF               	movlw	255
  9064  0062EE  1619               	andwf	___ftadd@f2+1,f,c
  9065  0062F0  0E00               	movlw	0
  9066  0062F2  161A               	andwf	___ftadd@f2+2,f,c
  9067  0062F4  501F               	movf	___ftadd@exp2,w,c
  9068  0062F6  5C20               	subwf	___ftadd@exp1,w,c
  9069  0062F8  B0D8               	btfsc	status,0,c
  9070  0062FA  D01B               	goto	l1608
  9071  0062FC                     u2960:
  9072  0062FC  90D8               	bcf	status,0,c
  9073  0062FE  3618               	rlcf	___ftadd@f2,f,c
  9074  006300  3619               	rlcf	___ftadd@f2+1,f,c
  9075  006302  361A               	rlcf	___ftadd@f2+2,f,c
  9076  006304  061F               	decf	___ftadd@exp2,f,c
  9077  006306  5020               	movf	___ftadd@exp1,w,c
  9078  006308  181F               	xorwf	___ftadd@exp2,w,c
  9079  00630A  B4D8               	btfsc	status,2,c
  9080  00630C  D00D               	goto	l1613
  9081  00630E  061E               	decf	___ftadd@sign,f,c
  9082  006310  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  9083  006314  0E07               	movlw	7
  9084  006316  161B               	andwf	??___ftadd,f,c
  9085  006318  B4D8               	btfsc	status,2,c
  9086  00631A  D006               	goto	l1613
  9087  00631C  D7EF               	goto	u2960
  9088  00631E  90D8               	bcf	status,0,c
  9089  006320  3217               	rrcf	___ftadd@f1+2,f,c
  9090  006322  3216               	rrcf	___ftadd@f1+1,f,c
  9091  006324  3215               	rrcf	___ftadd@f1,f,c
  9092  006326  2A20               	incf	___ftadd@exp1,f,c
  9093  006328                     l1613:
  9094  006328  501F               	movf	___ftadd@exp2,w,c
  9095  00632A  1820               	xorwf	___ftadd@exp1,w,c
  9096  00632C  B4D8               	btfsc	status,2,c
  9097  00632E  D01F               	goto	u3030
  9098  006330  D7F6               	goto	l1614
  9099  006332                     l1608:
  9100  006332  5020               	movf	___ftadd@exp1,w,c
  9101  006334  5C1F               	subwf	___ftadd@exp2,w,c
  9102  006336  B0D8               	btfsc	status,0,c
  9103  006338  D01A               	goto	u3030
  9104  00633A                     u3000:
  9105  00633A  90D8               	bcf	status,0,c
  9106  00633C  3615               	rlcf	___ftadd@f1,f,c
  9107  00633E  3616               	rlcf	___ftadd@f1+1,f,c
  9108  006340  3617               	rlcf	___ftadd@f1+2,f,c
  9109  006342  0620               	decf	___ftadd@exp1,f,c
  9110  006344  5020               	movf	___ftadd@exp1,w,c
  9111  006346  181F               	xorwf	___ftadd@exp2,w,c
  9112  006348  B4D8               	btfsc	status,2,c
  9113  00634A  D00D               	goto	l1622
  9114  00634C  061E               	decf	___ftadd@sign,f,c
  9115  00634E  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  9116  006352  0E07               	movlw	7
  9117  006354  161B               	andwf	??___ftadd,f,c
  9118  006356  B4D8               	btfsc	status,2,c
  9119  006358  D006               	goto	l1622
  9120  00635A  D7EF               	goto	u3000
  9121  00635C  90D8               	bcf	status,0,c
  9122  00635E  321A               	rrcf	___ftadd@f2+2,f,c
  9123  006360  3219               	rrcf	___ftadd@f2+1,f,c
  9124  006362  3218               	rrcf	___ftadd@f2,f,c
  9125  006364  2A1F               	incf	___ftadd@exp2,f,c
  9126  006366                     l1622:
  9127  006366  501F               	movf	___ftadd@exp2,w,c
  9128  006368  1820               	xorwf	___ftadd@exp1,w,c
  9129  00636A  A4D8               	btfss	status,2,c
  9130  00636C  D7F7               	goto	l1623
  9131  00636E                     u3030:
  9132  00636E  AE1E               	btfss	___ftadd@sign,7,c
  9133  006370  D00C               	goto	l1625
  9134  006372  0EFF               	movlw	255
  9135  006374  1A15               	xorwf	___ftadd@f1,f,c
  9136  006376  0EFF               	movlw	255
  9137  006378  1A16               	xorwf	___ftadd@f1+1,f,c
  9138  00637A  0EFF               	movlw	255
  9139  00637C  1A17               	xorwf	___ftadd@f1+2,f,c
  9140  00637E  0E01               	movlw	1
  9141  006380  2615               	addwf	___ftadd@f1,f,c
  9142  006382  0E00               	movlw	0
  9143  006384  2216               	addwfc	___ftadd@f1+1,f,c
  9144  006386  0E00               	movlw	0
  9145  006388  2217               	addwfc	___ftadd@f1+2,f,c
  9146  00638A                     l1625:
  9147  00638A  AC1E               	btfss	___ftadd@sign,6,c
  9148  00638C  D00C               	goto	l1626
  9149  00638E  0EFF               	movlw	255
  9150  006390  1A18               	xorwf	___ftadd@f2,f,c
  9151  006392  0EFF               	movlw	255
  9152  006394  1A19               	xorwf	___ftadd@f2+1,f,c
  9153  006396  0EFF               	movlw	255
  9154  006398  1A1A               	xorwf	___ftadd@f2+2,f,c
  9155  00639A  0E01               	movlw	1
  9156  00639C  2618               	addwf	___ftadd@f2,f,c
  9157  00639E  0E00               	movlw	0
  9158  0063A0  2219               	addwfc	___ftadd@f2+1,f,c
  9159  0063A2  0E00               	movlw	0
  9160  0063A4  221A               	addwfc	___ftadd@f2+2,f,c
  9161  0063A6                     l1626:
  9162  0063A6  0E00               	movlw	0
  9163  0063A8  6E1E               	movwf	___ftadd@sign,c
  9164  0063AA  5015               	movf	___ftadd@f1,w,c
  9165  0063AC  2618               	addwf	___ftadd@f2,f,c
  9166  0063AE  5016               	movf	___ftadd@f1+1,w,c
  9167  0063B0  2219               	addwfc	___ftadd@f2+1,f,c
  9168  0063B2  5017               	movf	___ftadd@f1+2,w,c
  9169  0063B4  221A               	addwfc	___ftadd@f2+2,f,c
  9170  0063B6  AE1A               	btfss	___ftadd@f2+2,7,c
  9171  0063B8  D00E               	goto	l1627
  9172  0063BA  0EFF               	movlw	255
  9173  0063BC  1A18               	xorwf	___ftadd@f2,f,c
  9174  0063BE  0EFF               	movlw	255
  9175  0063C0  1A19               	xorwf	___ftadd@f2+1,f,c
  9176  0063C2  0EFF               	movlw	255
  9177  0063C4  1A1A               	xorwf	___ftadd@f2+2,f,c
  9178  0063C6  0E01               	movlw	1
  9179  0063C8  2618               	addwf	___ftadd@f2,f,c
  9180  0063CA  0E00               	movlw	0
  9181  0063CC  2219               	addwfc	___ftadd@f2+1,f,c
  9182  0063CE  0E00               	movlw	0
  9183  0063D0  221A               	addwfc	___ftadd@f2+2,f,c
  9184  0063D2  0E01               	movlw	1
  9185  0063D4  6E1E               	movwf	___ftadd@sign,c
  9186  0063D6                     l1627:
  9187  0063D6  C018  F001         	movff	___ftadd@f2,___ftpack@arg
  9188  0063DA  C019  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  9189  0063DE  C01A  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  9190  0063E2  C020  F004         	movff	___ftadd@exp1,___ftpack@exp
  9191  0063E6  C01E  F005         	movff	___ftadd@sign,___ftpack@sign
  9192  0063EA  ECF9  F029         	call	___ftpack	;wreg free
  9193  0063EE  C001  F015         	movff	?___ftpack,?___ftadd
  9194  0063F2  C002  F016         	movff	?___ftpack+1,?___ftadd+1
  9195  0063F6  C003  F017         	movff	?___ftpack+2,?___ftadd+2
  9196  0063FA  0012               	return	
  9197  0063FC                     __end_of___ftadd:
  9198                           	opt stack 0
  9199                           tblptru	equ	0xFF8
  9200                           tblptrh	equ	0xFF7
  9201                           tblptrl	equ	0xFF6
  9202                           tablat	equ	0xFF5
  9203                           prodh	equ	0xFF4
  9204                           prodl	equ	0xFF3
  9205                           postinc0	equ	0xFEE
  9206                           wreg	equ	0xFE8
  9207                           postinc2	equ	0xFDE
  9208                           postdec2	equ	0xFDD
  9209                           fsr2h	equ	0xFDA
  9210                           fsr2l	equ	0xFD9
  9211                           status	equ	0xFD8
  9212                           
  9213 ;; *************** function ___ftge *****************
  9214 ;; Defined at:
  9215 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9216 ;; Parameters:    Size  Location     Type
  9217 ;;  ff1             3    0[COMRAM] float 
  9218 ;;  ff2             3    3[COMRAM] float 
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;		None
  9221 ;; Return value:  Size  Location     Type
  9222 ;;		None               void
  9223 ;; Registers used:
  9224 ;;		wreg, status,2, status,0
  9225 ;; Tracked objects:
  9226 ;;		On entry : 0/0
  9227 ;;		On exit  : 0/0
  9228 ;;		Unchanged: 0/0
  9229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9230 ;;      Params:         6       0       0       0       0       0       0       0       0
  9231 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9232 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9233 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9234 ;;Total ram usage:        9 bytes
  9235 ;; Hardware stack levels used:    1
  9236 ;; This function calls:
  9237 ;;		Nothing
  9238 ;; This function is called by:
  9239 ;;		_printf
  9240 ;;		_atan
  9241 ;;		_pow
  9242 ;;		_sqrt
  9243 ;;		_exp
  9244 ;;		_floor
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           	psect	text42
  9249  0052D2                     __ptext42:
  9250                           	opt stack 0
  9251  0052D2                     ___ftge:
  9252                           	opt stack 29
  9253                           
  9254                           ;incstack = 0
  9255  0052D2  AE03               	btfss	___ftge@ff1+2,7,c
  9256  0052D4  D016               	goto	l1657
  9257  0052D6  C001  F007         	movff	___ftge@ff1,??___ftge
  9258  0052DA  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  9259  0052DE  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  9260  0052E2  1E07               	comf	??___ftge,f,c
  9261  0052E4  1E08               	comf	??___ftge+1,f,c
  9262  0052E6  1E09               	comf	??___ftge+2,f,c
  9263  0052E8  2A07               	incf	??___ftge,f,c
  9264  0052EA  0E00               	movlw	0
  9265  0052EC  2208               	addwfc	??___ftge+1,f,c
  9266  0052EE  2209               	addwfc	??___ftge+2,f,c
  9267  0052F0  0E00               	movlw	0
  9268  0052F2  2407               	addwf	??___ftge,w,c
  9269  0052F4  6E01               	movwf	___ftge@ff1,c
  9270  0052F6  0E00               	movlw	0
  9271  0052F8  2008               	addwfc	??___ftge+1,w,c
  9272  0052FA  6E02               	movwf	___ftge@ff1+1,c
  9273  0052FC  0E80               	movlw	128
  9274  0052FE  2009               	addwfc	??___ftge+2,w,c
  9275  005300  6E03               	movwf	___ftge@ff1+2,c
  9276  005302                     l1657:
  9277  005302  AE06               	btfss	___ftge@ff2+2,7,c
  9278  005304  D016               	goto	l1658
  9279  005306  C004  F007         	movff	___ftge@ff2,??___ftge
  9280  00530A  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  9281  00530E  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  9282  005312  1E07               	comf	??___ftge,f,c
  9283  005314  1E08               	comf	??___ftge+1,f,c
  9284  005316  1E09               	comf	??___ftge+2,f,c
  9285  005318  2A07               	incf	??___ftge,f,c
  9286  00531A  0E00               	movlw	0
  9287  00531C  2208               	addwfc	??___ftge+1,f,c
  9288  00531E  2209               	addwfc	??___ftge+2,f,c
  9289  005320  0E00               	movlw	0
  9290  005322  2407               	addwf	??___ftge,w,c
  9291  005324  6E04               	movwf	___ftge@ff2,c
  9292  005326  0E00               	movlw	0
  9293  005328  2008               	addwfc	??___ftge+1,w,c
  9294  00532A  6E05               	movwf	___ftge@ff2+1,c
  9295  00532C  0E80               	movlw	128
  9296  00532E  2009               	addwfc	??___ftge+2,w,c
  9297  005330  6E06               	movwf	___ftge@ff2+2,c
  9298  005332                     l1658:
  9299  005332  0E00               	movlw	0
  9300  005334  1A01               	xorwf	___ftge@ff1,f,c
  9301  005336  0E00               	movlw	0
  9302  005338  1A02               	xorwf	___ftge@ff1+1,f,c
  9303  00533A  0E80               	movlw	128
  9304  00533C  1A03               	xorwf	___ftge@ff1+2,f,c
  9305  00533E  0E00               	movlw	0
  9306  005340  1A04               	xorwf	___ftge@ff2,f,c
  9307  005342  0E00               	movlw	0
  9308  005344  1A05               	xorwf	___ftge@ff2+1,f,c
  9309  005346  0E80               	movlw	128
  9310  005348  1A06               	xorwf	___ftge@ff2+2,f,c
  9311  00534A  5004               	movf	___ftge@ff2,w,c
  9312  00534C  5C01               	subwf	___ftge@ff1,w,c
  9313  00534E  5005               	movf	___ftge@ff2+1,w,c
  9314  005350  5802               	subwfb	___ftge@ff1+1,w,c
  9315  005352  5006               	movf	___ftge@ff2+2,w,c
  9316  005354  5803               	subwfb	___ftge@ff1+2,w,c
  9317  005356  B0D8               	btfsc	status,0,c
  9318  005358  D002               	goto	l4546
  9319  00535A  90D8               	bcf	status,0,c
  9320  00535C  0012               	return	
  9321  00535E                     l4546:
  9322  00535E  80D8               	bsf	status,0,c
  9323  005360  0012               	return	
  9324  005362                     __end_of___ftge:
  9325                           	opt stack 0
  9326                           tblptru	equ	0xFF8
  9327                           tblptrh	equ	0xFF7
  9328                           tblptrl	equ	0xFF6
  9329                           tablat	equ	0xFF5
  9330                           prodh	equ	0xFF4
  9331                           prodl	equ	0xFF3
  9332                           postinc0	equ	0xFEE
  9333                           wreg	equ	0xFE8
  9334                           postinc2	equ	0xFDE
  9335                           postdec2	equ	0xFDD
  9336                           fsr2h	equ	0xFDA
  9337                           fsr2l	equ	0xFD9
  9338                           status	equ	0xFD8
  9339                           
  9340 ;; *************** function ___ftdiv *****************
  9341 ;; Defined at:
  9342 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  9343 ;; Parameters:    Size  Location     Type
  9344 ;;  f1              3   79[COMRAM] float 
  9345 ;;  f2              3   82[COMRAM] float 
  9346 ;; Auto vars:     Size  Location     Type
  9347 ;;  f3              3   89[COMRAM] float 
  9348 ;;  sign            1   93[COMRAM] unsigned char 
  9349 ;;  exp             1   92[COMRAM] unsigned char 
  9350 ;;  cntr            1   88[COMRAM] unsigned char 
  9351 ;; Return value:  Size  Location     Type
  9352 ;;                  3   79[COMRAM] float 
  9353 ;; Registers used:
  9354 ;;		wreg, status,2, status,0, cstack
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9360 ;;      Params:         6       0       0       0       0       0       0       0       0
  9361 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9362 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9363 ;;      Totals:        15       0       0       0       0       0       0       0       0
  9364 ;;Total ram usage:       15 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    1
  9367 ;; This function calls:
  9368 ;;		___ftpack
  9369 ;; This function is called by:
  9370 ;;		_calibrate_sensors
  9371 ;;		_main
  9372 ;;		_USART_Init
  9373 ;;		_atan
  9374 ;;		_exp
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           	psect	text43
  9379  005716                     __ptext43:
  9380                           	opt stack 0
  9381  005716                     ___ftdiv:
  9382                           	opt stack 27
  9383                           
  9384                           ;incstack = 0
  9385  005716  C052  F056         	movff	___ftdiv@f1+2,??___ftdiv
  9386  00571A  6A57               	clrf	(??___ftdiv+1)& (0+255),c
  9387  00571C  6A58               	clrf	(??___ftdiv+2)& (0+255),c
  9388  00571E  3451               	rlcf	___ftdiv@f1+1,w,c
  9389  005720  3656               	rlcf	??___ftdiv& (0+255),f,c
  9390  005722  E301               	bnc	u3371
  9391  005724  8057               	bsf	(??___ftdiv+1)& (0+255),0,c
  9392  005726                     u3371:
  9393  005726  5056               	movf	??___ftdiv,w,c
  9394  005728  6E5D               	movwf	___ftdiv@exp,c
  9395  00572A  505D               	movf	___ftdiv@exp,w,c
  9396  00572C  A4D8               	btfss	status,2,c
  9397  00572E  D007               	goto	l1632
  9398  005730  0E00               	movlw	0
  9399  005732  6E50               	movwf	?___ftdiv,c
  9400  005734  0E00               	movlw	0
  9401  005736  6E51               	movwf	?___ftdiv+1,c
  9402  005738  0E00               	movlw	0
  9403  00573A  6E52               	movwf	?___ftdiv+2,c
  9404  00573C  0012               	return	
  9405  00573E                     l1632:
  9406  00573E  C055  F056         	movff	___ftdiv@f2+2,??___ftdiv
  9407  005742  6A57               	clrf	(??___ftdiv+1)& (0+255),c
  9408  005744  6A58               	clrf	(??___ftdiv+2)& (0+255),c
  9409  005746  3454               	rlcf	___ftdiv@f2+1,w,c
  9410  005748  3656               	rlcf	??___ftdiv& (0+255),f,c
  9411  00574A  E301               	bnc	u3391
  9412  00574C  8057               	bsf	(??___ftdiv+1)& (0+255),0,c
  9413  00574E                     u3391:
  9414  00574E  5056               	movf	??___ftdiv,w,c
  9415  005750  6E5E               	movwf	___ftdiv@sign,c
  9416  005752  505E               	movf	___ftdiv@sign,w,c
  9417  005754  A4D8               	btfss	status,2,c
  9418  005756  D007               	goto	l1634
  9419  005758  0E00               	movlw	0
  9420  00575A  6E50               	movwf	?___ftdiv,c
  9421  00575C  0E00               	movlw	0
  9422  00575E  6E51               	movwf	?___ftdiv+1,c
  9423  005760  0E00               	movlw	0
  9424  005762  6E52               	movwf	?___ftdiv+2,c
  9425  005764  0012               	return	
  9426  005766                     l1634:
  9427  005766  0E00               	movlw	0
  9428  005768  6E5A               	movwf	___ftdiv@f3,c
  9429  00576A  0E00               	movlw	0
  9430  00576C  6E5B               	movwf	___ftdiv@f3+1,c
  9431  00576E  0E00               	movlw	0
  9432  005770  6E5C               	movwf	___ftdiv@f3+2,c
  9433  005772  505E               	movf	___ftdiv@sign,w,c
  9434  005774  0F89               	addlw	137
  9435  005776  5E5D               	subwf	___ftdiv@exp,f,c
  9436  005778  C052  F05E         	movff	___ftdiv@f1+2,___ftdiv@sign
  9437  00577C  5055               	movf	___ftdiv@f2+2,w,c
  9438  00577E  1A5E               	xorwf	___ftdiv@sign,f,c
  9439  005780  0E80               	movlw	128
  9440  005782  165E               	andwf	___ftdiv@sign,f,c
  9441  005784  8E51               	bsf	___ftdiv@f1+1,7,c
  9442  005786  0EFF               	movlw	255
  9443  005788  1650               	andwf	___ftdiv@f1,f,c
  9444  00578A  0EFF               	movlw	255
  9445  00578C  1651               	andwf	___ftdiv@f1+1,f,c
  9446  00578E  0E00               	movlw	0
  9447  005790  1652               	andwf	___ftdiv@f1+2,f,c
  9448  005792  8E54               	bsf	___ftdiv@f2+1,7,c
  9449  005794  0EFF               	movlw	255
  9450  005796  1653               	andwf	___ftdiv@f2,f,c
  9451  005798  0EFF               	movlw	255
  9452  00579A  1654               	andwf	___ftdiv@f2+1,f,c
  9453  00579C  0E00               	movlw	0
  9454  00579E  1655               	andwf	___ftdiv@f2+2,f,c
  9455  0057A0  0E18               	movlw	24
  9456  0057A2  6E59               	movwf	___ftdiv@cntr,c
  9457  0057A4  90D8               	bcf	status,0,c
  9458  0057A6  365A               	rlcf	___ftdiv@f3,f,c
  9459  0057A8  365B               	rlcf	___ftdiv@f3+1,f,c
  9460  0057AA  365C               	rlcf	___ftdiv@f3+2,f,c
  9461  0057AC  5053               	movf	___ftdiv@f2,w,c
  9462  0057AE  5C50               	subwf	___ftdiv@f1,w,c
  9463  0057B0  5054               	movf	___ftdiv@f2+1,w,c
  9464  0057B2  5851               	subwfb	___ftdiv@f1+1,w,c
  9465  0057B4  5055               	movf	___ftdiv@f2+2,w,c
  9466  0057B6  5852               	subwfb	___ftdiv@f1+2,w,c
  9467  0057B8  A0D8               	btfss	status,0,c
  9468  0057BA  D007               	goto	l1636
  9469  0057BC  5053               	movf	___ftdiv@f2,w,c
  9470  0057BE  5E50               	subwf	___ftdiv@f1,f,c
  9471  0057C0  5054               	movf	___ftdiv@f2+1,w,c
  9472  0057C2  5A51               	subwfb	___ftdiv@f1+1,f,c
  9473  0057C4  5055               	movf	___ftdiv@f2+2,w,c
  9474  0057C6  5A52               	subwfb	___ftdiv@f1+2,f,c
  9475  0057C8  805A               	bsf	___ftdiv@f3,0,c
  9476  0057CA                     l1636:
  9477  0057CA  90D8               	bcf	status,0,c
  9478  0057CC  3650               	rlcf	___ftdiv@f1,f,c
  9479  0057CE  3651               	rlcf	___ftdiv@f1+1,f,c
  9480  0057D0  3652               	rlcf	___ftdiv@f1+2,f,c
  9481  0057D2  2E59               	decfsz	___ftdiv@cntr,f,c
  9482  0057D4  D7E7               	goto	l1635
  9483  0057D6  C05A  F001         	movff	___ftdiv@f3,___ftpack@arg
  9484  0057DA  C05B  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9485  0057DE  C05C  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9486  0057E2  C05D  F004         	movff	___ftdiv@exp,___ftpack@exp
  9487  0057E6  C05E  F005         	movff	___ftdiv@sign,___ftpack@sign
  9488  0057EA  ECF9  F029         	call	___ftpack	;wreg free
  9489  0057EE  C001  F050         	movff	?___ftpack,?___ftdiv
  9490  0057F2  C002  F051         	movff	?___ftpack+1,?___ftdiv+1
  9491  0057F6  C003  F052         	movff	?___ftpack+2,?___ftdiv+2
  9492  0057FA  0012               	return	
  9493  0057FC                     __end_of___ftdiv:
  9494                           	opt stack 0
  9495                           tblptru	equ	0xFF8
  9496                           tblptrh	equ	0xFF7
  9497                           tblptrl	equ	0xFF6
  9498                           tablat	equ	0xFF5
  9499                           prodh	equ	0xFF4
  9500                           prodl	equ	0xFF3
  9501                           postinc0	equ	0xFEE
  9502                           wreg	equ	0xFE8
  9503                           postinc2	equ	0xFDE
  9504                           postdec2	equ	0xFDD
  9505                           fsr2h	equ	0xFDA
  9506                           fsr2l	equ	0xFD9
  9507                           status	equ	0xFD8
  9508                           
  9509 ;; *************** function ___ftpack *****************
  9510 ;; Defined at:
  9511 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9512 ;; Parameters:    Size  Location     Type
  9513 ;;  arg             3    0[COMRAM] unsigned um
  9514 ;;  exp             1    3[COMRAM] unsigned char 
  9515 ;;  sign            1    4[COMRAM] unsigned char 
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;		None
  9518 ;; Return value:  Size  Location     Type
  9519 ;;                  3    0[COMRAM] float 
  9520 ;; Registers used:
  9521 ;;		wreg, status,2, status,0
  9522 ;; Tracked objects:
  9523 ;;		On entry : 0/0
  9524 ;;		On exit  : 0/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9527 ;;      Params:         5       0       0       0       0       0       0       0       0
  9528 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9529 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9530 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9531 ;;Total ram usage:        8 bytes
  9532 ;; Hardware stack levels used:    1
  9533 ;; This function calls:
  9534 ;;		Nothing
  9535 ;; This function is called by:
  9536 ;;		___altoft
  9537 ;;		___awtoft
  9538 ;;		___ftadd
  9539 ;;		___ftdiv
  9540 ;;		___ftmul
  9541 ;;		___lltoft
  9542 ;; This function uses a non-reentrant model
  9543 ;;
  9544                           
  9545                           	psect	text44
  9546  0053F2                     __ptext44:
  9547                           	opt stack 0
  9548  0053F2                     ___ftpack:
  9549                           	opt stack 27
  9550                           
  9551                           ;incstack = 0
  9552  0053F2  5004               	movf	___ftpack@exp,w,c
  9553  0053F4  B4D8               	btfsc	status,2,c
  9554  0053F6  D005               	goto	u2770
  9555  0053F8  5001               	movf	___ftpack@arg,w,c
  9556  0053FA  1002               	iorwf	___ftpack@arg+1,w,c
  9557  0053FC  1003               	iorwf	___ftpack@arg+2,w,c
  9558  0053FE  A4D8               	btfss	status,2,c
  9559  005400  D00C               	goto	l1568
  9560  005402                     u2770:
  9561  005402  0E00               	movlw	0
  9562  005404  6E01               	movwf	?___ftpack,c
  9563  005406  0E00               	movlw	0
  9564  005408  6E02               	movwf	?___ftpack+1,c
  9565  00540A  0E00               	movlw	0
  9566  00540C  6E03               	movwf	?___ftpack+2,c
  9567  00540E  0012               	return	
  9568  005410  2A04               	incf	___ftpack@exp,f,c
  9569  005412  90D8               	bcf	status,0,c
  9570  005414  3203               	rrcf	___ftpack@arg+2,f,c
  9571  005416  3202               	rrcf	___ftpack@arg+1,f,c
  9572  005418  3201               	rrcf	___ftpack@arg,f,c
  9573  00541A                     l1568:
  9574  00541A  0E00               	movlw	0
  9575  00541C  1401               	andwf	___ftpack@arg,w,c
  9576  00541E  6E06               	movwf	??___ftpack& (0+255),c
  9577  005420  0E00               	movlw	0
  9578  005422  1402               	andwf	___ftpack@arg+1,w,c
  9579  005424  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9580  005426  0EFE               	movlw	254
  9581  005428  1403               	andwf	___ftpack@arg+2,w,c
  9582  00542A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9583  00542C  5006               	movf	??___ftpack,w,c
  9584  00542E  1007               	iorwf	??___ftpack+1,w,c
  9585  005430  1008               	iorwf	??___ftpack+2,w,c
  9586  005432  B4D8               	btfsc	status,2,c
  9587  005434  D00C               	goto	l1571
  9588  005436  D7EC               	goto	l1569
  9589  005438  2A04               	incf	___ftpack@exp,f,c
  9590  00543A  0E01               	movlw	1
  9591  00543C  2601               	addwf	___ftpack@arg,f,c
  9592  00543E  0E00               	movlw	0
  9593  005440  2202               	addwfc	___ftpack@arg+1,f,c
  9594  005442  0E00               	movlw	0
  9595  005444  2203               	addwfc	___ftpack@arg+2,f,c
  9596  005446  90D8               	bcf	status,0,c
  9597  005448  3203               	rrcf	___ftpack@arg+2,f,c
  9598  00544A  3202               	rrcf	___ftpack@arg+1,f,c
  9599  00544C  3201               	rrcf	___ftpack@arg,f,c
  9600  00544E                     l1571:
  9601  00544E  0E00               	movlw	0
  9602  005450  1401               	andwf	___ftpack@arg,w,c
  9603  005452  6E06               	movwf	??___ftpack& (0+255),c
  9604  005454  0E00               	movlw	0
  9605  005456  1402               	andwf	___ftpack@arg+1,w,c
  9606  005458  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9607  00545A  0EFF               	movlw	255
  9608  00545C  1403               	andwf	___ftpack@arg+2,w,c
  9609  00545E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9610  005460  5006               	movf	??___ftpack,w,c
  9611  005462  1007               	iorwf	??___ftpack+1,w,c
  9612  005464  1008               	iorwf	??___ftpack+2,w,c
  9613  005466  B4D8               	btfsc	status,2,c
  9614  005468  D006               	goto	l1574
  9615  00546A  D7E6               	goto	l1572
  9616  00546C  0604               	decf	___ftpack@exp,f,c
  9617  00546E  90D8               	bcf	status,0,c
  9618  005470  3601               	rlcf	___ftpack@arg,f,c
  9619  005472  3602               	rlcf	___ftpack@arg+1,f,c
  9620  005474  3603               	rlcf	___ftpack@arg+2,f,c
  9621  005476                     l1574:
  9622  005476  BE02               	btfsc	___ftpack@arg+1,7,c
  9623  005478  D003               	goto	u2810
  9624  00547A  0E02               	movlw	2
  9625  00547C  6004               	cpfslt	___ftpack@exp,c
  9626  00547E  D7F6               	goto	l1575
  9627  005480                     u2810:
  9628  005480  A004               	btfss	___ftpack@exp,0,c
  9629  005482  9E02               	bcf	___ftpack@arg+1,7,c
  9630  005484  90D8               	bcf	status,0,c
  9631  005486  3204               	rrcf	___ftpack@exp,f,c
  9632  005488  5004               	movf	___ftpack@exp,w,c
  9633  00548A  1203               	iorwf	___ftpack@arg+2,f,c
  9634  00548C  5005               	movf	___ftpack@sign,w,c
  9635  00548E  A4D8               	btfss	status,2,c
  9636  005490  8E03               	bsf	___ftpack@arg+2,7,c
  9637  005492  C001  F001         	movff	___ftpack@arg,?___ftpack
  9638  005496  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  9639  00549A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  9640  00549E  0012               	return	
  9641  0054A0                     __end_of___ftpack:
  9642                           	opt stack 0
  9643                           tblptru	equ	0xFF8
  9644                           tblptrh	equ	0xFF7
  9645                           tblptrl	equ	0xFF6
  9646                           tablat	equ	0xFF5
  9647                           prodh	equ	0xFF4
  9648                           prodl	equ	0xFF3
  9649                           postinc0	equ	0xFEE
  9650                           wreg	equ	0xFE8
  9651                           postinc2	equ	0xFDE
  9652                           postdec2	equ	0xFDD
  9653                           fsr2h	equ	0xFDA
  9654                           fsr2l	equ	0xFD9
  9655                           status	equ	0xFD8
  9656                           
  9657 ;; *************** function _OpenI2C *****************
  9658 ;; Defined at:
  9659 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\i2c\i2c_open.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;  sync_mode       1    wreg     unsigned char 
  9662 ;;  slew            1    0[COMRAM] unsigned char 
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  sync_mode       1    1[COMRAM] unsigned char 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  1    wreg      void 
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9674 ;;      Params:         1       0       0       0       0       0       0       0       0
  9675 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9676 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9677 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9678 ;;Total ram usage:        2 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; This function calls:
  9681 ;;		Nothing
  9682 ;; This function is called by:
  9683 ;;		_main
  9684 ;; This function uses a non-reentrant model
  9685 ;;
  9686                           
  9687                           	psect	text45
  9688  004B06                     __ptext45:
  9689                           	opt stack 0
  9690  004B06                     _OpenI2C:
  9691                           	opt stack 30
  9692                           
  9693                           ;incstack = 0
  9694                           ;OpenI2C@sync_mode stored from wreg
  9695  004B06  6E02               	movwf	OpenI2C@sync_mode,c
  9696  004B08  0E3F               	movlw	63
  9697  004B0A  16C7               	andwf	4039,f,c	;volatile
  9698  004B0C  0E00               	movlw	0
  9699  004B0E  6EC6               	movwf	4038,c	;volatile
  9700  004B10  0E00               	movlw	0
  9701  004B12  6EC5               	movwf	4037,c	;volatile
  9702  004B14  5002               	movf	OpenI2C@sync_mode,w,c
  9703  004B16  12C6               	iorwf	4038,f,c	;volatile
  9704  004B18  5001               	movf	OpenI2C@slew,w,c
  9705  004B1A  12C7               	iorwf	4039,f,c	;volatile
  9706  004B1C  8293               	bsf	3987,1,c	;volatile
  9707  004B1E  8093               	bsf	3987,0,c	;volatile
  9708  004B20  8AC6               	bsf	4038,5,c	;volatile
  9709  004B22  0012               	return		;funcret
  9710  004B24                     __end_of_OpenI2C:
  9711                           	opt stack 0
  9712                           tblptru	equ	0xFF8
  9713                           tblptrh	equ	0xFF7
  9714                           tblptrl	equ	0xFF6
  9715                           tablat	equ	0xFF5
  9716                           prodh	equ	0xFF4
  9717                           prodl	equ	0xFF3
  9718                           postinc0	equ	0xFEE
  9719                           wreg	equ	0xFE8
  9720                           postinc2	equ	0xFDE
  9721                           postdec2	equ	0xFDD
  9722                           fsr2h	equ	0xFDA
  9723                           fsr2l	equ	0xFD9
  9724                           status	equ	0xFD8
  9725                           
  9726 ;; *************** function _MPU6050_testConnection *****************
  9727 ;; Defined at:
  9728 ;;		line 73 in file "MPU6050.c"
  9729 ;; Parameters:    Size  Location     Type
  9730 ;;		None
  9731 ;; Auto vars:     Size  Location     Type
  9732 ;;		None
  9733 ;; Return value:  Size  Location     Type
  9734 ;;                  1    wreg      unsigned char 
  9735 ;; Registers used:
  9736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9737 ;; Tracked objects:
  9738 ;;		On entry : 0/0
  9739 ;;		On exit  : 0/0
  9740 ;;		Unchanged: 0/0
  9741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9742 ;;      Params:         0       0       0       0       0       0       0       0       0
  9743 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9744 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9745 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9746 ;;Total ram usage:        0 bytes
  9747 ;; Hardware stack levels used:    1
  9748 ;; Hardware stack levels required when called:    6
  9749 ;; This function calls:
  9750 ;;		_MPU6050_getDeviceID
  9751 ;; This function is called by:
  9752 ;;		_main
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           	psect	text46
  9757  004A1E                     __ptext46:
  9758                           	opt stack 0
  9759  004A1E                     _MPU6050_testConnection:
  9760                           	opt stack 24
  9761                           
  9762                           ;MPU6050.c: 74: return MPU6050_getDeviceID() == 0x34;
  9763                           
  9764                           ;incstack = 0
  9765  004A1E  ECA2  F025         	call	_MPU6050_getDeviceID	;wreg free
  9766  004A22  0A34               	xorlw	52
  9767  004A24  A4D8               	btfss	status,2,c
  9768  004A26  D002               	goto	u4500
  9769  004A28  0E01               	movlw	1
  9770  004A2A  0012               	return	
  9771  004A2C                     u4500:
  9772  004A2C  0E00               	movlw	0
  9773  004A2E  0012               	return	
  9774  004A30                     __end_of_MPU6050_testConnection:
  9775                           	opt stack 0
  9776                           tblptru	equ	0xFF8
  9777                           tblptrh	equ	0xFF7
  9778                           tblptrl	equ	0xFF6
  9779                           tablat	equ	0xFF5
  9780                           prodh	equ	0xFF4
  9781                           prodl	equ	0xFF3
  9782                           postinc0	equ	0xFEE
  9783                           wreg	equ	0xFE8
  9784                           postinc2	equ	0xFDE
  9785                           postdec2	equ	0xFDD
  9786                           fsr2h	equ	0xFDA
  9787                           fsr2l	equ	0xFD9
  9788                           status	equ	0xFD8
  9789                           
  9790 ;; *************** function _MPU6050_getDeviceID *****************
  9791 ;; Defined at:
  9792 ;;		line 2696 in file "MPU6050.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;		None
  9795 ;; Auto vars:     Size  Location     Type
  9796 ;;		None
  9797 ;; Return value:  Size  Location     Type
  9798 ;;                  1    wreg      unsigned char 
  9799 ;; Registers used:
  9800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9801 ;; Tracked objects:
  9802 ;;		On entry : 0/0
  9803 ;;		On exit  : 0/0
  9804 ;;		Unchanged: 0/0
  9805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9806 ;;      Params:         0       0       0       0       0       0       0       0       0
  9807 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9808 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9809 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9810 ;;Total ram usage:        0 bytes
  9811 ;; Hardware stack levels used:    1
  9812 ;; Hardware stack levels required when called:    5
  9813 ;; This function calls:
  9814 ;;		_I2Cdev_readBits
  9815 ;; This function is called by:
  9816 ;;		_MPU6050_testConnection
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           	psect	text47
  9821  004B44                     __ptext47:
  9822                           	opt stack 0
  9823  004B44                     _MPU6050_getDeviceID:
  9824                           	opt stack 24
  9825                           
  9826                           ;MPU6050.c: 2697: I2Cdev_readBits(mpu6050.devAddr, 0x75, 6, 6, mpu6050.buffer);
  9827                           
  9828                           ;incstack = 0
  9829  004B44  0E75               	movlw	117
  9830  004B46  6E25               	movwf	I2Cdev_readBits@regAddr,c
  9831  004B48  0E06               	movlw	6
  9832  004B4A  6E26               	movwf	I2Cdev_readBits@bitStart,c
  9833  004B4C  0E06               	movlw	6
  9834  004B4E  6E27               	movwf	I2Cdev_readBits@length,c
  9835  004B50  0E2D               	movlw	low (_mpu6050+1)
  9836  004B52  6E28               	movwf	I2Cdev_readBits@data,c
  9837  004B54  0E01               	movlw	high (_mpu6050+1)
  9838  004B56  6E29               	movwf	I2Cdev_readBits@data+1,c
  9839  004B58  0101               	movlb	1	; () banked
  9840  004B5A  512C               	movf	_mpu6050& (0+255),w,b
  9841  004B5C  EC26  F028         	call	_I2Cdev_readBits
  9842                           
  9843                           ;MPU6050.c: 2698: return mpu6050.buffer[0];
  9844  004B60  0101               	movlb	1	; () banked
  9845  004B62  512D               	movf	(_mpu6050+1)& (0+255),w,b
  9846  004B64  0012               	return	
  9847  004B66                     __end_of_MPU6050_getDeviceID:
  9848                           	opt stack 0
  9849                           tblptru	equ	0xFF8
  9850                           tblptrh	equ	0xFF7
  9851                           tblptrl	equ	0xFF6
  9852                           tablat	equ	0xFF5
  9853                           prodh	equ	0xFF4
  9854                           prodl	equ	0xFF3
  9855                           postinc0	equ	0xFEE
  9856                           wreg	equ	0xFE8
  9857                           postinc2	equ	0xFDE
  9858                           postdec2	equ	0xFDD
  9859                           fsr2h	equ	0xFDA
  9860                           fsr2l	equ	0xFD9
  9861                           status	equ	0xFD8
  9862                           
  9863 ;; *************** function _I2Cdev_readBits *****************
  9864 ;; Defined at:
  9865 ;;		line 206 in file "I2Cdev.c"
  9866 ;; Parameters:    Size  Location     Type
  9867 ;;  devAddr         1    wreg     unsigned char 
  9868 ;;  regAddr         1   36[COMRAM] unsigned char 
  9869 ;;  bitStart        1   37[COMRAM] unsigned char 
  9870 ;;  length          1   38[COMRAM] unsigned char 
  9871 ;;  data            2   39[COMRAM] PTR unsigned char 
  9872 ;;		 -> mpu6050(15), 
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;  devAddr         1   45[COMRAM] unsigned char 
  9875 ;;  mask            1   46[COMRAM] unsigned char 
  9876 ;;  b               1   47[COMRAM] unsigned char 
  9877 ;;  count           1   44[COMRAM] unsigned char 
  9878 ;; Return value:  Size  Location     Type
  9879 ;;                  1    wreg      char 
  9880 ;; Registers used:
  9881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9882 ;; Tracked objects:
  9883 ;;		On entry : 0/0
  9884 ;;		On exit  : 0/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9887 ;;      Params:         5       0       0       0       0       0       0       0       0
  9888 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9889 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9890 ;;      Totals:        12       0       0       0       0       0       0       0       0
  9891 ;;Total ram usage:       12 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:    4
  9894 ;; This function calls:
  9895 ;;		_I2Cdev_readByte
  9896 ;; This function is called by:
  9897 ;;		_MPU6050_getDeviceID
  9898 ;;		_MPU6050_getExternalFrameSync
  9899 ;;		_MPU6050_getDLPFMode
  9900 ;;		_MPU6050_getFullScaleGyroRange
  9901 ;;		_MPU6050_getFullScaleAccelRange
  9902 ;;		_MPU6050_getDHPFMode
  9903 ;;		_MPU6050_getMasterClockSpeed
  9904 ;;		_MPU6050_getSlaveDataLength
  9905 ;;		_MPU6050_getSlave4MasterDelay
  9906 ;;		_MPU6050_getAccelerometerPowerOnDelay
  9907 ;;		_MPU6050_getFreefallDetectionCounterDecrement
  9908 ;;		_MPU6050_getMotionDetectionCounterDecrement
  9909 ;;		_MPU6050_getClockSource
  9910 ;;		_MPU6050_getWakeFrequency
  9911 ;;		_MPU6050_getXGyroOffsetTC
  9912 ;;		_MPU6050_getYGyroOffsetTC
  9913 ;;		_MPU6050_getZGyroOffsetTC
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           	psect	text48
  9918  00504C                     __ptext48:
  9919                           	opt stack 0
  9920  00504C                     _I2Cdev_readBits:
  9921                           	opt stack 24
  9922                           
  9923                           ; BSR set to: 1
  9924                           ;incstack = 0
  9925                           ;I2Cdev_readBits@devAddr stored from wreg
  9926  00504C  6E2E               	movwf	I2Cdev_readBits@devAddr,c
  9927                           
  9928                           ;I2Cdev.c: 212: uint8_t count, b;
  9929                           ;I2Cdev.c: 213: if ((count = I2Cdev_readByte(devAddr, regAddr, &b)) != 0) {
  9930  00504E  C025  F021         	movff	I2Cdev_readBits@regAddr,I2Cdev_readByte@regAddr
  9931  005052  0E30               	movlw	low I2Cdev_readBits@b
  9932  005054  6E22               	movwf	I2Cdev_readByte@data,c
  9933  005056  0E00               	movlw	high I2Cdev_readBits@b
  9934  005058  6E23               	movwf	I2Cdev_readByte@data+1,c
  9935  00505A  502E               	movf	I2Cdev_readBits@devAddr,w,c
  9936  00505C  EC24  F025         	call	_I2Cdev_readByte
  9937  005060  6E2D               	movwf	I2Cdev_readBits@count,c
  9938  005062  502D               	movf	I2Cdev_readBits@count,w,c
  9939  005064  B4D8               	btfsc	status,2,c
  9940  005066  0012               	return	
  9941                           
  9942                           ;I2Cdev.c: 214: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
  9943  005068  5027               	movf	I2Cdev_readBits@length,w,c
  9944  00506A  0800               	sublw	0
  9945  00506C  2426               	addwf	I2Cdev_readBits@bitStart,w,c
  9946  00506E  6E2A               	movwf	??_I2Cdev_readBits& (0+255),c
  9947  005070  0E01               	movlw	1
  9948  005072  262A               	addwf	??_I2Cdev_readBits,f,c
  9949  005074  C027  F02B         	movff	I2Cdev_readBits@length,??_I2Cdev_readBits+1
  9950  005078  0E01               	movlw	1
  9951  00507A  6E2C               	movwf	(??_I2Cdev_readBits+2)& (0+255),c
  9952  00507C  2A2B               	incf	??_I2Cdev_readBits+1,f,c
  9953  00507E  D002               	goto	u3274
  9954  005080                     u3275:
  9955  005080  90D8               	bcf	status,0,c
  9956  005082  362C               	rlcf	??_I2Cdev_readBits+2,f,c
  9957  005084                     u3274:
  9958  005084  2E2B               	decfsz	??_I2Cdev_readBits+1,f,c
  9959  005086  D7FC               	goto	u3275
  9960  005088  0EFF               	movlw	255
  9961  00508A  262C               	addwf	??_I2Cdev_readBits+2,f,c
  9962  00508C  2A2A               	incf	??_I2Cdev_readBits,f,c
  9963  00508E  D002               	goto	u3284
  9964  005090                     u3285:
  9965  005090  90D8               	bcf	status,0,c
  9966  005092  362C               	rlcf	??_I2Cdev_readBits+2,f,c
  9967  005094                     u3284:
  9968  005094  2E2A               	decfsz	??_I2Cdev_readBits,f,c
  9969  005096  D7FC               	goto	u3285
  9970  005098  502C               	movf	??_I2Cdev_readBits+2,w,c
  9971  00509A  6E2F               	movwf	I2Cdev_readBits@mask,c
  9972                           
  9973                           ;I2Cdev.c: 215: b &= mask;
  9974  00509C  502F               	movf	I2Cdev_readBits@mask,w,c
  9975  00509E  1630               	andwf	I2Cdev_readBits@b,f,c
  9976                           
  9977                           ;I2Cdev.c: 216: b >>= (bitStart - length + 1);
  9978  0050A0  5027               	movf	I2Cdev_readBits@length,w,c
  9979  0050A2  0800               	sublw	0
  9980  0050A4  2426               	addwf	I2Cdev_readBits@bitStart,w,c
  9981  0050A6  6E2A               	movwf	??_I2Cdev_readBits& (0+255),c
  9982  0050A8  0E01               	movlw	1
  9983  0050AA  262A               	addwf	??_I2Cdev_readBits,f,c
  9984  0050AC  282A               	incf	??_I2Cdev_readBits,w,c
  9985  0050AE  6E2B               	movwf	(??_I2Cdev_readBits+1)& (0+255),c
  9986  0050B0  D002               	goto	u3290
  9987  0050B2                     u3295:
  9988  0050B2  90D8               	bcf	status,0,c
  9989  0050B4  3230               	rrcf	I2Cdev_readBits@b,f,c
  9990  0050B6                     u3290:
  9991  0050B6  2E2B               	decfsz	(??_I2Cdev_readBits+1)& (0+255),f,c
  9992  0050B8  D7FC               	goto	u3295
  9993                           
  9994                           ;I2Cdev.c: 217: *data = b;
  9995  0050BA  C028  FFD9         	movff	I2Cdev_readBits@data,fsr2l
  9996  0050BE  C029  FFDA         	movff	I2Cdev_readBits@data+1,fsr2h
  9997  0050C2  C030  FFDF         	movff	I2Cdev_readBits@b,indf2
  9998  0050C6  0012               	return	
  9999  0050C8                     __end_of_I2Cdev_readBits:
 10000                           	opt stack 0
 10001                           tblptru	equ	0xFF8
 10002                           tblptrh	equ	0xFF7
 10003                           tblptrl	equ	0xFF6
 10004                           tablat	equ	0xFF5
 10005                           prodh	equ	0xFF4
 10006                           prodl	equ	0xFF3
 10007                           postinc0	equ	0xFEE
 10008                           wreg	equ	0xFE8
 10009                           indf2	equ	0xFDF
 10010                           postinc2	equ	0xFDE
 10011                           postdec2	equ	0xFDD
 10012                           fsr2h	equ	0xFDA
 10013                           fsr2l	equ	0xFD9
 10014                           status	equ	0xFD8
 10015                           
 10016 ;; *************** function _MPU6050_initialize *****************
 10017 ;; Defined at:
 10018 ;;		line 62 in file "MPU6050.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;		None
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;		None
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      void 
 10025 ;; Registers used:
 10026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10032 ;;      Params:         0       0       0       0       0       0       0       0       0
 10033 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10034 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10035 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10036 ;;Total ram usage:        0 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; Hardware stack levels required when called:    6
 10039 ;; This function calls:
 10040 ;;		_MPU6050_setClockSource
 10041 ;;		_MPU6050_setFullScaleAccelRange
 10042 ;;		_MPU6050_setFullScaleGyroRange
 10043 ;;		_MPU6050_setSleepEnabled
 10044 ;; This function is called by:
 10045 ;;		_main
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           	psect	text49
 10050  004A7C                     __ptext49:
 10051                           	opt stack 0
 10052  004A7C                     _MPU6050_initialize:
 10053                           	opt stack 24
 10054                           
 10055                           ;MPU6050.c: 63: MPU6050_setClockSource(0x01);
 10056                           
 10057                           ;incstack = 0
 10058  004A7C  0E01               	movlw	1
 10059  004A7E  EC59  F025         	call	_MPU6050_setClockSource
 10060                           
 10061                           ;MPU6050.c: 64: MPU6050_setFullScaleGyroRange(0x00);
 10062  004A82  0E00               	movlw	0
 10063  004A84  EC75  F025         	call	_MPU6050_setFullScaleGyroRange
 10064                           
 10065                           ;MPU6050.c: 65: MPU6050_setFullScaleAccelRange(0x00);
 10066  004A88  0E00               	movlw	0
 10067  004A8A  EC67  F025         	call	_MPU6050_setFullScaleAccelRange
 10068                           
 10069                           ;MPU6050.c: 66: MPU6050_setSleepEnabled(0);
 10070  004A8E  0E00               	movlw	0
 10071  004A90  EC18  F025         	call	_MPU6050_setSleepEnabled
 10072  004A94  0012               	return		;funcret
 10073  004A96                     __end_of_MPU6050_initialize:
 10074                           	opt stack 0
 10075                           tblptru	equ	0xFF8
 10076                           tblptrh	equ	0xFF7
 10077                           tblptrl	equ	0xFF6
 10078                           tablat	equ	0xFF5
 10079                           prodh	equ	0xFF4
 10080                           prodl	equ	0xFF3
 10081                           postinc0	equ	0xFEE
 10082                           wreg	equ	0xFE8
 10083                           indf2	equ	0xFDF
 10084                           postinc2	equ	0xFDE
 10085                           postdec2	equ	0xFDD
 10086                           fsr2h	equ	0xFDA
 10087                           fsr2l	equ	0xFD9
 10088                           status	equ	0xFD8
 10089                           
 10090 ;; *************** function _MPU6050_setSleepEnabled *****************
 10091 ;; Defined at:
 10092 ;;		line 2382 in file "MPU6050.c"
 10093 ;; Parameters:    Size  Location     Type
 10094 ;;  enabled         1    wreg     unsigned char 
 10095 ;; Auto vars:     Size  Location     Type
 10096 ;;  enabled         1   48[COMRAM] unsigned char 
 10097 ;; Return value:  Size  Location     Type
 10098 ;;                  1    wreg      void 
 10099 ;; Registers used:
 10100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10101 ;; Tracked objects:
 10102 ;;		On entry : 0/0
 10103 ;;		On exit  : 0/0
 10104 ;;		Unchanged: 0/0
 10105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10106 ;;      Params:         0       0       0       0       0       0       0       0       0
 10107 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10108 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10109 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10110 ;;Total ram usage:        1 bytes
 10111 ;; Hardware stack levels used:    1
 10112 ;; Hardware stack levels required when called:    5
 10113 ;; This function calls:
 10114 ;;		_I2Cdev_writeBit
 10115 ;; This function is called by:
 10116 ;;		_MPU6050_initialize
 10117 ;; This function uses a non-reentrant model
 10118 ;;
 10119                           
 10120                           	psect	text50
 10121  004A30                     __ptext50:
 10122                           	opt stack 0
 10123  004A30                     _MPU6050_setSleepEnabled:
 10124                           	opt stack 24
 10125                           
 10126                           ;incstack = 0
 10127                           ;MPU6050_setSleepEnabled@enabled stored from wreg
 10128  004A30  6E31               	movwf	MPU6050_setSleepEnabled@enabled,c
 10129                           
 10130                           ;MPU6050.c: 2383: I2Cdev_writeBit(mpu6050.devAddr, 0x6B, 6, enabled);
 10131  004A32  0E6B               	movlw	107
 10132  004A34  6E25               	movwf	I2Cdev_writeBit@regAddr,c
 10133  004A36  0E06               	movlw	6
 10134  004A38  6E26               	movwf	I2Cdev_writeBit@bitNum,c
 10135  004A3A  C031  F027         	movff	MPU6050_setSleepEnabled@enabled,I2Cdev_writeBit@data
 10136  004A3E  0101               	movlb	1	; () banked
 10137  004A40  512C               	movf	_mpu6050& (0+255),w,b
 10138  004A42  EC64  F028         	call	_I2Cdev_writeBit
 10139  004A46  0012               	return		;funcret
 10140  004A48                     __end_of_MPU6050_setSleepEnabled:
 10141                           	opt stack 0
 10142                           tblptru	equ	0xFF8
 10143                           tblptrh	equ	0xFF7
 10144                           tblptrl	equ	0xFF6
 10145                           tablat	equ	0xFF5
 10146                           prodh	equ	0xFF4
 10147                           prodl	equ	0xFF3
 10148                           postinc0	equ	0xFEE
 10149                           wreg	equ	0xFE8
 10150                           indf2	equ	0xFDF
 10151                           postinc2	equ	0xFDE
 10152                           postdec2	equ	0xFDD
 10153                           fsr2h	equ	0xFDA
 10154                           fsr2l	equ	0xFD9
 10155                           status	equ	0xFD8
 10156                           
 10157 ;; *************** function _I2Cdev_writeBit *****************
 10158 ;; Defined at:
 10159 ;;		line 344 in file "I2Cdev.c"
 10160 ;; Parameters:    Size  Location     Type
 10161 ;;  devAddr         1    wreg     unsigned char 
 10162 ;;  regAddr         1   36[COMRAM] unsigned char 
 10163 ;;  bitNum          1   37[COMRAM] unsigned char 
 10164 ;;  data            1   38[COMRAM] unsigned char 
 10165 ;; Auto vars:     Size  Location     Type
 10166 ;;  devAddr         1   46[COMRAM] unsigned char 
 10167 ;;  b               1   47[COMRAM] unsigned char 
 10168 ;; Return value:  Size  Location     Type
 10169 ;;                  1    wreg      unsigned char 
 10170 ;; Registers used:
 10171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10172 ;; Tracked objects:
 10173 ;;		On entry : 0/0
 10174 ;;		On exit  : 0/0
 10175 ;;		Unchanged: 0/0
 10176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10177 ;;      Params:         3       0       0       0       0       0       0       0       0
 10178 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10179 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10180 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10181 ;;Total ram usage:       12 bytes
 10182 ;; Hardware stack levels used:    1
 10183 ;; Hardware stack levels required when called:    4
 10184 ;; This function calls:
 10185 ;;		_I2Cdev_readByte
 10186 ;;		_I2Cdev_writeByte
 10187 ;; This function is called by:
 10188 ;;		_MPU6050_setSleepEnabled
 10189 ;;		_MPU6050_setAuxVDDIOLevel
 10190 ;;		_MPU6050_setAccelXSelfTest
 10191 ;;		_MPU6050_setAccelYSelfTest
 10192 ;;		_MPU6050_setAccelZSelfTest
 10193 ;;		_MPU6050_setTempFIFOEnabled
 10194 ;;		_MPU6050_setXGyroFIFOEnabled
 10195 ;;		_MPU6050_setYGyroFIFOEnabled
 10196 ;;		_MPU6050_setZGyroFIFOEnabled
 10197 ;;		_MPU6050_setAccelFIFOEnabled
 10198 ;;		_MPU6050_setSlave2FIFOEnabled
 10199 ;;		_MPU6050_setSlave1FIFOEnabled
 10200 ;;		_MPU6050_setSlave0FIFOEnabled
 10201 ;;		_MPU6050_setMultiMasterEnabled
 10202 ;;		_MPU6050_setWaitForExternalSensorEnabled
 10203 ;;		_MPU6050_setSlave3FIFOEnabled
 10204 ;;		_MPU6050_setSlaveReadWriteTransitionEnabled
 10205 ;;		_MPU6050_setSlaveEnabled
 10206 ;;		_MPU6050_setSlaveWordByteSwap
 10207 ;;		_MPU6050_setSlaveWriteMode
 10208 ;;		_MPU6050_setSlaveWordGroupOffset
 10209 ;;		_MPU6050_setSlave4Enabled
 10210 ;;		_MPU6050_setSlave4InterruptEnabled
 10211 ;;		_MPU6050_setSlave4WriteMode
 10212 ;;		_MPU6050_setInterruptMode
 10213 ;;		_MPU6050_setInterruptDrive
 10214 ;;		_MPU6050_setInterruptLatch
 10215 ;;		_MPU6050_setInterruptLatchClear
 10216 ;;		_MPU6050_setFSyncInterruptLevel
 10217 ;;		_MPU6050_setFSyncInterruptEnabled
 10218 ;;		_MPU6050_setI2CBypassEnabled
 10219 ;;		_MPU6050_setClockOutputEnabled
 10220 ;;		_MPU6050_setIntFreefallEnabled
 10221 ;;		_MPU6050_setIntMotionEnabled
 10222 ;;		_MPU6050_setIntZeroMotionEnabled
 10223 ;;		_MPU6050_setIntFIFOBufferOverflowEnabled
 10224 ;;		_MPU6050_setIntI2CMasterEnabled
 10225 ;;		_MPU6050_setIntDataReadyEnabled
 10226 ;;		_MPU6050_setExternalShadowDelayEnabled
 10227 ;;		_MPU6050_setSlaveDelayEnabled
 10228 ;;		_MPU6050_resetGyroscopePath
 10229 ;;		_MPU6050_resetAccelerometerPath
 10230 ;;		_MPU6050_resetTemperaturePath
 10231 ;;		_MPU6050_setFIFOEnabled
 10232 ;;		_MPU6050_setI2CMasterModeEnabled
 10233 ;;		_MPU6050_switchSPIEnabled
 10234 ;;		_MPU6050_resetFIFO
 10235 ;;		_MPU6050_resetI2CMaster
 10236 ;;		_MPU6050_resetSensors
 10237 ;;		_MPU6050_reset
 10238 ;;		_MPU6050_setWakeCycleEnabled
 10239 ;;		_MPU6050_setTempSensorEnabled
 10240 ;;		_MPU6050_setStandbyXAccelEnabled
 10241 ;;		_MPU6050_setStandbyYAccelEnabled
 10242 ;;		_MPU6050_setStandbyZAccelEnabled
 10243 ;;		_MPU6050_setStandbyXGyroEnabled
 10244 ;;		_MPU6050_setStandbyYGyroEnabled
 10245 ;;		_MPU6050_setStandbyZGyroEnabled
 10246 ;;		_MPU6050_setOTPBankValid
 10247 ;;		_MPU6050_setIntPLLReadyEnabled
 10248 ;;		_MPU6050_setIntDMPEnabled
 10249 ;;		_MPU6050_setDMPEnabled
 10250 ;;		_MPU6050_resetDMP
 10251 ;; This function uses a non-reentrant model
 10252 ;;
 10253                           
 10254                           	psect	text51
 10255  0050C8                     __ptext51:
 10256                           	opt stack 0
 10257  0050C8                     _I2Cdev_writeBit:
 10258                           	opt stack 24
 10259                           
 10260                           ;incstack = 0
 10261                           ;I2Cdev_writeBit@devAddr stored from wreg
 10262  0050C8  6E2F               	movwf	I2Cdev_writeBit@devAddr,c
 10263                           
 10264                           ;I2Cdev.c: 345: uint8_t b;
 10265                           ;I2Cdev.c: 346: I2Cdev_readByte(devAddr, regAddr, &b);
 10266  0050CA  C025  F021         	movff	I2Cdev_writeBit@regAddr,I2Cdev_readByte@regAddr
 10267  0050CE  0E30               	movlw	low I2Cdev_writeBit@b
 10268  0050D0  6E22               	movwf	I2Cdev_readByte@data,c
 10269  0050D2  0E00               	movlw	high I2Cdev_writeBit@b
 10270  0050D4  6E23               	movwf	I2Cdev_readByte@data+1,c
 10271  0050D6  502F               	movf	I2Cdev_writeBit@devAddr,w,c
 10272  0050D8  EC24  F025         	call	_I2Cdev_readByte
 10273                           
 10274                           ;I2Cdev.c: 347: b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 10275  0050DC  5027               	movf	I2Cdev_writeBit@data,w,c
 10276  0050DE  A4D8               	btfss	status,2,c
 10277  0050E0  D012               	goto	l310
 10278  0050E2  C026  F028         	movff	I2Cdev_writeBit@bitNum,??_I2Cdev_writeBit
 10279  0050E6  0E01               	movlw	1
 10280  0050E8  6E29               	movwf	(??_I2Cdev_writeBit+1)& (0+255),c
 10281  0050EA  2A28               	incf	??_I2Cdev_writeBit,f,c
 10282  0050EC  D002               	goto	u3314
 10283  0050EE                     u3315:
 10284  0050EE  90D8               	bcf	status,0,c
 10285  0050F0  3629               	rlcf	??_I2Cdev_writeBit+1,f,c
 10286  0050F2                     u3314:
 10287  0050F2  2E28               	decfsz	??_I2Cdev_writeBit,f,c
 10288  0050F4  D7FC               	goto	u3315
 10289  0050F6  5029               	movf	??_I2Cdev_writeBit+1,w,c
 10290  0050F8  0AFF               	xorlw	255
 10291  0050FA  1430               	andwf	I2Cdev_writeBit@b,w,c
 10292  0050FC  6E2A               	movwf	(??_I2Cdev_writeBit+2)& (0+255),c
 10293  0050FE  502A               	movf	??_I2Cdev_writeBit+2,w,c
 10294  005100  6E2D               	movwf	_I2Cdev_writeBit$505,c
 10295  005102  6A2E               	clrf	_I2Cdev_writeBit$505+1,c
 10296  005104  D016               	goto	l312
 10297  005106                     l310:
 10298  005106  C026  F028         	movff	I2Cdev_writeBit@bitNum,??_I2Cdev_writeBit
 10299  00510A  0E01               	movlw	1
 10300  00510C  6E29               	movwf	(??_I2Cdev_writeBit+1)& (0+255),c
 10301  00510E  0E00               	movlw	0
 10302  005110  6E2A               	movwf	(??_I2Cdev_writeBit+2)& (0+255),c
 10303  005112  2A28               	incf	??_I2Cdev_writeBit,f,c
 10304  005114  D003               	goto	u3324
 10305  005116                     u3325:
 10306  005116  90D8               	bcf	status,0,c
 10307  005118  3629               	rlcf	??_I2Cdev_writeBit+1,f,c
 10308  00511A  362A               	rlcf	??_I2Cdev_writeBit+2,f,c
 10309  00511C                     u3324:
 10310  00511C  2E28               	decfsz	??_I2Cdev_writeBit,f,c
 10311  00511E  D7FB               	goto	u3325
 10312  005120  5030               	movf	I2Cdev_writeBit@b,w,c
 10313  005122  6E2B               	movwf	(??_I2Cdev_writeBit+3)& (0+255),c
 10314  005124  6A2C               	clrf	(??_I2Cdev_writeBit+4)& (0+255),c
 10315  005126  5029               	movf	??_I2Cdev_writeBit+1,w,c
 10316  005128  102B               	iorwf	??_I2Cdev_writeBit+3,w,c
 10317  00512A  6E2D               	movwf	_I2Cdev_writeBit$505,c
 10318  00512C  502A               	movf	??_I2Cdev_writeBit+2,w,c
 10319  00512E  102C               	iorwf	??_I2Cdev_writeBit+4,w,c
 10320  005130  6E2E               	movwf	_I2Cdev_writeBit$505+1,c
 10321  005132                     l312:
 10322  005132  C02D  F030         	movff	_I2Cdev_writeBit$505,I2Cdev_writeBit@b
 10323                           
 10324                           ;I2Cdev.c: 348: return I2Cdev_writeByte(devAddr, regAddr, b);
 10325                           ;	Return value of _I2Cdev_writeBit is never used
 10326  005136  C025  F009         	movff	I2Cdev_writeBit@regAddr,I2Cdev_writeByte@regAddr
 10327  00513A  C030  F00A         	movff	I2Cdev_writeBit@b,I2Cdev_writeByte@data
 10328  00513E  502F               	movf	I2Cdev_writeBit@devAddr,w,c
 10329  005140  EC31  F025         	call	_I2Cdev_writeByte
 10330  005144  0012               	return	
 10331  005146                     __end_of_I2Cdev_writeBit:
 10332                           	opt stack 0
 10333                           tblptru	equ	0xFF8
 10334                           tblptrh	equ	0xFF7
 10335                           tblptrl	equ	0xFF6
 10336                           tablat	equ	0xFF5
 10337                           prodh	equ	0xFF4
 10338                           prodl	equ	0xFF3
 10339                           postinc0	equ	0xFEE
 10340                           wreg	equ	0xFE8
 10341                           indf2	equ	0xFDF
 10342                           postinc2	equ	0xFDE
 10343                           postdec2	equ	0xFDD
 10344                           fsr2h	equ	0xFDA
 10345                           fsr2l	equ	0xFD9
 10346                           status	equ	0xFD8
 10347                           
 10348 ;; *************** function _MPU6050_setFullScaleGyroRange *****************
 10349 ;; Defined at:
 10350 ;;		line 251 in file "MPU6050.c"
 10351 ;; Parameters:    Size  Location     Type
 10352 ;;  range           1    wreg     unsigned char 
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;  range           1   46[COMRAM] unsigned char 
 10355 ;; Return value:  Size  Location     Type
 10356 ;;                  1    wreg      void 
 10357 ;; Registers used:
 10358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10359 ;; Tracked objects:
 10360 ;;		On entry : 0/0
 10361 ;;		On exit  : 0/0
 10362 ;;		Unchanged: 0/0
 10363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10364 ;;      Params:         0       0       0       0       0       0       0       0       0
 10365 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10366 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10367 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10368 ;;Total ram usage:        1 bytes
 10369 ;; Hardware stack levels used:    1
 10370 ;; Hardware stack levels required when called:    5
 10371 ;; This function calls:
 10372 ;;		_I2Cdev_writeBits
 10373 ;; This function is called by:
 10374 ;;		_MPU6050_initialize
 10375 ;; This function uses a non-reentrant model
 10376 ;;
 10377                           
 10378                           	psect	text52
 10379  004AEA                     __ptext52:
 10380                           	opt stack 0
 10381  004AEA                     _MPU6050_setFullScaleGyroRange:
 10382                           	opt stack 24
 10383                           
 10384                           ;incstack = 0
 10385                           ;MPU6050_setFullScaleGyroRange@range stored from wreg
 10386  004AEA  6E2F               	movwf	MPU6050_setFullScaleGyroRange@range,c
 10387                           
 10388                           ;MPU6050.c: 252: I2Cdev_writeBits(mpu6050.devAddr, 0x1B, 4, 2, range);
 10389  004AEC  0E1B               	movlw	27
 10390  004AEE  6E25               	movwf	I2Cdev_writeBits@regAddr,c
 10391  004AF0  0E04               	movlw	4
 10392  004AF2  6E26               	movwf	I2Cdev_writeBits@bitStart,c
 10393  004AF4  0E02               	movlw	2
 10394  004AF6  6E27               	movwf	I2Cdev_writeBits@length,c
 10395  004AF8  C02F  F028         	movff	MPU6050_setFullScaleGyroRange@range,I2Cdev_writeBits@data
 10396  004AFC  0101               	movlb	1	; () banked
 10397  004AFE  512C               	movf	_mpu6050& (0+255),w,b
 10398  004B00  EC26  F029         	call	_I2Cdev_writeBits
 10399  004B04  0012               	return		;funcret
 10400  004B06                     __end_of_MPU6050_setFullScaleGyroRange:
 10401                           	opt stack 0
 10402                           tblptru	equ	0xFF8
 10403                           tblptrh	equ	0xFF7
 10404                           tblptrl	equ	0xFF6
 10405                           tablat	equ	0xFF5
 10406                           prodh	equ	0xFF4
 10407                           prodl	equ	0xFF3
 10408                           postinc0	equ	0xFEE
 10409                           wreg	equ	0xFE8
 10410                           indf2	equ	0xFDF
 10411                           postinc2	equ	0xFDE
 10412                           postdec2	equ	0xFDD
 10413                           fsr2h	equ	0xFDA
 10414                           fsr2l	equ	0xFD9
 10415                           status	equ	0xFD8
 10416                           
 10417 ;; *************** function _MPU6050_setFullScaleAccelRange *****************
 10418 ;; Defined at:
 10419 ;;		line 327 in file "MPU6050.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;  range           1    wreg     unsigned char 
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;  range           1   46[COMRAM] unsigned char 
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  1    wreg      void 
 10426 ;; Registers used:
 10427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10433 ;;      Params:         0       0       0       0       0       0       0       0       0
 10434 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10435 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10436 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10437 ;;Total ram usage:        1 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    5
 10440 ;; This function calls:
 10441 ;;		_I2Cdev_writeBits
 10442 ;; This function is called by:
 10443 ;;		_MPU6050_initialize
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           	psect	text53
 10448  004ACE                     __ptext53:
 10449                           	opt stack 0
 10450  004ACE                     _MPU6050_setFullScaleAccelRange:
 10451                           	opt stack 24
 10452                           
 10453                           ;incstack = 0
 10454                           ;MPU6050_setFullScaleAccelRange@range stored from wreg
 10455  004ACE  6E2F               	movwf	MPU6050_setFullScaleAccelRange@range,c
 10456                           
 10457                           ;MPU6050.c: 328: I2Cdev_writeBits(mpu6050.devAddr, 0x1C, 4, 2, range);
 10458  004AD0  0E1C               	movlw	28
 10459  004AD2  6E25               	movwf	I2Cdev_writeBits@regAddr,c
 10460  004AD4  0E04               	movlw	4
 10461  004AD6  6E26               	movwf	I2Cdev_writeBits@bitStart,c
 10462  004AD8  0E02               	movlw	2
 10463  004ADA  6E27               	movwf	I2Cdev_writeBits@length,c
 10464  004ADC  C02F  F028         	movff	MPU6050_setFullScaleAccelRange@range,I2Cdev_writeBits@data
 10465  004AE0  0101               	movlb	1	; () banked
 10466  004AE2  512C               	movf	_mpu6050& (0+255),w,b
 10467  004AE4  EC26  F029         	call	_I2Cdev_writeBits
 10468  004AE8  0012               	return		;funcret
 10469  004AEA                     __end_of_MPU6050_setFullScaleAccelRange:
 10470                           	opt stack 0
 10471                           tblptru	equ	0xFF8
 10472                           tblptrh	equ	0xFF7
 10473                           tblptrl	equ	0xFF6
 10474                           tablat	equ	0xFF5
 10475                           prodh	equ	0xFF4
 10476                           prodl	equ	0xFF3
 10477                           postinc0	equ	0xFEE
 10478                           wreg	equ	0xFE8
 10479                           indf2	equ	0xFDF
 10480                           postinc2	equ	0xFDE
 10481                           postdec2	equ	0xFDD
 10482                           fsr2h	equ	0xFDA
 10483                           fsr2l	equ	0xFD9
 10484                           status	equ	0xFD8
 10485                           
 10486 ;; *************** function _MPU6050_setClockSource *****************
 10487 ;; Defined at:
 10488 ;;		line 2475 in file "MPU6050.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;  source          1    wreg     unsigned char 
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;  source          1   46[COMRAM] unsigned char 
 10493 ;; Return value:  Size  Location     Type
 10494 ;;                  1    wreg      void 
 10495 ;; Registers used:
 10496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0
 10503 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10505 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10506 ;;Total ram usage:        1 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    5
 10509 ;; This function calls:
 10510 ;;		_I2Cdev_writeBits
 10511 ;; This function is called by:
 10512 ;;		_MPU6050_initialize
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           	psect	text54
 10517  004AB2                     __ptext54:
 10518                           	opt stack 0
 10519  004AB2                     _MPU6050_setClockSource:
 10520                           	opt stack 24
 10521                           
 10522                           ;incstack = 0
 10523                           ;MPU6050_setClockSource@source stored from wreg
 10524  004AB2  6E2F               	movwf	MPU6050_setClockSource@source,c
 10525                           
 10526                           ;MPU6050.c: 2476: I2Cdev_writeBits(mpu6050.devAddr, 0x6B, 2, 3, source);
 10527  004AB4  0E6B               	movlw	107
 10528  004AB6  6E25               	movwf	I2Cdev_writeBits@regAddr,c
 10529  004AB8  0E02               	movlw	2
 10530  004ABA  6E26               	movwf	I2Cdev_writeBits@bitStart,c
 10531  004ABC  0E03               	movlw	3
 10532  004ABE  6E27               	movwf	I2Cdev_writeBits@length,c
 10533  004AC0  C02F  F028         	movff	MPU6050_setClockSource@source,I2Cdev_writeBits@data
 10534  004AC4  0101               	movlb	1	; () banked
 10535  004AC6  512C               	movf	_mpu6050& (0+255),w,b
 10536  004AC8  EC26  F029         	call	_I2Cdev_writeBits
 10537  004ACC  0012               	return		;funcret
 10538  004ACE                     __end_of_MPU6050_setClockSource:
 10539                           	opt stack 0
 10540                           tblptru	equ	0xFF8
 10541                           tblptrh	equ	0xFF7
 10542                           tblptrl	equ	0xFF6
 10543                           tablat	equ	0xFF5
 10544                           prodh	equ	0xFF4
 10545                           prodl	equ	0xFF3
 10546                           postinc0	equ	0xFEE
 10547                           wreg	equ	0xFE8
 10548                           indf2	equ	0xFDF
 10549                           postinc2	equ	0xFDE
 10550                           postdec2	equ	0xFDD
 10551                           fsr2h	equ	0xFDA
 10552                           fsr2l	equ	0xFD9
 10553                           status	equ	0xFD8
 10554                           
 10555 ;; *************** function _I2Cdev_writeBits *****************
 10556 ;; Defined at:
 10557 ;;		line 373 in file "I2Cdev.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;  devAddr         1    wreg     unsigned char 
 10560 ;;  regAddr         1   36[COMRAM] unsigned char 
 10561 ;;  bitStart        1   37[COMRAM] unsigned char 
 10562 ;;  length          1   38[COMRAM] unsigned char 
 10563 ;;  data            1   39[COMRAM] unsigned char 
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;  devAddr         1   43[COMRAM] unsigned char 
 10566 ;;  mask            1   44[COMRAM] unsigned char 
 10567 ;;  b               1   45[COMRAM] unsigned char 
 10568 ;; Return value:  Size  Location     Type
 10569 ;;                  1    wreg      unsigned char 
 10570 ;; Registers used:
 10571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10572 ;; Tracked objects:
 10573 ;;		On entry : 0/0
 10574 ;;		On exit  : 0/0
 10575 ;;		Unchanged: 0/0
 10576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10577 ;;      Params:         4       0       0       0       0       0       0       0       0
 10578 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10579 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10580 ;;      Totals:        10       0       0       0       0       0       0       0       0
 10581 ;;Total ram usage:       10 bytes
 10582 ;; Hardware stack levels used:    1
 10583 ;; Hardware stack levels required when called:    4
 10584 ;; This function calls:
 10585 ;;		_I2Cdev_readByte
 10586 ;;		_I2Cdev_writeByte
 10587 ;; This function is called by:
 10588 ;;		_MPU6050_setFullScaleGyroRange
 10589 ;;		_MPU6050_setFullScaleAccelRange
 10590 ;;		_MPU6050_setClockSource
 10591 ;;		_MPU6050_setExternalFrameSync
 10592 ;;		_MPU6050_setDLPFMode
 10593 ;;		_MPU6050_setDHPFMode
 10594 ;;		_MPU6050_setMasterClockSpeed
 10595 ;;		_MPU6050_setSlaveDataLength
 10596 ;;		_MPU6050_setSlave4MasterDelay
 10597 ;;		_MPU6050_setAccelerometerPowerOnDelay
 10598 ;;		_MPU6050_setFreefallDetectionCounterDecrement
 10599 ;;		_MPU6050_setMotionDetectionCounterDecrement
 10600 ;;		_MPU6050_setWakeFrequency
 10601 ;;		_MPU6050_setDeviceID
 10602 ;;		_MPU6050_setXGyroOffsetTC
 10603 ;;		_MPU6050_setYGyroOffsetTC
 10604 ;;		_MPU6050_setZGyroOffsetTC
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           	psect	text55
 10609  00524C                     __ptext55:
 10610                           	opt stack 0
 10611  00524C                     _I2Cdev_writeBits:
 10612                           	opt stack 24
 10613                           
 10614                           ;incstack = 0
 10615                           ;I2Cdev_writeBits@devAddr stored from wreg
 10616  00524C  6E2C               	movwf	I2Cdev_writeBits@devAddr,c
 10617                           
 10618                           ;I2Cdev.c: 381: uint8_t b;
 10619                           ;I2Cdev.c: 382: if (I2Cdev_readByte(devAddr, regAddr, &b) != 0) {
 10620  00524E  C025  F021         	movff	I2Cdev_writeBits@regAddr,I2Cdev_readByte@regAddr
 10621  005252  0E2E               	movlw	low I2Cdev_writeBits@b
 10622  005254  6E22               	movwf	I2Cdev_readByte@data,c
 10623  005256  0E00               	movlw	high I2Cdev_writeBits@b
 10624  005258  6E23               	movwf	I2Cdev_readByte@data+1,c
 10625  00525A  502C               	movf	I2Cdev_writeBits@devAddr,w,c
 10626  00525C  EC24  F025         	call	_I2Cdev_readByte
 10627  005260  0900               	iorlw	0
 10628  005262  B4D8               	btfsc	status,2,c
 10629  005264  0012               	return	
 10630                           
 10631                           ;I2Cdev.c: 383: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 10632  005266  5027               	movf	I2Cdev_writeBits@length,w,c
 10633  005268  0800               	sublw	0
 10634  00526A  2426               	addwf	I2Cdev_writeBits@bitStart,w,c
 10635  00526C  6E29               	movwf	??_I2Cdev_writeBits& (0+255),c
 10636  00526E  0E01               	movlw	1
 10637  005270  2629               	addwf	??_I2Cdev_writeBits,f,c
 10638  005272  C027  F02A         	movff	I2Cdev_writeBits@length,??_I2Cdev_writeBits+1
 10639  005276  0E01               	movlw	1
 10640  005278  6E2B               	movwf	(??_I2Cdev_writeBits+2)& (0+255),c
 10641  00527A  2A2A               	incf	??_I2Cdev_writeBits+1,f,c
 10642  00527C  D002               	goto	u3344
 10643  00527E                     u3345:
 10644  00527E  90D8               	bcf	status,0,c
 10645  005280  362B               	rlcf	??_I2Cdev_writeBits+2,f,c
 10646  005282                     u3344:
 10647  005282  2E2A               	decfsz	??_I2Cdev_writeBits+1,f,c
 10648  005284  D7FC               	goto	u3345
 10649  005286  0EFF               	movlw	255
 10650  005288  262B               	addwf	??_I2Cdev_writeBits+2,f,c
 10651  00528A  2A29               	incf	??_I2Cdev_writeBits,f,c
 10652  00528C  D002               	goto	u3354
 10653  00528E                     u3355:
 10654  00528E  90D8               	bcf	status,0,c
 10655  005290  362B               	rlcf	??_I2Cdev_writeBits+2,f,c
 10656  005292                     u3354:
 10657  005292  2E29               	decfsz	??_I2Cdev_writeBits,f,c
 10658  005294  D7FC               	goto	u3355
 10659  005296  502B               	movf	??_I2Cdev_writeBits+2,w,c
 10660  005298  6E2D               	movwf	I2Cdev_writeBits@mask,c
 10661                           
 10662                           ;I2Cdev.c: 384: data <<= (bitStart - length + 1);
 10663  00529A  5027               	movf	I2Cdev_writeBits@length,w,c
 10664  00529C  0800               	sublw	0
 10665  00529E  2426               	addwf	I2Cdev_writeBits@bitStart,w,c
 10666  0052A0  6E29               	movwf	??_I2Cdev_writeBits& (0+255),c
 10667  0052A2  0E01               	movlw	1
 10668  0052A4  2629               	addwf	??_I2Cdev_writeBits,f,c
 10669  0052A6  2829               	incf	??_I2Cdev_writeBits,w,c
 10670  0052A8  6E2A               	movwf	(??_I2Cdev_writeBits+1)& (0+255),c
 10671  0052AA  D002               	goto	u3360
 10672  0052AC                     u3365:
 10673  0052AC  90D8               	bcf	status,0,c
 10674  0052AE  3628               	rlcf	I2Cdev_writeBits@data,f,c
 10675  0052B0                     u3360:
 10676  0052B0  2E2A               	decfsz	(??_I2Cdev_writeBits+1)& (0+255),f,c
 10677  0052B2  D7FC               	goto	u3365
 10678                           
 10679                           ;I2Cdev.c: 385: data &= mask;
 10680  0052B4  502D               	movf	I2Cdev_writeBits@mask,w,c
 10681  0052B6  1628               	andwf	I2Cdev_writeBits@data,f,c
 10682                           
 10683                           ;I2Cdev.c: 386: b &= ~(mask);
 10684  0052B8  502D               	movf	I2Cdev_writeBits@mask,w,c
 10685  0052BA  0AFF               	xorlw	255
 10686  0052BC  162E               	andwf	I2Cdev_writeBits@b,f,c
 10687                           
 10688                           ;I2Cdev.c: 387: b |= data;
 10689  0052BE  5028               	movf	I2Cdev_writeBits@data,w,c
 10690  0052C0  122E               	iorwf	I2Cdev_writeBits@b,f,c
 10691                           
 10692                           ;I2Cdev.c: 388: return I2Cdev_writeByte(devAddr, regAddr, b);
 10693                           ;	Return value of _I2Cdev_writeBits is never used
 10694  0052C2  C025  F009         	movff	I2Cdev_writeBits@regAddr,I2Cdev_writeByte@regAddr
 10695  0052C6  C02E  F00A         	movff	I2Cdev_writeBits@b,I2Cdev_writeByte@data
 10696  0052CA  502C               	movf	I2Cdev_writeBits@devAddr,w,c
 10697  0052CC  EC31  F025         	call	_I2Cdev_writeByte
 10698                           
 10699                           ;I2Cdev.c: 390: return 0;
 10700                           ;	Return value of _I2Cdev_writeBits is never used
 10701                           
 10702                           ;I2Cdev.c: 389: } else {
 10703  0052D0  0012               	return	
 10704  0052D2                     __end_of_I2Cdev_writeBits:
 10705                           	opt stack 0
 10706                           tblptru	equ	0xFF8
 10707                           tblptrh	equ	0xFF7
 10708                           tblptrl	equ	0xFF6
 10709                           tablat	equ	0xFF5
 10710                           prodh	equ	0xFF4
 10711                           prodl	equ	0xFF3
 10712                           postinc0	equ	0xFEE
 10713                           wreg	equ	0xFE8
 10714                           indf2	equ	0xFDF
 10715                           postinc2	equ	0xFDE
 10716                           postdec2	equ	0xFDD
 10717                           fsr2h	equ	0xFDA
 10718                           fsr2l	equ	0xFD9
 10719                           status	equ	0xFD8
 10720                           
 10721 ;; *************** function _I2Cdev_writeByte *****************
 10722 ;; Defined at:
 10723 ;;		line 286 in file "I2Cdev.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;  devAddr         1    wreg     unsigned char 
 10726 ;;  regAddr         1    8[COMRAM] unsigned char 
 10727 ;;  data            1    9[COMRAM] unsigned char 
 10728 ;; Auto vars:     Size  Location     Type
 10729 ;;  devAddr         1   10[COMRAM] unsigned char 
 10730 ;; Return value:  Size  Location     Type
 10731 ;;                  1    wreg      unsigned char 
 10732 ;; Registers used:
 10733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10734 ;; Tracked objects:
 10735 ;;		On entry : 0/0
 10736 ;;		On exit  : 0/0
 10737 ;;		Unchanged: 0/0
 10738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10739 ;;      Params:         2       0       0       0       0       0       0       0       0
 10740 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10741 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10742 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10743 ;;Total ram usage:        3 bytes
 10744 ;; Hardware stack levels used:    1
 10745 ;; Hardware stack levels required when called:    3
 10746 ;; This function calls:
 10747 ;;		_I2Cdev_writeBytes
 10748 ;; This function is called by:
 10749 ;;		_I2Cdev_writeBit
 10750 ;;		_I2Cdev_writeBits
 10751 ;;		_MPU6050_setRate
 10752 ;;		_MPU6050_setFreefallDetectionThreshold
 10753 ;;		_MPU6050_setFreefallDetectionDuration
 10754 ;;		_MPU6050_setMotionDetectionThreshold
 10755 ;;		_MPU6050_setMotionDetectionDuration
 10756 ;;		_MPU6050_setZeroMotionDetectionThreshold
 10757 ;;		_MPU6050_setZeroMotionDetectionDuration
 10758 ;;		_MPU6050_setSlaveAddress
 10759 ;;		_MPU6050_setSlaveRegister
 10760 ;;		_MPU6050_setSlave4Address
 10761 ;;		_MPU6050_setSlave4Register
 10762 ;;		_MPU6050_setSlave4OutputByte
 10763 ;;		_MPU6050_setIntEnabled
 10764 ;;		_MPU6050_setSlaveOutputByte
 10765 ;;		_MPU6050_setFIFOByte
 10766 ;;		_MPU6050_setXFineGain
 10767 ;;		_MPU6050_setYFineGain
 10768 ;;		_MPU6050_setZFineGain
 10769 ;;		_MPU6050_setMemoryBank
 10770 ;;		_MPU6050_setMemoryStartAddress
 10771 ;;		_MPU6050_writeMemoryByte
 10772 ;;		_MPU6050_setDMPConfig1
 10773 ;;		_MPU6050_setDMPConfig2
 10774 ;; This function uses a non-reentrant model
 10775 ;;
 10776                           
 10777                           	psect	text56
 10778  004A62                     __ptext56:
 10779                           	opt stack 0
 10780  004A62                     _I2Cdev_writeByte:
 10781                           	opt stack 24
 10782                           
 10783                           ;incstack = 0
 10784                           ;I2Cdev_writeByte@devAddr stored from wreg
 10785  004A62  6E0B               	movwf	I2Cdev_writeByte@devAddr,c
 10786                           
 10787                           ;I2Cdev.c: 287: return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 10788  004A64  C009  F003         	movff	I2Cdev_writeByte@regAddr,I2Cdev_writeBytes@regAddr
 10789  004A68  0E01               	movlw	1
 10790  004A6A  6E04               	movwf	I2Cdev_writeBytes@length,c
 10791  004A6C  0E0A               	movlw	low I2Cdev_writeByte@data
 10792  004A6E  6E05               	movwf	I2Cdev_writeBytes@data,c
 10793  004A70  0E00               	movlw	high I2Cdev_writeByte@data
 10794  004A72  6E06               	movwf	I2Cdev_writeBytes@data+1,c
 10795  004A74  500B               	movf	I2Cdev_writeByte@devAddr,w,c
 10796  004A76  EC87  F026         	call	_I2Cdev_writeBytes
 10797  004A7A  0012               	return	
 10798  004A7C                     __end_of_I2Cdev_writeByte:
 10799                           	opt stack 0
 10800                           tblptru	equ	0xFF8
 10801                           tblptrh	equ	0xFF7
 10802                           tblptrl	equ	0xFF6
 10803                           tablat	equ	0xFF5
 10804                           prodh	equ	0xFF4
 10805                           prodl	equ	0xFF3
 10806                           postinc0	equ	0xFEE
 10807                           wreg	equ	0xFE8
 10808                           indf2	equ	0xFDF
 10809                           postinc2	equ	0xFDE
 10810                           postdec2	equ	0xFDD
 10811                           fsr2h	equ	0xFDA
 10812                           fsr2l	equ	0xFD9
 10813                           status	equ	0xFD8
 10814                           
 10815 ;; *************** function _I2Cdev_writeBytes *****************
 10816 ;; Defined at:
 10817 ;;		line 254 in file "I2Cdev.c"
 10818 ;; Parameters:    Size  Location     Type
 10819 ;;  devAddr         1    wreg     unsigned char 
 10820 ;;  regAddr         1    2[COMRAM] unsigned char 
 10821 ;;  length          1    3[COMRAM] unsigned char 
 10822 ;;  data            2    4[COMRAM] PTR unsigned char 
 10823 ;;		 -> I2Cdev_writeByte@data(1), 
 10824 ;; Auto vars:     Size  Location     Type
 10825 ;;  devAddr         1    6[COMRAM] unsigned char 
 10826 ;;  i               1    7[COMRAM] unsigned char 
 10827 ;; Return value:  Size  Location     Type
 10828 ;;                  1    wreg      unsigned char 
 10829 ;; Registers used:
 10830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10831 ;; Tracked objects:
 10832 ;;		On entry : 0/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10836 ;;      Params:         4       0       0       0       0       0       0       0       0
 10837 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10838 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10839 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10840 ;;Total ram usage:        6 bytes
 10841 ;; Hardware stack levels used:    1
 10842 ;; Hardware stack levels required when called:    2
 10843 ;; This function calls:
 10844 ;;		_IdleI2C
 10845 ;;		_WriteI2C
 10846 ;; This function is called by:
 10847 ;;		_I2Cdev_writeByte
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           	psect	text57
 10852  004D0E                     __ptext57:
 10853                           	opt stack 0
 10854  004D0E                     _I2Cdev_writeBytes:
 10855                           	opt stack 24
 10856                           
 10857                           ;incstack = 0
 10858                           ;I2Cdev_writeBytes@devAddr stored from wreg
 10859  004D0E  6E07               	movwf	I2Cdev_writeBytes@devAddr,c
 10860                           
 10861                           ;I2Cdev.c: 256: IdleI2C();
 10862  004D10  EC06  F025         	call	_IdleI2C	;wreg free
 10863                           
 10864                           ;I2Cdev.c: 257: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 10865  004D14  80C5               	bsf	4037,0,c	;volatile
 10866  004D16  B0C5               	btfsc	4037,0,c	;volatile
 10867  004D18  D7FE               	goto	l280
 10868                           
 10869                           ;I2Cdev.c: 260: IdleI2C();
 10870  004D1A  EC06  F025         	call	_IdleI2C	;wreg free
 10871                           
 10872                           ;I2Cdev.c: 261: WriteI2C(devAddr << 1 | 0x00);
 10873  004D1E  5007               	movf	I2Cdev_writeBytes@devAddr,w,c
 10874  004D20  2407               	addwf	I2Cdev_writeBytes@devAddr,w,c
 10875  004D22  EC61  F026         	call	_WriteI2C
 10876                           
 10877                           ;I2Cdev.c: 264: IdleI2C();
 10878  004D26  EC06  F025         	call	_IdleI2C	;wreg free
 10879                           
 10880                           ;I2Cdev.c: 265: WriteI2C(regAddr);
 10881  004D2A  5003               	movf	I2Cdev_writeBytes@regAddr,w,c
 10882  004D2C  EC61  F026         	call	_WriteI2C
 10883                           
 10884                           ;I2Cdev.c: 267: for (uint8_t i = 0; i < length; i++) {
 10885  004D30  0E00               	movlw	0
 10886  004D32  6E08               	movwf	I2Cdev_writeBytes@i,c
 10887  004D34  D00E               	goto	l282
 10888  004D36                     
 10889                           ;I2Cdev.c: 269: IdleI2C();
 10890  004D36  EC06  F025         	call	_IdleI2C	;wreg free
 10891                           
 10892                           ;I2Cdev.c: 270: WriteI2C(data[i]);
 10893  004D3A  5008               	movf	I2Cdev_writeBytes@i,w,c
 10894  004D3C  0D01               	mullw	1
 10895  004D3E  50F3               	movf	prodl,w,c
 10896  004D40  2405               	addwf	I2Cdev_writeBytes@data,w,c
 10897  004D42  6ED9               	movwf	fsr2l,c
 10898  004D44  50F4               	movf	prodh,w,c
 10899  004D46  2006               	addwfc	I2Cdev_writeBytes@data+1,w,c
 10900  004D48  6EDA               	movwf	fsr2h,c
 10901  004D4A  50DF               	movf	indf2,w,c
 10902  004D4C  EC61  F026         	call	_WriteI2C
 10903  004D50  2A08               	incf	I2Cdev_writeBytes@i,f,c
 10904  004D52                     l282:
 10905  004D52  5004               	movf	I2Cdev_writeBytes@length,w,c
 10906  004D54  5C08               	subwf	I2Cdev_writeBytes@i,w,c
 10907  004D56  A0D8               	btfss	status,0,c
 10908  004D58  D7EE               	goto	l283
 10909                           
 10910                           ;I2Cdev.c: 271: }
 10911                           ;I2Cdev.c: 274: IdleI2C();
 10912  004D5A  EC06  F025         	call	_IdleI2C	;wreg free
 10913                           
 10914                           ;I2Cdev.c: 275: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 10915  004D5E  84C5               	bsf	4037,2,c	;volatile
 10916  004D60  B4C5               	btfsc	4037,2,c	;volatile
 10917  004D62  D7FE               	goto	l286
 10918                           
 10919                           ;I2Cdev.c: 277: return 1;
 10920  004D64  0E01               	movlw	1
 10921  004D66  0012               	return	
 10922  004D68                     __end_of_I2Cdev_writeBytes:
 10923                           	opt stack 0
 10924                           tblptru	equ	0xFF8
 10925                           tblptrh	equ	0xFF7
 10926                           tblptrl	equ	0xFF6
 10927                           tablat	equ	0xFF5
 10928                           prodh	equ	0xFF4
 10929                           prodl	equ	0xFF3
 10930                           postinc0	equ	0xFEE
 10931                           wreg	equ	0xFE8
 10932                           indf2	equ	0xFDF
 10933                           postinc2	equ	0xFDE
 10934                           postdec2	equ	0xFDD
 10935                           fsr2h	equ	0xFDA
 10936                           fsr2l	equ	0xFD9
 10937                           status	equ	0xFD8
 10938                           
 10939 ;; *************** function _I2Cdev_readByte *****************
 10940 ;; Defined at:
 10941 ;;		line 95 in file "I2Cdev.c"
 10942 ;; Parameters:    Size  Location     Type
 10943 ;;  devAddr         1    wreg     unsigned char 
 10944 ;;  regAddr         1   32[COMRAM] unsigned char 
 10945 ;;  data            2   33[COMRAM] PTR unsigned char 
 10946 ;;		 -> mpu6050(15), I2Cdev_writeBits@b(1), I2Cdev_writeBit@b(1), I2Cdev_readBits@b(1), 
 10947 ;;		 -> I2Cdev_readBit@b(1), 
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  devAddr         1   35[COMRAM] unsigned char 
 10950 ;; Return value:  Size  Location     Type
 10951 ;;                  1    wreg      char 
 10952 ;; Registers used:
 10953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10959 ;;      Params:         3       0       0       0       0       0       0       0       0
 10960 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10961 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10962 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10963 ;;Total ram usage:        4 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    3
 10966 ;; This function calls:
 10967 ;;		_I2Cdev_readBytes
 10968 ;; This function is called by:
 10969 ;;		_I2Cdev_readBits
 10970 ;;		_I2Cdev_writeBit
 10971 ;;		_I2Cdev_writeBits
 10972 ;;		_I2Cdev_readBit
 10973 ;;		_MPU6050_getRate
 10974 ;;		_MPU6050_getFreefallDetectionThreshold
 10975 ;;		_MPU6050_getFreefallDetectionDuration
 10976 ;;		_MPU6050_getMotionDetectionThreshold
 10977 ;;		_MPU6050_getMotionDetectionDuration
 10978 ;;		_MPU6050_getZeroMotionDetectionThreshold
 10979 ;;		_MPU6050_getZeroMotionDetectionDuration
 10980 ;;		_MPU6050_getSlaveAddress
 10981 ;;		_MPU6050_getSlaveRegister
 10982 ;;		_MPU6050_getSlave4Address
 10983 ;;		_MPU6050_getSlave4Register
 10984 ;;		_MPU6050_getSlate4InputByte
 10985 ;;		_MPU6050_getIntEnabled
 10986 ;;		_MPU6050_getIntStatus
 10987 ;;		_MPU6050_getExternalSensorByte
 10988 ;;		_MPU6050_getFIFOByte
 10989 ;;		_MPU6050_getXFineGain
 10990 ;;		_MPU6050_getYFineGain
 10991 ;;		_MPU6050_getZFineGain
 10992 ;;		_MPU6050_readMemoryByte
 10993 ;;		_MPU6050_getDMPConfig1
 10994 ;;		_MPU6050_getDMPConfig2
 10995 ;; This function uses a non-reentrant model
 10996 ;;
 10997                           
 10998                           	psect	text58
 10999  004A48                     __ptext58:
 11000                           	opt stack 0
 11001  004A48                     _I2Cdev_readByte:
 11002                           	opt stack 24
 11003                           
 11004                           ;incstack = 0
 11005                           ;I2Cdev_readByte@devAddr stored from wreg
 11006  004A48  6E24               	movwf	I2Cdev_readByte@devAddr,c
 11007                           
 11008                           ;I2Cdev.c: 96: return I2Cdev_readBytes(devAddr, regAddr, 1, data);
 11009  004A4A  C021  F015         	movff	I2Cdev_readByte@regAddr,I2Cdev_readBytes@regAddr
 11010  004A4E  0E01               	movlw	1
 11011  004A50  6E16               	movwf	I2Cdev_readBytes@length,c
 11012  004A52  C022  F017         	movff	I2Cdev_readByte@data,I2Cdev_readBytes@data
 11013  004A56  C023  F018         	movff	I2Cdev_readByte@data+1,I2Cdev_readBytes@data+1
 11014  004A5A  5024               	movf	I2Cdev_readByte@devAddr,w,c
 11015  004A5C  ECFE  F02B         	call	_I2Cdev_readBytes
 11016  004A60  0012               	return	
 11017  004A62                     __end_of_I2Cdev_readByte:
 11018                           	opt stack 0
 11019                           tblptru	equ	0xFF8
 11020                           tblptrh	equ	0xFF7
 11021                           tblptrl	equ	0xFF6
 11022                           tablat	equ	0xFF5
 11023                           prodh	equ	0xFF4
 11024                           prodl	equ	0xFF3
 11025                           postinc0	equ	0xFEE
 11026                           wreg	equ	0xFE8
 11027                           indf2	equ	0xFDF
 11028                           postinc2	equ	0xFDE
 11029                           postdec2	equ	0xFDD
 11030                           fsr2h	equ	0xFDA
 11031                           fsr2l	equ	0xFD9
 11032                           status	equ	0xFD8
 11033                           
 11034 ;; *************** function _I2Cdev_readBytes *****************
 11035 ;; Defined at:
 11036 ;;		line 43 in file "I2Cdev.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;  devAddr         1    wreg     unsigned char 
 11039 ;;  regAddr         1   20[COMRAM] unsigned char 
 11040 ;;  length          1   21[COMRAM] unsigned char 
 11041 ;;  data            2   22[COMRAM] PTR unsigned char 
 11042 ;;		 -> mpu6050(15), I2Cdev_writeBits@b(1), I2Cdev_writeBit@b(1), I2Cdev_readBits@b(1), 
 11043 ;;		 -> I2Cdev_readBit@b(1), 
 11044 ;; Auto vars:     Size  Location     Type
 11045 ;;  devAddr         1   30[COMRAM] unsigned char 
 11046 ;;  count           1   31[COMRAM] char 
 11047 ;; Return value:  Size  Location     Type
 11048 ;;                  1    wreg      char 
 11049 ;; Registers used:
 11050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11051 ;; Tracked objects:
 11052 ;;		On entry : 0/0
 11053 ;;		On exit  : 0/0
 11054 ;;		Unchanged: 0/0
 11055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11056 ;;      Params:         4       0       0       0       0       0       0       0       0
 11057 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11058 ;;      Temps:          6       0       0       0       0       0       0       0       0
 11059 ;;      Totals:        12       0       0       0       0       0       0       0       0
 11060 ;;Total ram usage:       12 bytes
 11061 ;; Hardware stack levels used:    1
 11062 ;; Hardware stack levels required when called:    2
 11063 ;; This function calls:
 11064 ;;		_IdleI2C
 11065 ;;		_ReadI2C
 11066 ;;		_WriteI2C
 11067 ;;		___wmul
 11068 ;; This function is called by:
 11069 ;;		_I2Cdev_readByte
 11070 ;;		_MPU6050_getMotion6
 11071 ;;		_MPU6050_getAcceleration
 11072 ;;		_MPU6050_getAccelerationX
 11073 ;;		_MPU6050_getAccelerationY
 11074 ;;		_MPU6050_getAccelerationZ
 11075 ;;		_MPU6050_getTemperature
 11076 ;;		_MPU6050_getRotation
 11077 ;;		_MPU6050_getRotationX
 11078 ;;		_MPU6050_getRotationY
 11079 ;;		_MPU6050_getRotationZ
 11080 ;;		_MPU6050_getExternalSensorWord
 11081 ;;		_MPU6050_getExternalSensorDWord
 11082 ;;		_MPU6050_getFIFOCount
 11083 ;;		_MPU6050_getFIFOBytes
 11084 ;;		_MPU6050_getXAccelOffset
 11085 ;;		_MPU6050_getYAccelOffset
 11086 ;;		_MPU6050_getZAccelOffset
 11087 ;;		_MPU6050_getXGyroOffset
 11088 ;;		_MPU6050_getYGyroOffset
 11089 ;;		_MPU6050_getZGyroOffset
 11090 ;;		_MPU6050_readMemoryBlock
 11091 ;; This function uses a non-reentrant model
 11092 ;;
 11093                           
 11094                           	psect	text59
 11095  0057FC                     __ptext59:
 11096                           	opt stack 0
 11097  0057FC                     _I2Cdev_readBytes:
 11098                           	opt stack 26
 11099                           
 11100                           ;incstack = 0
 11101                           ;I2Cdev_readBytes@devAddr stored from wreg
 11102  0057FC  6E1F               	movwf	I2Cdev_readBytes@devAddr,c
 11103                           
 11104                           ;I2Cdev.c: 44: int8_t count = 0;
 11105  0057FE  0E00               	movlw	0
 11106  005800  6E20               	movwf	I2Cdev_readBytes@count,c
 11107                           
 11108                           ;I2Cdev.c: 47: IdleI2C();
 11109  005802  EC06  F025         	call	_IdleI2C	;wreg free
 11110                           
 11111                           ;I2Cdev.c: 48: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 11112  005806  80C5               	bsf	4037,0,c	;volatile
 11113  005808  B0C5               	btfsc	4037,0,c	;volatile
 11114  00580A  D7FE               	goto	l211
 11115                           
 11116                           ;I2Cdev.c: 51: IdleI2C();
 11117  00580C  EC06  F025         	call	_IdleI2C	;wreg free
 11118                           
 11119                           ;I2Cdev.c: 52: WriteI2C(devAddr << 1 | 0x00);
 11120  005810  501F               	movf	I2Cdev_readBytes@devAddr,w,c
 11121  005812  241F               	addwf	I2Cdev_readBytes@devAddr,w,c
 11122  005814  EC61  F026         	call	_WriteI2C
 11123                           
 11124                           ;I2Cdev.c: 55: IdleI2C();
 11125  005818  EC06  F025         	call	_IdleI2C	;wreg free
 11126                           
 11127                           ;I2Cdev.c: 56: WriteI2C(regAddr);
 11128  00581C  5015               	movf	I2Cdev_readBytes@regAddr,w,c
 11129  00581E  EC61  F026         	call	_WriteI2C
 11130                           
 11131                           ;I2Cdev.c: 59: IdleI2C();
 11132  005822  EC06  F025         	call	_IdleI2C	;wreg free
 11133                           
 11134                           ;I2Cdev.c: 60: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
 11135  005826  82C5               	bsf	4037,1,c	;volatile
 11136  005828  B2C5               	btfsc	4037,1,c	;volatile
 11137  00582A  D7FE               	goto	l214
 11138                           
 11139                           ;I2Cdev.c: 63: IdleI2C();
 11140  00582C  EC06  F025         	call	_IdleI2C	;wreg free
 11141                           
 11142                           ;I2Cdev.c: 64: WriteI2C(devAddr << 1 | 0x01);
 11143  005830  80D8               	bsf	status,0,c
 11144  005832  341F               	rlcf	I2Cdev_readBytes@devAddr,w,c
 11145  005834  EC61  F026         	call	_WriteI2C
 11146                           
 11147                           ;I2Cdev.c: 66: for (count = 0; count < length; count++) {
 11148  005838  0E00               	movlw	0
 11149  00583A  6E20               	movwf	I2Cdev_readBytes@count,c
 11150  00583C  D03B               	goto	l216
 11151  00583E                     
 11152                           ;I2Cdev.c: 68: IdleI2C();
 11153  00583E  EC06  F025         	call	_IdleI2C	;wreg free
 11154                           
 11155                           ;I2Cdev.c: 69: data[count] = ReadI2C();
 11156  005842  5020               	movf	I2Cdev_readBytes@count,w,c
 11157  005844  6E0F               	movwf	___wmul@multiplier,c
 11158  005846  6A10               	clrf	___wmul@multiplier+1,c
 11159  005848  BE0F               	btfsc	___wmul@multiplier,7,c
 11160  00584A  0610               	decf	___wmul@multiplier+1,f,c
 11161  00584C  0E00               	movlw	0
 11162  00584E  6E12               	movwf	___wmul@multiplicand+1,c
 11163  005850  0E01               	movlw	1
 11164  005852  6E11               	movwf	___wmul@multiplicand,c
 11165  005854  ECE7  F025         	call	___wmul	;wreg free
 11166  005858  500F               	movf	?___wmul,w,c
 11167  00585A  2417               	addwf	I2Cdev_readBytes@data,w,c
 11168  00585C  6ED9               	movwf	fsr2l,c
 11169  00585E  5010               	movf	?___wmul+1,w,c
 11170  005860  2018               	addwfc	I2Cdev_readBytes@data+1,w,c
 11171  005862  6EDA               	movwf	fsr2h,c
 11172  005864  EC4B  F025         	call	_ReadI2C	;wreg free
 11173  005868  6EDF               	movwf	indf2,c
 11174                           
 11175                           ;I2Cdev.c: 71: if (count == length - 1) {
 11176  00586A  C020  F019         	movff	I2Cdev_readBytes@count,??_I2Cdev_readBytes
 11177  00586E  6A1A               	clrf	(??_I2Cdev_readBytes+1)& (0+255),c
 11178  005870  BE19               	btfsc	??_I2Cdev_readBytes& (0+255),7,c
 11179  005872  061A               	decf	(??_I2Cdev_readBytes+1)& (0+255),f,c
 11180  005874  0EFF               	movlw	255
 11181  005876  6E1B               	movwf	(??_I2Cdev_readBytes+2)& (0+255),c
 11182  005878  0EFF               	movlw	255
 11183  00587A  6E1C               	movwf	(??_I2Cdev_readBytes+3)& (0+255),c
 11184  00587C  5016               	movf	I2Cdev_readBytes@length,w,c
 11185  00587E  6E1D               	movwf	(??_I2Cdev_readBytes+4)& (0+255),c
 11186  005880  6A1E               	clrf	(??_I2Cdev_readBytes+5)& (0+255),c
 11187  005882  501B               	movf	??_I2Cdev_readBytes+2,w,c
 11188  005884  261D               	addwf	??_I2Cdev_readBytes+4,f,c
 11189  005886  501C               	movf	??_I2Cdev_readBytes+3,w,c
 11190  005888  221E               	addwfc	??_I2Cdev_readBytes+5,f,c
 11191  00588A  5019               	movf	??_I2Cdev_readBytes,w,c
 11192  00588C  181D               	xorwf	??_I2Cdev_readBytes+4,w,c
 11193  00588E  E10B               	bnz	l4628
 11194  005890  501A               	movf	??_I2Cdev_readBytes+1,w,c
 11195  005892  181E               	xorwf	??_I2Cdev_readBytes+5,w,c
 11196  005894  A4D8               	btfss	status,2,c
 11197  005896  D007               	goto	l218
 11198                           
 11199                           ;I2Cdev.c: 73: IdleI2C();
 11200  005898  EC06  F025         	call	_IdleI2C	;wreg free
 11201                           
 11202                           ;I2Cdev.c: 74: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 11203  00589C  8AC5               	bsf	4037,5,c	;volatile
 11204  00589E  88C5               	bsf	4037,4,c	;volatile
 11205  0058A0  A8C5               	btfss	4037,4,c	;volatile
 11206  0058A2  D007               	goto	u2700
 11207  0058A4  D7FD               	goto	l220
 11208  0058A6                     l218:
 11209  0058A6                     l4628:
 11210                           
 11211                           ;I2Cdev.c: 77: IdleI2C();
 11212  0058A6  EC06  F025         	call	_IdleI2C	;wreg free
 11213                           
 11214                           ;I2Cdev.c: 78: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 11215  0058AA  9AC5               	bcf	4037,5,c	;volatile
 11216  0058AC  88C5               	bsf	4037,4,c	;volatile
 11217  0058AE  B8C5               	btfsc	4037,4,c	;volatile
 11218  0058B0  D7FE               	goto	l224
 11219  0058B2                     u2700:
 11220  0058B2  2A20               	incf	I2Cdev_readBytes@count,f,c
 11221  0058B4                     l216:
 11222  0058B4  5016               	movf	I2Cdev_readBytes@length,w,c
 11223  0058B6  6E19               	movwf	??_I2Cdev_readBytes& (0+255),c
 11224  0058B8  6A1A               	clrf	(??_I2Cdev_readBytes+1)& (0+255),c
 11225  0058BA  C020  F01B         	movff	I2Cdev_readBytes@count,??_I2Cdev_readBytes+2
 11226  0058BE  6A1C               	clrf	(??_I2Cdev_readBytes+3)& (0+255),c
 11227  0058C0  BE1B               	btfsc	(??_I2Cdev_readBytes+2)& (0+255),7,c
 11228  0058C2  061C               	decf	(??_I2Cdev_readBytes+3)& (0+255),f,c
 11229  0058C4  5019               	movf	??_I2Cdev_readBytes,w,c
 11230  0058C6  5C1B               	subwf	??_I2Cdev_readBytes+2,w,c
 11231  0058C8  501C               	movf	??_I2Cdev_readBytes+3,w,c
 11232  0058CA  0A80               	xorlw	128
 11233  0058CC  6E1D               	movwf	(??_I2Cdev_readBytes+4)& (0+255),c
 11234  0058CE  501A               	movf	??_I2Cdev_readBytes+1,w,c
 11235  0058D0  0A80               	xorlw	128
 11236  0058D2  581D               	subwfb	(??_I2Cdev_readBytes+4)& (0+255),w,c
 11237  0058D4  A0D8               	btfss	status,0,c
 11238  0058D6  D7B3               	goto	l217
 11239                           
 11240                           ;I2Cdev.c: 79: }
 11241                           ;I2Cdev.c: 80: }
 11242                           ;I2Cdev.c: 83: IdleI2C();
 11243  0058D8  EC06  F025         	call	_IdleI2C	;wreg free
 11244                           
 11245                           ;I2Cdev.c: 84: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 11246  0058DC  84C5               	bsf	4037,2,c	;volatile
 11247  0058DE  B4C5               	btfsc	4037,2,c	;volatile
 11248  0058E0  D7FE               	goto	l228
 11249                           
 11250                           ;I2Cdev.c: 86: return count;
 11251  0058E2  5020               	movf	I2Cdev_readBytes@count,w,c
 11252  0058E4  0012               	return	
 11253  0058E6                     __end_of_I2Cdev_readBytes:
 11254                           	opt stack 0
 11255                           tblptru	equ	0xFF8
 11256                           tblptrh	equ	0xFF7
 11257                           tblptrl	equ	0xFF6
 11258                           tablat	equ	0xFF5
 11259                           prodh	equ	0xFF4
 11260                           prodl	equ	0xFF3
 11261                           postinc0	equ	0xFEE
 11262                           wreg	equ	0xFE8
 11263                           indf2	equ	0xFDF
 11264                           postinc2	equ	0xFDE
 11265                           postdec2	equ	0xFDD
 11266                           fsr2h	equ	0xFDA
 11267                           fsr2l	equ	0xFD9
 11268                           status	equ	0xFD8
 11269                           
 11270 ;; *************** function ___wmul *****************
 11271 ;; Defined at:
 11272 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;  multiplier      2   14[COMRAM] unsigned int 
 11275 ;;  multiplicand    2   16[COMRAM] unsigned int 
 11276 ;; Auto vars:     Size  Location     Type
 11277 ;;  product         2   18[COMRAM] unsigned int 
 11278 ;; Return value:  Size  Location     Type
 11279 ;;                  2   14[COMRAM] unsigned int 
 11280 ;; Registers used:
 11281 ;;		wreg, status,2, status,0, prodl, prodh
 11282 ;; Tracked objects:
 11283 ;;		On entry : 0/0
 11284 ;;		On exit  : 0/0
 11285 ;;		Unchanged: 0/0
 11286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11287 ;;      Params:         4       0       0       0       0       0       0       0       0
 11288 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11289 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11290 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11291 ;;Total ram usage:        6 bytes
 11292 ;; Hardware stack levels used:    1
 11293 ;; This function calls:
 11294 ;;		Nothing
 11295 ;; This function is called by:
 11296 ;;		_I2Cdev_readBytes
 11297 ;;		_fround
 11298 ;;		_scale
 11299 ;;		_printf
 11300 ;;		_eval_poly
 11301 ;;		_I2Cdev_readWords
 11302 ;; This function uses a non-reentrant model
 11303 ;;
 11304                           
 11305                           	psect	text60
 11306  004BCE                     __ptext60:
 11307                           	opt stack 0
 11308  004BCE                     ___wmul:
 11309                           	opt stack 27
 11310                           
 11311                           ;incstack = 0
 11312  004BCE  500F               	movf	___wmul@multiplier,w,c
 11313  004BD0  0211               	mulwf	___wmul@multiplicand,c
 11314  004BD2  CFF3 F013          	movff	prodl,___wmul@product
 11315  004BD6  CFF4 F014          	movff	prodh,___wmul@product+1
 11316  004BDA  500F               	movf	___wmul@multiplier,w,c
 11317  004BDC  0212               	mulwf	___wmul@multiplicand+1,c
 11318  004BDE  50F3               	movf	prodl,w,c
 11319  004BE0  2614               	addwf	___wmul@product+1,f,c
 11320  004BE2  5010               	movf	___wmul@multiplier+1,w,c
 11321  004BE4  0211               	mulwf	___wmul@multiplicand,c
 11322  004BE6  50F3               	movf	prodl,w,c
 11323  004BE8  2614               	addwf	___wmul@product+1,f,c
 11324  004BEA  C013  F00F         	movff	___wmul@product,?___wmul
 11325  004BEE  C014  F010         	movff	___wmul@product+1,?___wmul+1
 11326  004BF2  0012               	return	
 11327  004BF4                     __end_of___wmul:
 11328                           	opt stack 0
 11329                           tblptru	equ	0xFF8
 11330                           tblptrh	equ	0xFF7
 11331                           tblptrl	equ	0xFF6
 11332                           tablat	equ	0xFF5
 11333                           prodh	equ	0xFF4
 11334                           prodl	equ	0xFF3
 11335                           postinc0	equ	0xFEE
 11336                           wreg	equ	0xFE8
 11337                           indf2	equ	0xFDF
 11338                           postinc2	equ	0xFDE
 11339                           postdec2	equ	0xFDD
 11340                           fsr2h	equ	0xFDA
 11341                           fsr2l	equ	0xFD9
 11342                           status	equ	0xFD8
 11343                           
 11344 ;; *************** function _WriteI2C *****************
 11345 ;; Defined at:
 11346 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\i2c\i2c_writ.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;  data_out        1    wreg     unsigned char 
 11349 ;; Auto vars:     Size  Location     Type
 11350 ;;  data_out        1    1[COMRAM] unsigned char 
 11351 ;; Return value:  Size  Location     Type
 11352 ;;                  1    wreg      char 
 11353 ;; Registers used:
 11354 ;;		wreg, status,2, status,0, cstack
 11355 ;; Tracked objects:
 11356 ;;		On entry : 0/0
 11357 ;;		On exit  : 0/0
 11358 ;;		Unchanged: 0/0
 11359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11360 ;;      Params:         0       0       0       0       0       0       0       0       0
 11361 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11362 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11363 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11364 ;;Total ram usage:        1 bytes
 11365 ;; Hardware stack levels used:    1
 11366 ;; Hardware stack levels required when called:    1
 11367 ;; This function calls:
 11368 ;;		_IdleI2C
 11369 ;; This function is called by:
 11370 ;;		_I2Cdev_readBytes
 11371 ;;		_I2Cdev_writeBytes
 11372 ;;		_I2Cdev_readWords
 11373 ;;		_I2Cdev_writeWords
 11374 ;; This function uses a non-reentrant model
 11375 ;;
 11376                           
 11377                           	psect	text61
 11378  004CC2                     __ptext61:
 11379                           	opt stack 0
 11380  004CC2                     _WriteI2C:
 11381                           	opt stack 26
 11382                           
 11383                           ;incstack = 0
 11384                           ;WriteI2C@data_out stored from wreg
 11385  004CC2  6E02               	movwf	WriteI2C@data_out,c
 11386  004CC4  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
 11387  004CC8  BEC6               	btfsc	4038,7,c	;volatile
 11388  004CCA  0012               	return	
 11389                           
 11390                           ;	Return value of _WriteI2C is never used
 11391  004CCC  50C6               	movf	4038,w,c	;volatile
 11392  004CCE  0B0F               	andlw	15
 11393  004CD0  0A08               	xorlw	8
 11394  004CD2  B4D8               	btfsc	status,2,c
 11395  004CD4  D00C               	goto	l1294
 11396  004CD6  50C6               	movf	4038,w,c	;volatile
 11397  004CD8  0B0F               	andlw	15
 11398  004CDA  0A0B               	xorlw	11
 11399  004CDC  B4D8               	btfsc	status,2,c
 11400  004CDE  D007               	goto	l1294
 11401  004CE0  88C6               	bsf	4038,4,c	;volatile
 11402  004CE2  A69E               	btfss	3998,3,c	;volatile
 11403  004CE4  D7FE               	goto	l1296
 11404  004CE6  B4C7               	btfsc	4039,2,c	;volatile
 11405  004CE8  0012               	return	
 11406  004CEA  50C7               	movf	4039,w,c	;volatile
 11407                           
 11408                           ;	Return value of _WriteI2C is never used
 11409                           
 11410                           ;	Return value of _WriteI2C is never used
 11411  004CEC  0012               	return	
 11412  004CEE                     l1294:
 11413  004CEE  50C6               	movf	4038,w,c	;volatile
 11414  004CF0  0B0F               	andlw	15
 11415  004CF2  0A08               	xorlw	8
 11416  004CF4  B4D8               	btfsc	status,2,c
 11417  004CF6  D005               	goto	u2610
 11418  004CF8  50C6               	movf	4038,w,c	;volatile
 11419  004CFA  0B0F               	andlw	15
 11420  004CFC  0A0B               	xorlw	11
 11421  004CFE  A4D8               	btfss	status,2,c
 11422  004D00  0012               	return	
 11423  004D02                     u2610:
 11424  004D02  B0C7               	btfsc	4039,0,c	;volatile
 11425  004D04  D7FE               	goto	u2610
 11426  004D06  EC06  F025         	call	_IdleI2C	;wreg free
 11427  004D0A  50C5               	movf	4037,w,c	;volatile
 11428                           
 11429                           ;	Return value of _WriteI2C is never used
 11430                           
 11431                           ;	Return value of _WriteI2C is never used
 11432  004D0C  0012               	return	
 11433  004D0E                     __end_of_WriteI2C:
 11434                           	opt stack 0
 11435                           tblptru	equ	0xFF8
 11436                           tblptrh	equ	0xFF7
 11437                           tblptrl	equ	0xFF6
 11438                           tablat	equ	0xFF5
 11439                           prodh	equ	0xFF4
 11440                           prodl	equ	0xFF3
 11441                           postinc0	equ	0xFEE
 11442                           wreg	equ	0xFE8
 11443                           indf2	equ	0xFDF
 11444                           postinc2	equ	0xFDE
 11445                           postdec2	equ	0xFDD
 11446                           fsr2h	equ	0xFDA
 11447                           fsr2l	equ	0xFD9
 11448                           status	equ	0xFD8
 11449                           
 11450 ;; *************** function _IdleI2C *****************
 11451 ;; Defined at:
 11452 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\i2c\i2c_idle.c"
 11453 ;; Parameters:    Size  Location     Type
 11454 ;;		None
 11455 ;; Auto vars:     Size  Location     Type
 11456 ;;		None
 11457 ;; Return value:  Size  Location     Type
 11458 ;;                  1    wreg      void 
 11459 ;; Registers used:
 11460 ;;		wreg, status,2, status,0
 11461 ;; Tracked objects:
 11462 ;;		On entry : 0/0
 11463 ;;		On exit  : 0/0
 11464 ;;		Unchanged: 0/0
 11465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11466 ;;      Params:         0       0       0       0       0       0       0       0       0
 11467 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11468 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11469 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11470 ;;Total ram usage:        1 bytes
 11471 ;; Hardware stack levels used:    1
 11472 ;; This function calls:
 11473 ;;		Nothing
 11474 ;; This function is called by:
 11475 ;;		_I2Cdev_readBytes
 11476 ;;		_I2Cdev_writeBytes
 11477 ;;		_WriteI2C
 11478 ;;		_I2Cdev_readWords
 11479 ;;		_I2Cdev_writeWords
 11480 ;; This function uses a non-reentrant model
 11481 ;;
 11482                           
 11483                           	psect	text62
 11484  004A0C                     __ptext62:
 11485                           	opt stack 0
 11486  004A0C                     _IdleI2C:
 11487                           	opt stack 26
 11488                           
 11489                           ;incstack = 0
 11490  004A0C  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
 11491  004A10  0E1F               	movlw	31
 11492  004A12  1601               	andwf	??_IdleI2C,f,c
 11493  004A14  A4D8               	btfss	status,2,c
 11494  004A16  D7FA               	goto	_IdleI2C
 11495  004A18  A4C7               	btfss	4039,2,c	;volatile
 11496  004A1A  0012               	return	
 11497  004A1C  D7F7               	goto	_IdleI2C
 11498  004A1E                     __end_of_IdleI2C:
 11499                           	opt stack 0
 11500                           tblptru	equ	0xFF8
 11501                           tblptrh	equ	0xFF7
 11502                           tblptrl	equ	0xFF6
 11503                           tablat	equ	0xFF5
 11504                           prodh	equ	0xFF4
 11505                           prodl	equ	0xFF3
 11506                           postinc0	equ	0xFEE
 11507                           wreg	equ	0xFE8
 11508                           indf2	equ	0xFDF
 11509                           postinc2	equ	0xFDE
 11510                           postdec2	equ	0xFDD
 11511                           fsr2h	equ	0xFDA
 11512                           fsr2l	equ	0xFD9
 11513                           status	equ	0xFD8
 11514                           
 11515 ;; *************** function _ReadI2C *****************
 11516 ;; Defined at:
 11517 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\i2c\i2c_read.c"
 11518 ;; Parameters:    Size  Location     Type
 11519 ;;		None
 11520 ;; Auto vars:     Size  Location     Type
 11521 ;;		None
 11522 ;; Return value:  Size  Location     Type
 11523 ;;                  1    wreg      unsigned char 
 11524 ;; Registers used:
 11525 ;;		wreg, status,2, status,0
 11526 ;; Tracked objects:
 11527 ;;		On entry : 0/0
 11528 ;;		On exit  : 0/0
 11529 ;;		Unchanged: 0/0
 11530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11531 ;;      Params:         0       0       0       0       0       0       0       0       0
 11532 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11533 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11534 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11535 ;;Total ram usage:        0 bytes
 11536 ;; Hardware stack levels used:    1
 11537 ;; This function calls:
 11538 ;;		Nothing
 11539 ;; This function is called by:
 11540 ;;		_I2Cdev_readBytes
 11541 ;;		_I2Cdev_readWords
 11542 ;; This function uses a non-reentrant model
 11543 ;;
 11544                           
 11545                           	psect	text63
 11546  004A96                     __ptext63:
 11547                           	opt stack 0
 11548  004A96                     _ReadI2C:
 11549                           	opt stack 27
 11550                           
 11551                           ;incstack = 0
 11552  004A96  50C6               	movf	4038,w,c	;volatile
 11553  004A98  0B0F               	andlw	15
 11554  004A9A  0A08               	xorlw	8
 11555  004A9C  B4D8               	btfsc	status,2,c
 11556  004A9E  D004               	goto	u2640
 11557  004AA0  50C6               	movf	4038,w,c	;volatile
 11558  004AA2  0B0F               	andlw	15
 11559  004AA4  0A0B               	xorlw	11
 11560  004AA6  B4D8               	btfsc	status,2,c
 11561  004AA8                     u2640:
 11562  004AA8  86C5               	bsf	4037,3,c	;volatile
 11563  004AAA  A0C7               	btfss	4039,0,c	;volatile
 11564  004AAC  D7FE               	goto	l1268
 11565  004AAE  50C9               	movf	4041,w,c	;volatile
 11566  004AB0  0012               	return	
 11567  004AB2                     __end_of_ReadI2C:
 11568                           	opt stack 0
 11569                           tblptru	equ	0xFF8
 11570                           tblptrh	equ	0xFF7
 11571                           tblptrl	equ	0xFF6
 11572                           tablat	equ	0xFF5
 11573                           prodh	equ	0xFF4
 11574                           prodl	equ	0xFF3
 11575                           postinc0	equ	0xFEE
 11576                           wreg	equ	0xFE8
 11577                           indf2	equ	0xFDF
 11578                           postinc2	equ	0xFDE
 11579                           postdec2	equ	0xFDD
 11580                           fsr2h	equ	0xFDA
 11581                           fsr2l	equ	0xFD9
 11582                           status	equ	0xFD8
 11583                           
 11584 ;; *************** function _MPU6050 *****************
 11585 ;; Defined at:
 11586 ;;		line 51 in file "MPU6050.c"
 11587 ;; Parameters:    Size  Location     Type
 11588 ;;  address         1    wreg     unsigned char 
 11589 ;; Auto vars:     Size  Location     Type
 11590 ;;  address         1    0[COMRAM] unsigned char 
 11591 ;; Return value:  Size  Location     Type
 11592 ;;                  1    wreg      void 
 11593 ;; Registers used:
 11594 ;;		wreg
 11595 ;; Tracked objects:
 11596 ;;		On entry : 0/0
 11597 ;;		On exit  : 0/0
 11598 ;;		Unchanged: 0/0
 11599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11600 ;;      Params:         0       0       0       0       0       0       0       0       0
 11601 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11602 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11603 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11604 ;;Total ram usage:        1 bytes
 11605 ;; Hardware stack levels used:    1
 11606 ;; This function calls:
 11607 ;;		Nothing
 11608 ;; This function is called by:
 11609 ;;		_main
 11610 ;; This function uses a non-reentrant model
 11611 ;;
 11612                           
 11613                           	psect	text64
 11614  0049B0                     __ptext64:
 11615                           	opt stack 0
 11616  0049B0                     _MPU6050:
 11617                           	opt stack 30
 11618                           
 11619                           ;incstack = 0
 11620                           ;MPU6050@address stored from wreg
 11621  0049B0  6E01               	movwf	MPU6050@address,c
 11622                           
 11623                           ;MPU6050.c: 52: mpu6050.devAddr = address;
 11624  0049B2  C001  F12C         	movff	MPU6050@address,_mpu6050
 11625  0049B6  0012               	return		;funcret
 11626  0049B8                     __end_of_MPU6050:
 11627                           	opt stack 0
 11628                           tblptru	equ	0xFF8
 11629                           tblptrh	equ	0xFF7
 11630                           tblptrl	equ	0xFF6
 11631                           tablat	equ	0xFF5
 11632                           prodh	equ	0xFF4
 11633                           prodl	equ	0xFF3
 11634                           postinc0	equ	0xFEE
 11635                           wreg	equ	0xFE8
 11636                           indf2	equ	0xFDF
 11637                           postinc2	equ	0xFDE
 11638                           postdec2	equ	0xFDD
 11639                           fsr2h	equ	0xFDA
 11640                           fsr2l	equ	0xFD9
 11641                           status	equ	0xFD8
 11642                           tblptru	equ	0xFF8
 11643                           tblptrh	equ	0xFF7
 11644                           tblptrl	equ	0xFF6
 11645                           tablat	equ	0xFF5
 11646                           prodh	equ	0xFF4
 11647                           prodl	equ	0xFF3
 11648                           postinc0	equ	0xFEE
 11649                           wreg	equ	0xFE8
 11650                           indf2	equ	0xFDF
 11651                           postinc2	equ	0xFDE
 11652                           postdec2	equ	0xFDD
 11653                           fsr2h	equ	0xFDA
 11654                           fsr2l	equ	0xFD9
 11655                           status	equ	0xFD8
 11656                           
 11657                           	psect	rparam
 11658  0000                     tblptru	equ	0xFF8
 11659                           tblptrh	equ	0xFF7
 11660                           tblptrl	equ	0xFF6
 11661                           tablat	equ	0xFF5
 11662                           prodh	equ	0xFF4
 11663                           prodl	equ	0xFF3
 11664                           postinc0	equ	0xFEE
 11665                           wreg	equ	0xFE8
 11666                           indf2	equ	0xFDF
 11667                           postinc2	equ	0xFDE
 11668                           postdec2	equ	0xFDD
 11669                           fsr2h	equ	0xFDA
 11670                           fsr2l	equ	0xFD9
 11671                           status	equ	0xFD8


Data Sizes:
    Strings     57
    Constant    208
    Data        0
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    147     159
    BANK1           256      0      71
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), atan@coeff_a(CODE[18]), atan@coeff_b(CODE[15]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_4(CODE[13]), STR_3(CODE[14]), STR_2(CODE[15]), STR_1(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    MPU6050_getMotion6@gz	PTR int  size(2) Largest target is 2
		 -> gz(BANK1[2]), 

    MPU6050_getMotion6@gy	PTR int  size(2) Largest target is 2
		 -> gy(BANK1[2]), 

    MPU6050_getMotion6@gx	PTR int  size(2) Largest target is 2
		 -> gx(BANK1[2]), 

    MPU6050_getMotion6@az	PTR int  size(2) Largest target is 2
		 -> az(BANK1[2]), 

    MPU6050_getMotion6@ay	PTR int  size(2) Largest target is 2
		 -> ay(BANK1[2]), 

    MPU6050_getMotion6@ax	PTR int  size(2) Largest target is 2
		 -> ax(BANK1[2]), 

    I2Cdev_writeBytes@data	PTR unsigned char  size(2) Largest target is 1
		 -> I2Cdev_writeByte@data(COMRAM[1]), 

    I2Cdev_readBits@data	PTR unsigned char  size(2) Largest target is 15
		 -> mpu6050(BANK1[15]), 

    I2Cdev_readByte@data	PTR unsigned char  size(2) Largest target is 15
		 -> mpu6050(BANK1[15]), I2Cdev_writeBits@b(COMRAM[1]), I2Cdev_writeBit@b(COMRAM[1]), I2Cdev_readBits@b(COMRAM[1]), 
		 -> I2Cdev_readBit@b(COMRAM[1]), 

    I2Cdev_readBytes@data	PTR unsigned char  size(2) Largest target is 15
		 -> mpu6050(BANK1[15]), I2Cdev_writeBits@b(COMRAM[1]), I2Cdev_writeBit@b(COMRAM[1]), I2Cdev_readBits@b(COMRAM[1]), 
		 -> I2Cdev_readBit@b(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_initBT
    _sqrt->___ftdiv
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    _log->_eval_poly
    _exp->___ftdiv
    _ldexp->_eval_poly
    _floor->___altoft
    ___ftsub->___ftadd
    ___lltoft->___ftpack
    _USART_Init->___ftdiv
    ___fttol->_scale
    ___altoft->___fttol
    _calibrate_sensors->___ftdiv
    _read_gyro_accel_vals->_MPU6050_getMotion6
    _MPU6050_getMotion6->_I2Cdev_readBytes
    ___awtoft->___ftpack
    _atan->___ftdiv
    _fabs->___ftneg
    _eval_poly->___ftmul
    ___ftmul->___ftadd
    ___ftadd->___wmul
    ___ftdiv->___altoft
    _MPU6050_getDeviceID->_I2Cdev_readBits
    _I2Cdev_readBits->_I2Cdev_readByte
    _MPU6050_initialize->_MPU6050_setSleepEnabled
    _MPU6050_setSleepEnabled->_I2Cdev_writeBit
    _I2Cdev_writeBit->_I2Cdev_readByte
    _MPU6050_setFullScaleGyroRange->_I2Cdev_writeBits
    _MPU6050_setFullScaleAccelRange->_I2Cdev_writeBits
    _MPU6050_setClockSource->_I2Cdev_writeBits
    _I2Cdev_writeBits->_I2Cdev_readByte
    _I2Cdev_writeByte->_I2Cdev_writeBytes
    _I2Cdev_writeBytes->_WriteI2C
    _I2Cdev_readByte->_I2Cdev_readBytes
    _I2Cdev_readBytes->___wmul
    ___wmul->___awdiv
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    _main->_atan
    _sqrt->_pow
    _pow->_exp
    _initBT->_USART_Init
    _atan->_sqrt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                86    86      0  463860
                                             61 BANK0     86    86      0
                            _MPU6050
                 _MPU6050_initialize
             _MPU6050_testConnection
                            _OpenI2C
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                               _atan
                  _calibrate_sensors
              _get_last_gyro_x_angle
              _get_last_gyro_y_angle
              _get_last_gyro_z_angle
                   _get_last_x_angle
                   _get_last_y_angle
                   _get_last_z_angle
                             _initBT
                             _initIO
                                _pow
                             _printf
               _read_gyro_accel_vals
           _set_last_read_angle_data
                               _sqrt
 ---------------------------------------------------------------------------------
 (1) _sqrt                                                19    16      3   19506
                                             26 BANK0     19    16      3
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftsub
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (1) _set_last_read_angle_data                            22     0     22     686
                                              0 COMRAM    22     0     22
 ---------------------------------------------------------------------------------
 (1) _printf                                              48    37     11   72642
                                             69 COMRAM    17     6     11
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   16328
                                             47 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   16130
                                             47 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _pow                                                 17    11      6  124887
                                              9 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   43060
                                             59 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                  9     6      3   65876
                                              0 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                7     2      5     400
                                             59 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _floor                                                8     5      3   13743
                                             79 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     528
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    8415
                                             32 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2765
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _initIO                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initBT                                               1     1      0   16735
                                             94 COMRAM     1     1      0
                         _USART_Init
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           7     3      4   16735
                                              0 BANK0      7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     784
                                             54 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2834
                                             69 COMRAM    10     6      4
                            ___ftadd (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _get_last_z_angle                                     3     0      3       0
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _get_last_y_angle                                     3     0      3       0
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _get_last_x_angle                                     3     0      3       0
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _get_last_gyro_z_angle                                3     0      3       0
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _get_last_gyro_y_angle                                3     0      3       0
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _get_last_gyro_x_angle                                3     0      3       0
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _calibrate_sensors                                   24    24      0   27400
                                              0 BANK0     24    24      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
               _read_gyro_accel_vals
 ---------------------------------------------------------------------------------
 (1) _read_gyro_accel_vals                                 0     0      0    9656
                 _MPU6050_getMotion6
 ---------------------------------------------------------------------------------
 (2) _MPU6050_getMotion6                                  14     2     12    9656
                                             32 COMRAM    14     2     12
                   _I2Cdev_readBytes
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    4155
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _atan                                                16    13      3   47201
                                             45 BANK0     16    13      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                          _eval_poly
                               _fabs
                                _pow (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (2) _fabs                                                 3     0      3    1023
                                              3 COMRAM     3     0      3
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     881
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   21257
                                             47 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    9050
                                             32 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    7766
                                             20 COMRAM    12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
              _get_last_gyro_x_angle (ARG)
              _get_last_gyro_y_angle (ARG)
              _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1504
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    5230
                                             79 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___ftsub (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2544
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _OpenI2C                                              2     1      1     120
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _MPU6050_testConnection                               0     0      0   18052
                _MPU6050_getDeviceID
 ---------------------------------------------------------------------------------
 (2) _MPU6050_getDeviceID                                  0     0      0   18052
                    _I2Cdev_readBits
 ---------------------------------------------------------------------------------
 (3) _I2Cdev_readBits                                     12     7      5   18052
                                             36 COMRAM    12     7      5
                    _I2Cdev_readByte
 ---------------------------------------------------------------------------------
 (1) _MPU6050_initialize                                   0     0      0   98694
             _MPU6050_setClockSource
     _MPU6050_setFullScaleAccelRange
      _MPU6050_setFullScaleGyroRange
            _MPU6050_setSleepEnabled
 ---------------------------------------------------------------------------------
 (2) _MPU6050_setSleepEnabled                              1     1      0   31536
                                             48 COMRAM     1     1      0
                    _I2Cdev_writeBit
 ---------------------------------------------------------------------------------
 (3) _I2Cdev_writeBit                                     12     9      3   31514
                                             36 COMRAM    12     9      3
                    _I2Cdev_readByte
                   _I2Cdev_writeByte
 ---------------------------------------------------------------------------------
 (2) _MPU6050_setFullScaleGyroRange                        1     1      0   22386
                                             46 COMRAM     1     1      0
                   _I2Cdev_writeBits
 ---------------------------------------------------------------------------------
 (2) _MPU6050_setFullScaleAccelRange                       1     1      0   22386
                                             46 COMRAM     1     1      0
                   _I2Cdev_writeBits
 ---------------------------------------------------------------------------------
 (2) _MPU6050_setClockSource                               1     1      0   22386
                                             46 COMRAM     1     1      0
                   _I2Cdev_writeBits
 ---------------------------------------------------------------------------------
 (3) _I2Cdev_writeBits                                    10     6      4   22364
                                             36 COMRAM    10     6      4
                    _I2Cdev_readByte
                   _I2Cdev_writeByte
 ---------------------------------------------------------------------------------
 (4) _I2Cdev_writeByte                                     3     1      2    4251
                                              8 COMRAM     3     1      2
                  _I2Cdev_writeBytes
 ---------------------------------------------------------------------------------
 (5) _I2Cdev_writeBytes                                    6     2      4     384
                                              2 COMRAM     6     2      4
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _I2Cdev_readByte                                      4     1      3   12630
                                             32 COMRAM     4     1      3
                   _I2Cdev_readBytes
 ---------------------------------------------------------------------------------
 (3) _I2Cdev_readBytes                                    12     8      4    8612
                                             20 COMRAM    12     8      4
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3351
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _WriteI2C                                             1     1      0      22
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (5) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MPU6050                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MPU6050
   _MPU6050_initialize
     _MPU6050_setClockSource
       _I2Cdev_writeBits
         _I2Cdev_readByte
           _I2Cdev_readBytes
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _I2Cdev_writeByte
           _I2Cdev_writeBytes
             _IdleI2C
             _WriteI2C
               _IdleI2C
     _MPU6050_setFullScaleAccelRange
       _I2Cdev_writeBits
         _I2Cdev_readByte
           _I2Cdev_readBytes
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _I2Cdev_writeByte
           _I2Cdev_writeBytes
             _IdleI2C
             _WriteI2C
               _IdleI2C
     _MPU6050_setFullScaleGyroRange
       _I2Cdev_writeBits
         _I2Cdev_readByte
           _I2Cdev_readBytes
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _I2Cdev_writeByte
           _I2Cdev_writeBytes
             _IdleI2C
             _WriteI2C
               _IdleI2C
     _MPU6050_setSleepEnabled
       _I2Cdev_writeBit
         _I2Cdev_readByte
           _I2Cdev_readBytes
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _I2Cdev_writeByte
           _I2Cdev_writeBytes
             _IdleI2C
             _WriteI2C
               _IdleI2C
   _MPU6050_testConnection
     _MPU6050_getDeviceID
       _I2Cdev_readBits
         _I2Cdev_readByte
           _I2Cdev_readBytes
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _OpenI2C
   ___awtoft
     ___ftpack
   ___ftadd
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _frexp (ARG)
     _get_last_gyro_x_angle (ARG)
     _get_last_gyro_y_angle (ARG)
     _get_last_gyro_z_angle (ARG)
     _get_last_x_angle (ARG)
     _get_last_y_angle (ARG)
     _get_last_z_angle (ARG)
   ___ftdiv
     ___altoft (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _get_last_gyro_x_angle (ARG)
       _get_last_gyro_y_angle (ARG)
       _get_last_gyro_z_angle (ARG)
       _get_last_x_angle (ARG)
       _get_last_y_angle (ARG)
       _get_last_z_angle (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftsub (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___lltoft (ARG)
         ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _get_last_gyro_x_angle (ARG)
       _get_last_gyro_y_angle (ARG)
       _get_last_gyro_z_angle (ARG)
       _get_last_x_angle (ARG)
       _get_last_y_angle (ARG)
       _get_last_z_angle (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _frexp (ARG)
   ___ftneg
   _atan
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _get_last_gyro_x_angle (ARG)
       _get_last_gyro_y_angle (ARG)
       _get_last_gyro_z_angle (ARG)
       _get_last_x_angle (ARG)
       _get_last_y_angle (ARG)
       _get_last_z_angle (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftsub (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___lltoft (ARG)
           ___ftpack
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg
     _eval_poly
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _fabs
       ___ftneg
     _pow (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _get_last_gyro_x_angle (ARG)
                     _get_last_gyro_y_angle (ARG)
                     _get_last_gyro_z_angle (ARG)
                     _get_last_x_angle (ARG)
                     _get_last_y_angle (ARG)
                     _get_last_z_angle (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftge (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _get_last_gyro_x_angle (ARG)
                     _get_last_gyro_y_angle (ARG)
                     _get_last_gyro_z_angle (ARG)
                     _get_last_x_angle (ARG)
                     _get_last_y_angle (ARG)
                     _get_last_z_angle (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftge
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
     _sqrt (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___lltoft (ARG)
             ___ftpack
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftsub (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___lltoft (ARG)
           ___ftpack
       _pow (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _get_last_gyro_x_angle (ARG)
                     _get_last_gyro_y_angle (ARG)
                     _get_last_gyro_z_angle (ARG)
                     _get_last_x_angle (ARG)
                     _get_last_y_angle (ARG)
                     _get_last_z_angle (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftneg (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _get_last_gyro_x_angle (ARG)
                       _get_last_gyro_y_angle (ARG)
                       _get_last_gyro_z_angle (ARG)
                       _get_last_x_angle (ARG)
                       _get_last_y_angle (ARG)
                       _get_last_z_angle (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftge (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___lltoft (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _get_last_gyro_x_angle (ARG)
                     _get_last_gyro_y_angle (ARG)
                     _get_last_gyro_z_angle (ARG)
                     _get_last_x_angle (ARG)
                     _get_last_y_angle (ARG)
                     _get_last_z_angle (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftneg (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _get_last_gyro_x_angle (ARG)
                       _get_last_gyro_y_angle (ARG)
                       _get_last_gyro_z_angle (ARG)
                       _get_last_x_angle (ARG)
                       _get_last_y_angle (ARG)
                       _get_last_z_angle (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftge
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _get_last_gyro_x_angle (ARG)
                     _get_last_gyro_y_angle (ARG)
                     _get_last_gyro_z_angle (ARG)
                     _get_last_x_angle (ARG)
                     _get_last_y_angle (ARG)
                     _get_last_z_angle (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
   _calibrate_sensors
     ___awtoft
       ___ftpack
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _get_last_gyro_x_angle (ARG)
       _get_last_gyro_y_angle (ARG)
       _get_last_gyro_z_angle (ARG)
       _get_last_x_angle (ARG)
       _get_last_y_angle (ARG)
       _get_last_z_angle (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftsub (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___lltoft (ARG)
           ___ftpack
     _read_gyro_accel_vals
       _MPU6050_getMotion6
         _I2Cdev_readBytes
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _get_last_gyro_x_angle
   _get_last_gyro_y_angle
   _get_last_gyro_z_angle
   _get_last_x_angle
   _get_last_y_angle
   _get_last_z_angle
   _initBT
     _USART_Init
       ___altoft
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___lltoft (ARG)
             ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _initIO
   _pow
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft
       ___ftpack
     _exp
       ___awtoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___lltoft (ARG)
             ___ftpack
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _eval_poly
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _floor
         ___altoft
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
       _ldexp
         _eval_poly (ARG)
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _log (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _get_last_gyro_x_angle (ARG)
       _get_last_gyro_y_angle (ARG)
       _get_last_gyro_z_angle (ARG)
       _get_last_x_angle (ARG)
       _get_last_y_angle (ARG)
       _get_last_z_angle (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _read_gyro_accel_vals
     _MPU6050_getMotion6
       _I2Cdev_readBytes
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _set_last_read_angle_data
   _sqrt
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftsub (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___lltoft (ARG)
           ___ftpack
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _get_last_gyro_x_angle (ARG)
         _get_last_gyro_y_angle (ARG)
         _get_last_gyro_z_angle (ARG)
         _get_last_x_angle (ARG)
         _get_last_y_angle (ARG)
         _get_last_z_angle (ARG)
       ___lltoft (ARG)
         ___ftpack
     _pow (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _get_last_gyro_x_angle (ARG)
                     _get_last_gyro_y_angle (ARG)
                     _get_last_gyro_z_angle (ARG)
                     _get_last_x_angle (ARG)
                     _get_last_y_angle (ARG)
                     _get_last_z_angle (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftge (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _get_last_gyro_x_angle (ARG)
                     _get_last_gyro_y_angle (ARG)
                     _get_last_gyro_z_angle (ARG)
                     _get_last_x_angle (ARG)
                     _get_last_y_angle (ARG)
                     _get_last_z_angle (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftge
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _get_last_gyro_x_angle (ARG)
                   _get_last_gyro_y_angle (ARG)
                   _get_last_gyro_z_angle (ARG)
                   _get_last_x_angle (ARG)
                   _get_last_y_angle (ARG)
                   _get_last_z_angle (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _get_last_gyro_x_angle (ARG)
                 _get_last_gyro_y_angle (ARG)
                 _get_last_gyro_z_angle (ARG)
                 _get_last_x_angle (ARG)
                 _get_last_y_angle (ARG)
                 _get_last_z_angle (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _get_last_gyro_x_angle (ARG)
           _get_last_gyro_y_angle (ARG)
           _get_last_gyro_z_angle (ARG)
           _get_last_x_angle (ARG)
           _get_last_y_angle (ARG)
           _get_last_z_angle (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _get_last_gyro_x_angle (ARG)
             _get_last_gyro_y_angle (ARG)
             _get_last_gyro_z_angle (ARG)
             _get_last_x_angle (ARG)
             _get_last_y_angle (ARG)
             _get_last_z_angle (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _get_last_gyro_x_angle (ARG)
               _get_last_gyro_y_angle (ARG)
               _get_last_gyro_z_angle (ARG)
               _get_last_x_angle (ARG)
               _get_last_y_angle (ARG)
               _get_last_z_angle (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      47       7       27.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     93      9F       5       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     145      20        0.0%
DATA                 0      0     145       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 18 11:54:25 2018

                           ___altoft@exp 004E          __size_of_MPU6050_setClockSource 001C  
                            _SSPSTATbits 000FC7                            ___altoft@sign 004F  
                           ___awdiv@sign 000C                                       _ax 0145  
                                     _ay 0143                                       _az 0141  
                                     _gx 013F                                       _gy 013D  
                                     _gz 013B                      ___wmul@multiplicand 0011  
                           ___ftadd@exp1 0020                             ___ftadd@exp2 001F  
                           ___ftadd@sign 001E                                      l112 6BC2  
                                    l120 7824                                      l113 6A66  
                                    l121 7830                                      l122 784E  
                                    l211 5808                                      l220 58A0  
                                    l214 5828                                      l310 5106  
                                    l216 58B4                                      l224 58AE  
                                    l312 5132                                      l217 583E  
                                    l218 58A6                                      l154 4B34  
                                    l228 58DE                                      l159 4B3C  
                                    l280 4D16                                      l282 4D52  
                                    l283 4D36                                      l286 4D60  
                           __CFG_BOR$OFF 000000                    I2Cdev_readBits@length 0027  
                                    _exp 65C0                                      _log 5BC2  
                                    _pow 5F3A                             ___awmod@sign 0006  
                                    wreg 000FE8                              main@accel_x 00C9  
                            main@accel_y 00CC                              main@accel_z 00CF  
                             _TXSTA1bits 000FAC                     ??_MPU6050_initialize 0032  
                       _I2Cdev_writeBits 524C                         _I2Cdev_writeByte 4A62  
                            main@angle_x 00D2                              main@angle_y 00D5  
                            main@angle_z 00D8                             __CFG_LVP$OFF 000000  
                 I2Cdev_readBits@devAddr 002E           __end_of_MPU6050_testConnection 4A30  
                           ___ftdiv@cntr 0059                          __end_of_MPU6050 49B8  
                           ___ftdiv@sign 005E                             __CFG_WDT$OFF 000000  
                                   l1200 7292                                     l2001 54B8  
                                   l1201 72F8                                     l2003 54FE  
                                   l1203 731E                                     l1220 74E4  
                                   l1204 735E                                     l2005 552E  
                                   l2021 5C00                                     l1205 7426  
                                   l2006 5522                                     l1222 758A  
                                   l1214 748C                                     l1231 7710  
                                   l1223 757C                                     l1232 7702  
                                   l1208 73CE                                     l1225 75AE  
                                   l1234 7734                                     l1226 75B2  
                                   l2019 5BDE                                     l1227 75CA  
                                   l1219 7570                                     l1172 68F8  
                                   l1228 76F6                                     l1501 522A  
                                   l1229 761C                                     l1502 5234  
                                   l1510 4F20                                     l1182 6F3C  
                                   l1190 717C                                     l1503 5242  
                                   l1511 4F18                                     l1175 69C4  
                                   l1183 708C                                     l1191 718C  
                                   l1185 713C                                     l1522 4C5E  
                                   l1514 4F38                                     l1178 6F60  
                                   l1194 7188                                     l1603 62CC  
                                   l1515 4F42                                     l1507 4EFE  
                                   l1179 6E8C                                     l1195 71AE  
                                   l1268 4AAA                                     l1532 4C3C  
                                   l1452 6432                                     l1540 5D8E  
                                   l1516 4F50                                     l1508 4F0A  
                                   l1613 6328                                     l1197 771A  
                                   l1189 716C                                     l1294 4CEE  
                                   l1622 6366                                     l1614 631E  
                                   l1526 5622                                     l1454 648A  
                                   l1542 5DCC                                     l1198 7200  
                                   l1623 635C                                     l1527 55A6  
                                   l1455 658E                                     l1543 5DBC  
                                   l1296 4CE2                                     l1632 573E  
                                   l1608 6332                                     l1536 5CFE  
                                   l1640 5E34                                     l1625 638A  
                                   l1457 65A2                                     l1393 4F88  
                                   l1721 5174                                     l1634 5766  
                                   l1626 63A6                                     l1394 4F7C  
                                   l1810 60AC                                     l1722 5168  
                                   l1538 5D1C                                     l1642 5E60  
                                   l1571 544E                                     l1635 57A4  
                                   l1627 63D6                                     l1731 4EA2  
                                   l1539 5D5E                                     l1643 5E9A  
                                   l1572 5438                                     l1636 57CA  
                                   l1804 5F84                                     l1732 4E96  
                                   l1548 5DF0                                     l1652 5F22  
                                   l1644 5EC2                                     l1805 5F74  
                                   l1725 51A8                                     l1549 5DE4  
                                   l1653 5F16                                     l1574 5476  
                                   l1670 5990                                     l1742 4DD4  
                                   l1726 51B6                                     l1646 5EFE  
                                   l1494 51DC                                     l1575 546C  
                                   l1671 59A0                                     l1743 4DC8  
                                   l1807 5F9C                                     l1735 4ECA  
                                   l1647 5EEE                                     l1495 51EC  
                                   l1568 541A                                     l1664 590E  
                                   l1808 6026                                     l1736 4ED8  
                                   l1569 5410                                     l1657 5302  
                                   l1681 4C98                                     l1809 6004  
                                   l1497 520A                                     l1658 5332  
                                   l1666 5936                                     l1498 5202  
                                   l1667 5968                                     l1675 4BC0  
                                   l1668 5978                                     l1940 60EA  
                                   l1693 5B94                                     l1685 5AFA  
                                   l1694 5B88                                     l1942 614C  
                                   l1599 62A2                                     l1687 5B70  
                                   l1696 5BB0                                     l1688 5B60  
                                   l1939 60FA                                     l1980 664E  
                                   l1981 667E                                     l1982 67A4  
                                   l1991 568E                                     l1983 677A  
                                   l1992 5708                                     l1977 65DA  
                                   l4546 535E                                     l5610 677A  
                                   l1979 6614                                     l4628 58A6  
                                   l1988 5674                                     l1997 538A  
                                   l1989 5666                                     l5804 757C  
                                   ?_exp 0060                                     ?_log 003C  
                                   l5760 73A8                                     l5752 735E  
                                   l5780 7490                                     ?_pow 0069  
                                   STR_1 7FC5                                     STR_2 7FD4  
                                   STR_3 7FE3                                     STR_4 7FF1  
                                   u3000 633A                                     _LATA 000F89  
                                   u3030 636E                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u3220 5B9A  
                                   u4100 4EA6                                     u3071 58F6  
                                   u4040 5DF6                                     u3161 5ADE  
                                   u2610 4D02                                     u3314 50F2  
                                   u3250 53B2                                     u3315 50EE  
                                   u3091 591E                                     u2700 58B2  
                                   u3324 511C                                     u3180 5B18  
                                   u3325 5116                                     u4070 5178  
                                   u2640 4AA8                                     u3360 52B0  
                                   u3344 5282                                     u3600 5680  
                                   u4400 74C8                                     u4320 7330  
                                   u3345 527E                                     u3185 5B10  
                                   u3354 5292                                     u3290 50B6  
                                   u3274 5084                                     u2810 5480  
                                   u3258 53B4                                     u3530 4F24  
                                   u4330 7370                                     u3355 528E  
                                   u3275 5080                                     u3371 5726  
                           printf@tmpval 006F                                     u3284 5094  
                                   u4500 4A2C                                     u2900 6294  
                                   u4180 6658                                     u3365 52AC  
                                   u3285 5090                                     u3630 54D8  
                                   u4190 665A                                     u3470 520E  
                                   u4430 7598                                     u3295 50B2  
                                   u3391 574E                                     u5047 77D0  
                                   u4440 75A8                                     u4360 73A8  
                                   u4280 7238                                     u5057 7804  
                                   u2770 5402                                     u2930 62BE  
                                   u4610 6456                                     u5067 783C  
                                   u4620 6458                                     u2861 6260  
                                   u4285 722E                                     u5077 7EE6  
                                   u3638 54DA                                     u2871 6274  
                                   u5087 4C10                                     u3911 5E44  
                                   u2960 62FC                                     u4560 5FEA  
                                   u5097 6BAE                                     _RCIF 007CF5  
                                   u3970 5F28                                     u3891 5E18  
                                   _TXIF 007CF4                             __CFG_PWRT$ON 000000  
                 I2Cdev_readBits@regAddr 0025                                     _fabs 4C1A  
                                   _atan 63FC                                     _main 7750  
                           ___ftpack@arg 0001                             ___ftpack@exp 0004  
                                   fsr2h 000FDA                                     indf2 000FDF  
                                   fsr2l 000FD9                                     _sqrt 60BA  
                                   exp@x 0060                                     log@x 003C  
                                   pow@x 0069                                     pow@y 006C  
                                   prodh 000FF4                                     prodl 000FF3  
                 ?_get_last_gyro_x_angle 0001                                     start 0000  
                 ?_get_last_gyro_y_angle 0001                            __CFG_IESO$OFF 000000  
                 ?_get_last_gyro_z_angle 0001                          __end_of_IdleI2C 4A1E  
                          __CFG_MCLRE$ON 000000                             ___ftmul@cntr 002E  
                           ___param_bank 000000                             ___ftmul@sign 002F  
                        __end_of_ReadI2C 4AB2                          __end_of_OpenI2C 4B24  
                           main@alphaInv 00BD                        _I2Cdev_writeBytes 4D0E  
                           ___fttol@exp1 0045                        _last_gyro_x_angle 011C  
                                  ??_exp 005F                             ___fttol@lval 0041  
                                  ??_log 003F                        _last_gyro_y_angle 0119  
                                  ??_pow 005F                        _last_gyro_z_angle 0116  
                          __CFG_PLLDIV$2 000000                           MPU6050@address 0001  
                     ?_I2Cdev_writeBytes 0003                                    ?_fabs 0004  
                I2Cdev_readBits@bitStart 0026                                    ?_atan 008D  
                                  ?_main 0001                          __end_of___awdiv 524C  
                      _calibrate_sensors 6A04                          __end_of___ftadd 63FC  
                        __end_of___awmod 4F5A                          __end_of___ftdiv 57FC  
                        __end_of___ftneg 4BCE                          __end_of___lldiv 51C8  
                                  ?_sqrt 007A                          __end_of___ftmul 59DA  
                        ___awdiv@divisor 0009                          __end_of___llmod 4EEA  
               __size_of_I2Cdev_readBits 007C                          __end_of___ftsub 4CC2  
                        __end_of___fttol 5BC2                 __size_of_I2Cdev_readByte 001A  
                        ___awdiv@counter 000B                                    _RCREG 000FAE  
                                  _RCSTA 000FAB                                    _SPBRG 000FAF  
                                  _TRISA 000F92                                    _TRISB 000F93  
                I2Cdev_writeByte@devAddr 000B                         I2Cdev_readBits@b 0030  
                     ?_calibrate_sensors 0001                                    _TXSTA 000FAC  
                           ___lltoft@exp 0011                           __CFG_FCMEN$OFF 000000  
                    ??_I2Cdev_writeBytes 0007       MPU6050_setFullScaleGyroRange@range 002F  
                          ___awtoft@sign 000C                  I2Cdev_writeByte@regAddr 0009  
                        __end_of_dpowers 7F1D                                    fabs@d 0004  
                                  _floor 5638                                    _ldexp 54A0  
                                  _frexp 5362                                    _errno 0128  
                                  _scale 6D58             MPU6050_setClockSource@source 002F  
                                  atan@f 008D                                    atan@x 0093  
                                  atan@y 0090                   _MPU6050_setClockSource 4AB2  
                          ___ftpack@sign 0005                                    _putch 4B24  
                    ??_calibrate_sensors 0060                                    tablat 000FF5  
                                  pow@yi 0076                                    sqrt@a 007A  
                                  sqrt@i 0086                                    sqrt@q 0087  
                                  sqrt@x 008A                                    sqrt@z 0083  
                                  status 000FD8                 __size_of_I2Cdev_writeBit 007E  
               _set_last_read_angle_data 4D68                              exp@exponent 0066  
                            ?_USART_Init 0060                              ldexp@newexp 003F  
              __end_of_I2Cdev_writeBytes 4D68                          __initialization 4B88  
                            log@exponent 003F                             __end_of_fabs 4C4A  
                           __end_of_atan 65C0                             __end_of_main 7EF4  
                           __end_of_sqrt 6250                __end_of_calibrate_sensors 6D58  
                                 ??_fabs 0007                                   ??_atan 005F  
                                 ??_main 009D                            ___fttol@sign1 0040  
                                 ??_sqrt 007D                            __activetblptr 000002  
        ??_MPU6050_setFullScaleGyroRange 002F                     __size_of__tdiv_to_l_ 0132  
                              ??_MPU6050 0001                    I2Cdev_readBytes@count 0020  
                        __CFG_CCP2MX$OFF 000000                  I2Cdev_writeBytes@length 0004  
                                 ?_floor 0050                                   ?_ldexp 003C  
                                 ?_frexp 0001                         __end_of___altoft 4FD2  
                       ___llmod@dividend 0001                                   ?_scale 0030  
                       ___awdiv@dividend 0007                         __end_of_WriteI2C 4D0E  
                       __end_of___awtoft 4C82                                   ?_putch 0001  
                       __end_of___ftpack 54A0                         __end_of___lltoft 4E1E  
                            OpenI2C@slew 0001                 ?_MPU6050_setSleepEnabled 0001  
                              ??_IdleI2C 0001                                   _OSCCON 000FD3  
                                 _SSPADD 000FC8                                   _TRISC1 007CA1  
                                 _TRISC2 007CA2                                   _TRISC6 007CA6  
                                 _TRISC7 007CA7                                   _SSPBUF 000FC9  
                                 _TXREG1 000FAD                                ??_ReadI2C 0001  
                              ??_OpenI2C 0002                           __CFG_XINST$OFF 000000  
                       __end_of__powers_ 7F44                 __end_of_I2Cdev_readBytes 58E6  
                                 ___ftge 52D2                __size_of_get_last_x_angle 000E  
              __size_of_get_last_y_angle 000E                                   ___wmul 4BCE  
                              ??___awdiv 000B                __size_of_get_last_z_angle 000E  
                              ??___ftadd 001B                           __CFG_STVREN$ON 000000  
                              ??___awmod 0005                                ??___ftdiv 0056  
                              ??___ftneg 0004                                ??___lldiv 0009  
                              ??___ftmul 0027                                ??___llmod 0009  
                              ??___ftsub 0027                                ??___fttol 003B  
                                 _initBT 4BF4                                   _initIO 4B66  
                                 _fround 67B2                                   clear_0 4B8E  
                                 clear_1 4B9A                         ___awdiv@quotient 000D  
                        ___awmod@divisor 0003                                   _x_gyro 00F7  
                        ___awmod@counter 0005                                   _printf 7160  
                                 _y_gyro 00F5                                   _z_gyro 00F3  
                                 main@dt 00F0                                   floor@i 0053  
                                 floor@x 0050                    ___ftmul@f3_as_product 002B  
            __end_of_MPU6050_getDeviceID 4B66                             _base_x_accel 0113  
                           _base_y_accel 0110                             _base_z_accel 010D  
                           __mediumconst 7EF4                         I2Cdev_writeBit@b 0030  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                      __size_of_USART_Init 007A  
                                 sqrt@og 0080                        ??_I2Cdev_readBits 002A  
                      ??_I2Cdev_readByte 0024                         __end_ofexp@coeff 7F89  
                       __end_oflog@coeff 7FA4                               __accesstop 0060  
                __end_of__initialization 4BA0                               ___altoft@c 0046  
                 I2Cdev_readByte@devAddr 0024                          __CFG_PBADEN$OFF 000000  
                             ___ftadd@f1 0015                               ___ftadd@f2 0018  
         MPU6050_setSleepEnabled@enabled 0031                               ___ftge@ff1 0001  
                             ___ftge@ff2 0004             __end_of_read_gyro_accel_vals 4E84  
                           eval_poly@res 0039                            ___rparam_used 000001  
                             ___ftdiv@f1 0050                               ___ftdiv@f2 0053  
                             ___ftdiv@f3 005A                               ___ftneg@f1 0001  
                 I2Cdev_readByte@regAddr 0021                               ___awtoft@c 0009  
                             ___ftmul@f1 0021                               ___ftmul@f2 0024  
             __size_of_I2Cdev_writeBytes 005A                               ___ftsub@f1 0021  
                             ___ftsub@f2 0024                               ___fttol@f1 0037  
                         __pcstackCOMRAM 0001                 __end_of_I2Cdev_writeBits 52D2  
               __end_of_I2Cdev_writeByte 4A7C                        ??_I2Cdev_writeBit 0028  
                             ___lltoft@c 0009                            __end_of_floor 5716  
                          __end_of_ldexp 5566                            __end_of_frexp 53F2  
                          __end_of_scale 7160                      _I2Cdev_writeBit$505 002D  
             __size_of_calibrate_sensors 0354                            __end_of_putch 4B44  
              calibrate_sensors@_x_accel 0064                calibrate_sensors@_y_accel 0067  
              calibrate_sensors@_z_accel 006A                               __div_to_l_ 5CE0  
        __end_of_MPU6050_setSleepEnabled 4A48              __size_of_MPU6050_getMotion6 00F4  
  __end_of_MPU6050_setFullScaleGyroRange 4B06   __size_of_MPU6050_setFullScaleGyroRange 001C  
          _MPU6050_setFullScaleGyroRange 4AEA                          __div_to_l_@exp1 000C  
                                ??_floor 0053                                  ??_ldexp 0041  
                        __div_to_l_@cntr 000B                                  ??_frexp 0006  
                        __CFG_LPT1OSC$ON 000000                                  ??_scale 0033  
                        __div_to_l_@quot 0007                                  ??_putch 0001  
                             __pbssBANK0 00F3                               __pbssBANK1 0100  
                     __size_of_eval_poly 00D2                  ??_get_last_gyro_x_angle 0004  
                ??_get_last_gyro_y_angle 0004                  ??_get_last_gyro_z_angle 0004  
                          __div_to_l_@f1 0001                            __div_to_l_@f2 0004  
               I2Cdev_writeBytes@devAddr 0007                   I2Cdev_readBytes@length 0016  
              set_last_read_angle_data@x 0005                set_last_read_angle_data@y 0008  
              set_last_read_angle_data@z 000B                                  ?___ftge 0001  
               I2Cdev_writeBytes@regAddr 0003                                  ?___wmul 000F  
                                _CCP1CON 000FBD                                  ?_initBT 0001  
                                ?_initIO 0001                                ?___altoft 0046  
                                ?_fround 0030                                ?_WriteI2C 0001  
                              ?___awtoft 0009                                ?___ftpack 0001  
               calibrate_sensors@_x_gyro 006D                 calibrate_sensors@_y_gyro 0070  
               calibrate_sensors@_z_gyro 0073                                  ?_printf 0046  
                              ?___lltoft 0009                                  _MPU6050 49B0  
                ?_MPU6050_setClockSource 0001              __size_of_MPU6050_initialize 001A  
             ??_set_last_read_angle_data 0017                                  _SSPCON1 000FC6  
                                _SSPCON2 000FC5                                  _SSPSTAT 000FC7  
                                _IdleI2C 4A0C                                  _ReadI2C 4A96  
                                _OpenI2C 4B06                             ??_USART_Init 005F  
                      __end_of__npowers_ 7F6B                                  __Hparam 0000  
                             _scale$3064 0033                                  __Lparam 0000  
                       _get_last_x_angle 49E2                         _get_last_y_angle 49F0  
                       _get_last_z_angle 49FE                          __size_of___ftge 0090  
                                ___awdiv 51C8                                  ___ftadd 6250  
                                ___awmod 4EEA                                  ___ftdiv 5716  
                                ___ftneg 4BAA                                  ___lldiv 5146  
                        __size_of___wmul 0026                                  ___ftmul 58E6  
                                ___llmod 4E84                                  ___ftsub 4C82  
                                ___fttol 5ACE                               ??___altoft 004A  
                        __size_of_initBT 0026                          __size_of_initIO 0022  
                                __pcinit 4B88                               ??_WriteI2C 0002  
                             ??___awtoft 000C                               ??___ftpack 0006  
                      __end_of_eval_poly 5638                          __size_of_fround 0252  
                                __ramtop 0800                               ??___lltoft 000D  
                                __ptext0 7750                                  __ptext1 60BA  
                                __ptext2 4D68                                  __ptext3 7160  
                                __ptext4 6D58                                  __ptext5 4B24  
                                __ptext6 67B2                                  __ptext7 4EEA  
                                __ptext8 51C8                                  __ptext9 5E08  
                        __size_of_printf 05F0                                  _mpu6050 012C  
         __end_of_MPU6050_setClockSource 4ACE                              ?__div_to_l_ 0001  
                         USART_Init@temp 0064                                  _dpowers 7EF5  
                           __size_of_exp 01F2                             __size_of_log 011E  
                        atan@val_squared 0097                             __size_of_pow 0180  
                   _read_gyro_accel_vals 4E1E                         ___awmod@dividend 0001  
                                _x_accel 00FD                                  atan@val 009A  
                                _y_accel 00FB                                  _z_accel 00F9  
 __end_of_MPU6050_setFullScaleAccelRange 4AEA  __size_of_MPU6050_setFullScaleAccelRange 001C  
         _MPU6050_setFullScaleAccelRange 4ACE                    I2Cdev_writeBit@bitNum 0026  
                     __end_of_USART_Init 504C      MPU6050_setFullScaleAccelRange@range 002F  
          calibrate_sensors@num_readings 0076                     end_of_initialization 4BA0  
                                exp@sign 0068                            __Lmediumconst 7EF4  
         ?_MPU6050_setFullScaleGyroRange 0001                          ___lldiv@divisor 0005  
                                pow@sign 0075                          ___lldiv@counter 000D  
                      I2Cdev_writeBits@b 002E                                _RCSTAbits 000FAB  
                                printf@c 0076                                  printf@f 0046  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                        ?_I2Cdev_readBytes 0015  
       __size_of_MPU6050_setSleepEnabled 0018                           __tdiv_to_l_@f1 0001  
                         __tdiv_to_l_@f2 0004                       ??_I2Cdev_readBytes 0019  
                          ??__tdiv_to_l_ 0007                          _I2Cdev_readBits 504C  
                        _I2Cdev_readByte 4A48                           _last_read_time 0100  
               ??_MPU6050_testConnection 0031                    ?_read_gyro_accel_vals 0001  
                             main@FS_SEL 00ED                                _TRISBbits 000F93  
                   I2Cdev_readBits@count 002D                      USART_Init@baud_rate 0060  
                        _I2Cdev_writeBit 50C8                              ___ftdiv@exp 005D  
                             main@gyro_x 00C0                               main@gyro_y 00C3  
                             main@gyro_z 00C6                      __size_of__div_to_l_ 0128  
                            ___ftmul@exp 002A                        ?_I2Cdev_writeBits 0025  
                  I2Cdev_writeBytes@data 0005                        ?_I2Cdev_writeByte 0009  
                         __end_of___ftge 5362                           __end_of___wmul 4BF4  
                     ??_I2Cdev_writeBits 0029                       ??_I2Cdev_writeByte 000B  
                         __end_of_initBT 4C1A                           __end_of_initIO 4B88  
                         __end_of_fround 6A04                               floor@expon 0056  
                         __end_of_printf 7750                      start_initialization 4B88  
                             eval_poly@d 0033                               eval_poly@n 0035  
                             eval_poly@x 0030         __end_of_set_last_read_angle_data 4DC2  
                             ldexp@value 003C                      __end_of__tdiv_to_l_ 5F3A  
                            __end_of_exp 67B2                              __end_of_log 5CE0  
                            __end_of_pow 60BA                         WriteI2C@data_out 0002  
           __size_of_MPU6050_getDeviceID 0022                     I2Cdev_readBytes@data 0017  
                             frexp@value 0001           __size_of_get_last_gyro_x_angle 000E  
                        ___llmod@divisor 0005           __size_of_get_last_gyro_y_angle 000E  
          __end_of_get_last_gyro_x_angle 49C6           __size_of_get_last_gyro_z_angle 000E  
          __end_of_get_last_gyro_y_angle 49D4                          ___llmod@counter 0009  
          __end_of_get_last_gyro_z_angle 49E2                  __end_of_I2Cdev_readBits 50C8  
                __end_of_I2Cdev_readByte 4A62                                 ??___ftge 0007  
                               ??___wmul 0013                                 ??_initBT 005F  
                               ??_initIO 0001                                 ??_fround 0033  
                            _base_x_gyro 010A                              _base_y_gyro 0107  
                            _base_z_gyro 0104                                 ??_printf 0051  
                 ??_read_gyro_accel_vals 002F                        __size_of___altoft 0078  
                             fround@prec 0039                        __size_of_WriteI2C 004C  
                      __size_of___awtoft 0038                        __size_of___ftpack 00AE  
             __end_of_MPU6050_getMotion6 5ACE          __size_of_MPU6050_testConnection 0012  
                           _last_x_angle 0125                             _last_y_angle 0122  
                      __size_of___lltoft 005C                                 ?_MPU6050 0001  
           set_last_read_angle_data@time 0001                             _last_z_angle 011F  
                          __pcstackBANK0 0060                  __end_of_I2Cdev_writeBit 5146  
               __end_of_get_last_x_angle 49F0                 __end_of_get_last_y_angle 49FE  
               __end_of_get_last_z_angle 4A0C                  I2Cdev_readBytes@devAddr 001F  
                               ?_IdleI2C 0001                  I2Cdev_readBytes@regAddr 0015  
                               ?_ReadI2C 0001                                 ?_OpenI2C 0001  
                              _main$3060 00E4                                _main$3061 00E7  
                              _main$3057 00DB                                _main$3058 00DE  
                              _main$3059 00E1                   main@RADIANS_TO_DEGREES 00BA  
                _MPU6050_setSleepEnabled 4A30                            __pmediumconst 7EF4  
                               ?___awdiv 0007                                 ?___ftadd 0015  
                               ?___awmod 0001                                 ?___ftdiv 0050  
                               ?___ftneg 0001                                 ?___lldiv 0001  
                               ?___ftmul 0021                                 ?___llmod 0001  
                               ?___ftsub 0021                                __npowers_ 7F44  
                               ?___fttol 0037                         main@gyro_angle_x 00A8  
                       main@gyro_angle_y 00AB                         main@gyro_angle_z 00AE  
                            __tdiv_to_l_ 5E08                             ??__div_to_l_ 0007  
             __end_of_MPU6050_initialize 4A96                                _eval_poly 5566  
         set_last_read_angle_data@x_gyro 000E           set_last_read_angle_data@y_gyro 0011  
         set_last_read_angle_data@z_gyro 0014                           __size_of_floor 00DE  
                         __size_of_ldexp 00C6                           __size_of_frexp 0090  
                         __size_of_scale 0408                           __size_of_putch 0020  
                         ___wmul@product 0013                                 _LATCbits 000F8B  
                              atan@recip 0096                   _MPU6050_testConnection 4A1E  
       ??_MPU6050_setFullScaleAccelRange 002F          ?_MPU6050_setFullScaleAccelRange 0001  
                               _PIR1bits 000F9E                       __end_of__div_to_l_ 5E08  
      __size_of_set_last_read_angle_data 005A                     I2Cdev_writeBits@data 0028  
                       ?_I2Cdev_readBits 0025                ?_set_last_read_angle_data 0001  
                       ?_I2Cdev_readByte 0021                     I2Cdev_writeBits@mask 002D  
                      ___wmul@multiplier 000F                      I2Cdev_readBits@data 0028  
                    I2Cdev_readBits@mask 002F                               printf@flag 0065  
                             printf@fval 0073                                main@alpha 00EA  
                             printf@prec 0067                               ?_eval_poly 0030  
                   I2Cdev_writeByte@data 000A                         __size_of_MPU6050 0008  
                    __end_ofatan@coeff_a 7FB6                      __end_ofatan@coeff_b 7FC5  
              __size_of_I2Cdev_readBytes 00EA                         ?_I2Cdev_writeBit 0025  
               I2Cdev_writeBits@bitStart 0026                      I2Cdev_readByte@data 0022  
                       OpenI2C@sync_mode 0002                         __size_of_IdleI2C 0012  
                             putch@trash 0001                                frexp@eptr 0004  
              ??_MPU6050_setSleepEnabled 0031                         __size_of_ReadI2C 001C  
                               __Hrparam 0000                         __size_of_OpenI2C 001E  
                               __Lrparam 0000                      _MPU6050_getDeviceID 4B44  
                       __size_of___awdiv 0084                         __size_of___ftadd 01AC  
                       __size_of___awmod 0070                         __size_of___ftdiv 00E6  
                       __size_of___ftneg 0024                         __size_of___lldiv 0082  
                               ___altoft 4F5A                         __size_of___ftmul 00F4  
                       __size_of___llmod 0066                         __size_of___ftsub 0040  
                       __size_of___fttol 00F4                                 _WriteI2C 4CC2  
                               ___awtoft 4C4A                                 ___ftpack 53F2  
                            _fround$3062 0036                              _fround$3063 0033  
                               ___lltoft 4DC2                                 _exp$3068 0063  
                               __ptext10 5CE0                                 __ptext11 4E84  
                               __ptext20 4DC2                                 __ptext12 5146  
                               __ptext21 4B66                                 __ptext13 5F3A  
                               __ptext30 49C6                                 __ptext22 4BF4  
                               __ptext14 5BC2                                 __ptext31 49B8  
                               __ptext23 4FD2                                 __ptext15 65C0  
                               __ptext40 58E6                                 __ptext32 6A04  
                               __ptext24 5ACE                                 __ptext16 54A0  
                               __ptext41 6250                                 __ptext33 4E1E  
                               __ptext25 4F5A                                 __ptext17 5638  
                               __ptext50 4A30                                 __ptext42 52D2  
                               __ptext34 59DA                                 __ptext26 49FE  
                               __ptext18 5362                                 __ptext51 50C8  
                               __ptext43 5716                                 __ptext35 4C4A  
                               __ptext27 49F0                                 __ptext19 4C82  
                               __ptext60 4BCE                                 __ptext52 4AEA  
                               __ptext44 53F2                                 __ptext36 63FC  
                               __ptext28 49E2                                 __ptext61 4CC2  
              __size_of_I2Cdev_writeBits 0086                                 __ptext53 4ACE  
                               __ptext45 4B06                                 __ptext37 4C1A  
                               __ptext29 49D4                                 __ptext62 4A0C  
                               __ptext54 4AB2                                 __ptext46 4A1E  
                               __ptext38 4BAA                                 __ptext63 4A96  
                               __ptext55 524C                                 __ptext47 4B44  
                               __ptext39 5566                                 __ptext64 49B0  
                               __ptext56 4A62                                 __ptext48 504C  
                               __ptext57 4D0E                                 __ptext49 4A7C  
                               __ptext58 4A48                                 __ptext59 57FC  
              __size_of_I2Cdev_writeByte 001A                                 __powers_ 7F1D  
                   ?_MPU6050_getDeviceID 0001                                 _pow$3066 006F  
                               _pow$3067 0072                            __size_of_fabs 0030  
                          __size_of_atan 01C4                            __size_of_main 07A4  
                          __size_of_sqrt 0196                      I2Cdev_writeBit@data 0027  
                 I2Cdev_writeBit@devAddr 002F                 ??_MPU6050_setClockSource 002F  
                              printf@exp 006D                                printf@val 0069  
                I2Cdev_writeBits@devAddr 002C                   I2Cdev_writeBit@regAddr 0025  
                            atan@coeff_a 7FA4                              atan@coeff_b 7FB6  
                               exp@coeff 7F6B                                 log@coeff 7F89  
                I2Cdev_writeBits@regAddr 0025                                putch@byte 0002  
                            ??_eval_poly 0037                    ??_MPU6050_getDeviceID 0031  
                               scale@scl 0036                        ?_get_last_x_angle 0001  
                      ?_get_last_y_angle 0001                        ?_get_last_z_angle 0001  
                       __tdiv_to_l_@exp1 000F                         __tdiv_to_l_@cntr 000E  
                       __tdiv_to_l_@quot 000A                       ??_get_last_x_angle 0004  
                     ??_get_last_y_angle 0004                       ??_get_last_z_angle 0004  
                     _MPU6050_getMotion6 59DA                         ___lldiv@dividend 0001  
                      main@accel_angle_x 00A5                        main@accel_angle_y 00A2  
                      main@accel_angle_z 009F                     MPU6050_getMotion6@ax 0021  
                   MPU6050_getMotion6@ay 0023                     MPU6050_getMotion6@az 0025  
                   MPU6050_getMotion6@gx 0027                     MPU6050_getMotion6@gy 0029  
                   MPU6050_getMotion6@gz 002B                    _get_last_gyro_x_angle 49B8  
                  _get_last_gyro_y_angle 49C6                    _get_last_gyro_z_angle 49D4  
                    ?_MPU6050_getMotion6 0021                                 printf@ap 0063  
                     I2Cdev_writeBytes@i 0008                   I2Cdev_writeBits@length 0027  
                           ?__tdiv_to_l_ 0001              main@unfiltered_gyro_angle_x 00B1  
            main@unfiltered_gyro_angle_y 00B4              main@unfiltered_gyro_angle_z 00B7  
                            _printf$3065 0060                              _temperature 012A  
                    __CFG_FOSC$INTOSC_EC 000000                         ___lldiv@quotient 0009  
          __size_of_read_gyro_accel_vals 0066                     ??_MPU6050_getMotion6 002D  
                            _SSPCON1bits 000FC6                         _I2Cdev_readBytes 57FC  
                            _SSPCON2bits 000FC5                  ?_MPU6050_testConnection 0001  
                     _MPU6050_initialize 4A7C                       calibrate_sensors@i 0062  
                             _USART_Init 4FD2                      ?_MPU6050_initialize 0001  
