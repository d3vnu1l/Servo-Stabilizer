

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 17 08:34:05 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text45,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58  0000                     
    59                           ; Version 1.45
    60                           ; Generated 16/11/2017 GMT
    61                           ; 
    62                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F4550 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	smallconst
    95  000800                     __psmallconst:
    96                           	opt stack 0
    97  000800  00                 	db	0
    98  000801                     _dpowers:
    99                           	opt stack 0
   100  000801  0001               	dw	1
   101  000803  0000               	dw	0
   102  000805  000A               	dw	10
   103  000807  0000               	dw	0
   104  000809  0064               	dw	100
   105  00080B  0000               	dw	0
   106  00080D  03E8               	dw	1000
   107  00080F  0000               	dw	0
   108  000811  2710               	dw	10000
   109  000813  0000               	dw	0
   110  000815  86A0               	dw	34464
   111  000817  0001               	dw	1
   112  000819  4240               	dw	16960
   113  00081B  000F               	dw	15
   114  00081D  9680               	dw	38528
   115  00081F  0098               	dw	152
   116  000821  E100               	dw	57600
   117  000823  05F5               	dw	1525
   118  000825  CA00               	dw	51712
   119  000827  3B9A               	dw	15258
   120  000829                     __end_of_dpowers:
   121                           	opt stack 0
   122  000829                     __powers_:
   123                           	opt stack 0
   124  000829  00                 	db	0
   125  00082A  80                 	db	128
   126  00082B  3F                 	db	63
   127  00082C  00                 	db	0
   128  00082D  20                 	db	32
   129  00082E  41                 	db	65
   130  00082F  00                 	db	0
   131  000830  C8                 	db	200
   132  000831  42                 	db	66
   133  000832  00                 	db	0
   134  000833  7A                 	db	122
   135  000834  44                 	db	68
   136  000835  40                 	db	64
   137  000836  1C                 	db	28
   138  000837  46                 	db	70
   139  000838  50                 	db	80
   140  000839  C3                 	db	195
   141  00083A  47                 	db	71
   142  00083B  24                 	db	36
   143  00083C  74                 	db	116
   144  00083D  49                 	db	73
   145  00083E  97                 	db	151
   146  00083F  18                 	db	24
   147  000840  4B                 	db	75
   148  000841  BC                 	db	188
   149  000842  BE                 	db	190
   150  000843  4C                 	db	76
   151  000844  6B                 	db	107
   152  000845  6E                 	db	110
   153  000846  4E                 	db	78
   154  000847  03                 	db	3
   155  000848  15                 	db	21
   156  000849  50                 	db	80
   157  00084A  79                 	db	121
   158  00084B  AD                 	db	173
   159  00084C  60                 	db	96
   160  00084D  F3                 	db	243
   161  00084E  49                 	db	73
   162  00084F  71                 	db	113
   163  000850                     __end_of__powers_:
   164                           	opt stack 0
   165  000850                     __npowers_:
   166                           	opt stack 0
   167  000850  00                 	db	0
   168  000851  80                 	db	128
   169  000852  3F                 	db	63
   170  000853  CD                 	db	205
   171  000854  CC                 	db	204
   172  000855  3D                 	db	61
   173  000856  D7                 	db	215
   174  000857  23                 	db	35
   175  000858  3C                 	db	60
   176  000859  12                 	db	18
   177  00085A  83                 	db	131
   178  00085B  3A                 	db	58
   179  00085C  B7                 	db	183
   180  00085D  D1                 	db	209
   181  00085E  38                 	db	56
   182  00085F  C6                 	db	198
   183  000860  27                 	db	39
   184  000861  37                 	db	55
   185  000862  38                 	db	56
   186  000863  86                 	db	134
   187  000864  35                 	db	53
   188  000865  C0                 	db	192
   189  000866  D6                 	db	214
   190  000867  33                 	db	51
   191  000868  CC                 	db	204
   192  000869  2B                 	db	43
   193  00086A  32                 	db	50
   194  00086B  70                 	db	112
   195  00086C  89                 	db	137
   196  00086D  30                 	db	48
   197  00086E  E7                 	db	231
   198  00086F  DB                 	db	219
   199  000870  2E                 	db	46
   200  000871  E5                 	db	229
   201  000872  3C                 	db	60
   202  000873  1E                 	db	30
   203  000874  42                 	db	66
   204  000875  A2                 	db	162
   205  000876  0D                 	db	13
   206  000877                     __end_of__npowers_:
   207                           	opt stack 0
   208  0000                     _PIR1bits	set	3998
   209  0000                     _SSPCON1bits	set	4038
   210  0000                     _SSPBUF	set	4041
   211  0000                     _TRISBbits	set	3987
   212  0000                     _SSPCON1	set	4038
   213  0000                     _SSPSTAT	set	4039
   214  0000                     _SSPSTATbits	set	4039
   215  0000                     _SSPCON2	set	4037
   216  0000                     _SSPCON2bits	set	4037
   217  0000                     _CCP1CON	set	4029
   218  0000                     _LATE	set	3981
   219  0000                     _LATD	set	3980
   220  0000                     _LATC	set	3979
   221  0000                     _LATB	set	3978
   222  0000                     _LATA	set	3977
   223  0000                     _TRISB	set	3987
   224  0000                     _TRISA	set	3986
   225  0000                     _TXREG1	set	4013
   226  0000                     _TXSTA1bits	set	4012
   227  0000                     _RCREG	set	4014
   228  0000                     _RCSTAbits	set	4011
   229  0000                     _RCSTA	set	4011
   230  0000                     _TXSTA	set	4012
   231  0000                     _SPBRG	set	4015
   232  0000                     _SSPADD	set	4040
   233  0000                     _LATCbits	set	3979
   234  0000                     _OSCCON	set	4051
   235  0000                     _TRISC2	set	31906
   236  0000                     _TRISC1	set	31905
   237  0000                     _RCIF	set	31989
   238  0000                     _TXIF	set	31988
   239  0000                     _TRISC7	set	31911
   240  0000                     _TRISC6	set	31910
   241  000877                     STR_1:
   242  000877  49                 	db	73	;'I'
   243  000878  6E                 	db	110	;'n'
   244  000879  69                 	db	105	;'i'
   245  00087A  74                 	db	116	;'t'
   246  00087B  20                 	db	32
   247  00087C  4D                 	db	77	;'M'
   248  00087D  50                 	db	80	;'P'
   249  00087E  55                 	db	85	;'U'
   250  00087F  2E                 	db	46
   251  000880  2E                 	db	46
   252  000881  2E                 	db	46
   253  000882  20                 	db	32
   254  000883  0D                 	db	13
   255  000884  0A                 	db	10
   256  000885  00                 	db	0
   257  000886                     STR_2:
   258  000886  4D                 	db	77	;'M'
   259  000887  50                 	db	80	;'P'
   260  000888  55                 	db	85	;'U'
   261  000889  20                 	db	32
   262  00088A  65                 	db	101	;'e'
   263  00088B  6E                 	db	110	;'n'
   264  00088C  61                 	db	97	;'a'
   265  00088D  62                 	db	98	;'b'
   266  00088E  6C                 	db	108	;'l'
   267  00088F  65                 	db	101	;'e'
   268  000890  64                 	db	100	;'d'
   269  000891  21                 	db	33
   270  000892  0D                 	db	13
   271  000893  0A                 	db	10
   272  000894  00                 	db	0
   273  000895                     STR_3:
   274  000895  4D                 	db	77	;'M'
   275  000896  50                 	db	80	;'P'
   276  000897  55                 	db	85	;'U'
   277  000898  20                 	db	32
   278  000899  66                 	db	102	;'f'
   279  00089A  61                 	db	97	;'a'
   280  00089B  69                 	db	105	;'i'
   281  00089C  6C                 	db	108	;'l'
   282  00089D  75                 	db	117	;'u'
   283  00089E  72                 	db	114	;'r'
   284  00089F  65                 	db	101	;'e'
   285  0008A0  0D                 	db	13
   286  0008A1  0A                 	db	10
   287  0008A2  00                 	db	0
   288  0008A3                     STR_4:
   289  0008A3  25                 	db	37
   290  0008A4  66                 	db	102	;'f'
   291  0008A5  0D                 	db	13
   292  0008A6  0A                 	db	10
   293  0008A7  00                 	db	0
   294                           
   295                           ; #config settings
   296  0008A8  00                 	db	0	; dummy byte at the end
   297  0000                     
   298                           	psect	cinit
   299  0028B6                     __pcinit:
   300                           	opt stack 0
   301  0028B6                     start_initialization:
   302                           	opt stack 0
   303  0028B6                     __initialization:
   304                           	opt stack 0
   305                           
   306                           ; Clear objects allocated to COMRAM (15 bytes)
   307  0028B6  EE00  F04C         	lfsr	0,__pbssCOMRAM
   308  0028BA  0E0F               	movlw	15
   309  0028BC                     clear_0:
   310  0028BC  6AEE               	clrf	postinc0,c
   311  0028BE  06E8               	decf	wreg,f,c
   312  0028C0  E1FD               	bnz	clear_0
   313  0028C2                     end_of_initialization:
   314                           	opt stack 0
   315  0028C2                     __end_of__initialization:
   316                           	opt stack 0
   317  0028C2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   318  0028C4  6EF8               	movwf	tblptru,c
   319  0028C6  0100               	movlb	0
   320  0028C8  EF51  F009         	goto	_main	;jump to C main() function
   321                           tblptru	equ	0xFF8
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           
   325                           	psect	bssCOMRAM
   326  00004C                     __pbssCOMRAM:
   327                           	opt stack 0
   328  00004C                     _mpu6050:
   329                           	opt stack 0
   330  00004C                     	ds	15
   331                           tblptru	equ	0xFF8
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           
   335                           	psect	cstackBANK0
   336  000060                     __pcstackBANK0:
   337                           	opt stack 0
   338  000060                     _printf$2838:
   339                           	opt stack 0
   340                           
   341                           ; 3 bytes @ 0x0
   342  000060                     	ds	3
   343  000063                     printf@ap:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x3
   347  000063                     	ds	2
   348  000065                     printf@flag:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x5
   352  000065                     	ds	2
   353  000067                     printf@prec:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x7
   357  000067                     	ds	2
   358  000069                     printf@val:
   359                           	opt stack 0
   360                           
   361                           ; 4 bytes @ 0x9
   362  000069                     	ds	4
   363  00006D                     printf@exp:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0xD
   367  00006D                     	ds	2
   368  00006F                     printf@tmpval:
   369                           	opt stack 0
   370                           
   371                           ; 4 bytes @ 0xF
   372  00006F                     	ds	4
   373  000073                     printf@fval:
   374                           	opt stack 0
   375                           
   376                           ; 3 bytes @ 0x13
   377  000073                     	ds	3
   378  000076                     printf@c:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0x16
   382  000076                     	ds	1
   383  000077                     main@data_in:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x17
   387  000077                     	ds	1
   388  000078                     main@A:
   389                           	opt stack 0
   390                           
   391                           ; 3 bytes @ 0x18
   392  000078                     	ds	3
   393  00007B                     main@dt:
   394                           	opt stack 0
   395                           
   396                           ; 3 bytes @ 0x1B
   397  00007B                     	ds	3
   398  00007E                     main@error_angle:
   399                           	opt stack 0
   400                           
   401                           ; 3 bytes @ 0x1E
   402  00007E                     	ds	3
   403  000081                     _main$2834:
   404                           	opt stack 0
   405                           
   406                           ; 3 bytes @ 0x21
   407  000081                     	ds	3
   408  000084                     main@ay:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x24
   412  000084                     	ds	2
   413  000086                     main@az:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x26
   417  000086                     	ds	2
   418  000088                     main@gy:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x28
   422  000088                     	ds	2
   423  00008A                     main@gz:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x2A
   427  00008A                     	ds	2
   428  00008C                     main@ax:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x2C
   432  00008C                     	ds	2
   433  00008E                     main@gx:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x2E
   437  00008E                     	ds	2
   438  000090                     main@angle:
   439                           	opt stack 0
   440                           
   441                           ; 3 bytes @ 0x30
   442  000090                     	ds	3
   443                           tblptru	equ	0xFF8
   444                           postinc0	equ	0xFEE
   445                           wreg	equ	0xFE8
   446                           
   447                           	psect	cstackCOMRAM
   448  000001                     __pcstackCOMRAM:
   449                           	opt stack 0
   450  000001                     ??_IdleI2C:
   451  000001                     ?___awmod:
   452                           	opt stack 0
   453  000001                     ?___ftpack:
   454                           	opt stack 0
   455  000001                     ?___ftneg:
   456                           	opt stack 0
   457  000001                     ?__tdiv_to_l_:
   458                           	opt stack 0
   459  000001                     ?__div_to_l_:
   460                           	opt stack 0
   461  000001                     ?___lldiv:
   462                           	opt stack 0
   463  000001                     ?___llmod:
   464                           	opt stack 0
   465  000001                     putch@trash:
   466                           	opt stack 0
   467  000001                     MPU6050@address:
   468                           	opt stack 0
   469  000001                     OpenI2C@slew:
   470                           	opt stack 0
   471  000001                     ___awmod@dividend:
   472                           	opt stack 0
   473  000001                     __div_to_l_@f1:
   474                           	opt stack 0
   475  000001                     ___ftpack@arg:
   476                           	opt stack 0
   477  000001                     __tdiv_to_l_@f1:
   478                           	opt stack 0
   479  000001                     ___ftge@ff1:
   480                           	opt stack 0
   481  000001                     ___ftneg@f1:
   482                           	opt stack 0
   483  000001                     ___lldiv@dividend:
   484                           	opt stack 0
   485  000001                     ___llmod@dividend:
   486                           	opt stack 0
   487                           
   488                           ; 4 bytes @ 0x0
   489  000001                     	ds	1
   490  000002                     putch@byte:
   491                           	opt stack 0
   492  000002                     OpenI2C@sync_mode:
   493                           	opt stack 0
   494  000002                     WriteI2C@data_out:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x1
   498  000002                     	ds	1
   499  000003                     I2Cdev_writeBytes@regAddr:
   500                           	opt stack 0
   501  000003                     ___awmod@divisor:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x2
   505  000003                     	ds	1
   506  000004                     I2Cdev_writeBytes@length:
   507                           	opt stack 0
   508  000004                     ___ftpack@exp:
   509                           	opt stack 0
   510  000004                     __div_to_l_@f2:
   511                           	opt stack 0
   512  000004                     __tdiv_to_l_@f2:
   513                           	opt stack 0
   514  000004                     ___ftge@ff2:
   515                           	opt stack 0
   516                           
   517                           ; 3 bytes @ 0x3
   518  000004                     	ds	1
   519  000005                     ___awmod@counter:
   520                           	opt stack 0
   521  000005                     ___ftpack@sign:
   522                           	opt stack 0
   523  000005                     I2Cdev_writeBytes@data:
   524                           	opt stack 0
   525  000005                     ___lldiv@divisor:
   526                           	opt stack 0
   527  000005                     ___llmod@divisor:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x4
   531  000005                     	ds	1
   532  000006                     ??___ftpack:
   533  000006                     ___awmod@sign:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x5
   537  000006                     	ds	1
   538  000007                     ??__tdiv_to_l_:
   539  000007                     ??___ftge:
   540  000007                     ?___awdiv:
   541                           	opt stack 0
   542  000007                     I2Cdev_writeBytes@devAddr:
   543                           	opt stack 0
   544  000007                     ___awdiv@dividend:
   545                           	opt stack 0
   546  000007                     __div_to_l_@quot:
   547                           	opt stack 0
   548                           
   549                           ; 4 bytes @ 0x6
   550  000007                     	ds	1
   551  000008                     I2Cdev_writeBytes@i:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x7
   555  000008                     	ds	1
   556  000009                     ?___altoft:
   557                           	opt stack 0
   558  000009                     ?___awtoft:
   559                           	opt stack 0
   560  000009                     ?___lltoft:
   561                           	opt stack 0
   562  000009                     I2Cdev_writeByte@regAddr:
   563                           	opt stack 0
   564  000009                     ___llmod@counter:
   565                           	opt stack 0
   566  000009                     ___awdiv@divisor:
   567                           	opt stack 0
   568  000009                     ___awtoft@c:
   569                           	opt stack 0
   570  000009                     ___altoft@c:
   571                           	opt stack 0
   572  000009                     ___lldiv@quotient:
   573                           	opt stack 0
   574  000009                     ___lltoft@c:
   575                           	opt stack 0
   576                           
   577                           ; 4 bytes @ 0x8
   578  000009                     	ds	1
   579  00000A                     I2Cdev_writeByte@data:
   580                           	opt stack 0
   581  00000A                     __tdiv_to_l_@quot:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x9
   585  00000A                     	ds	1
   586  00000B                     I2Cdev_writeByte@devAddr:
   587                           	opt stack 0
   588  00000B                     ___awdiv@counter:
   589                           	opt stack 0
   590  00000B                     __div_to_l_@cntr:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0xA
   594  00000B                     	ds	1
   595  00000C                     ___awdiv@sign:
   596                           	opt stack 0
   597  00000C                     ___awtoft@sign:
   598                           	opt stack 0
   599  00000C                     __div_to_l_@exp1:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0xB
   603  00000C                     	ds	1
   604  00000D                     ??___altoft:
   605  00000D                     ??___lltoft:
   606  00000D                     ___lldiv@counter:
   607                           	opt stack 0
   608  00000D                     ___awdiv@quotient:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0xC
   612  00000D                     	ds	1
   613  00000E                     __tdiv_to_l_@cntr:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0xD
   617  00000E                     	ds	1
   618  00000F                     ?___wmul:
   619                           	opt stack 0
   620  00000F                     __tdiv_to_l_@exp1:
   621                           	opt stack 0
   622  00000F                     ___wmul@multiplier:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0xE
   626  00000F                     	ds	2
   627  000011                     ___altoft@exp:
   628                           	opt stack 0
   629  000011                     ___lltoft@exp:
   630                           	opt stack 0
   631  000011                     ___wmul@multiplicand:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x10
   635  000011                     	ds	1
   636  000012                     ___altoft@sign:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x11
   640  000012                     	ds	1
   641  000013                     ?___ftdiv:
   642                           	opt stack 0
   643  000013                     ___wmul@product:
   644                           	opt stack 0
   645  000013                     ___ftdiv@f1:
   646                           	opt stack 0
   647                           
   648                           ; 3 bytes @ 0x12
   649  000013                     	ds	2
   650  000015                     ?___ftmul:
   651                           	opt stack 0
   652  000015                     I2Cdev_readBytes@regAddr:
   653                           	opt stack 0
   654  000015                     ___ftmul@f1:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x14
   658  000015                     	ds	1
   659  000016                     I2Cdev_readBytes@length:
   660                           	opt stack 0
   661  000016                     ___ftdiv@f2:
   662                           	opt stack 0
   663                           
   664                           ; 3 bytes @ 0x15
   665  000016                     	ds	1
   666  000017                     I2Cdev_readBytes@data:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x16
   670  000017                     	ds	1
   671  000018                     ___ftmul@f2:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x17
   675  000018                     	ds	1
   676  000019                     ??___ftdiv:
   677  000019                     ??_I2Cdev_readBytes:
   678                           
   679                           ; 1 bytes @ 0x18
   680  000019                     	ds	2
   681  00001B                     ??___ftmul:
   682                           
   683                           ; 1 bytes @ 0x1A
   684  00001B                     	ds	1
   685  00001C                     ___ftdiv@cntr:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x1B
   689  00001C                     	ds	1
   690  00001D                     ___ftdiv@f3:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x1C
   694  00001D                     	ds	1
   695  00001E                     ___ftmul@exp:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x1D
   699  00001E                     	ds	1
   700  00001F                     I2Cdev_readBytes@devAddr:
   701                           	opt stack 0
   702  00001F                     ___ftmul@f3_as_product:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0x1E
   706  00001F                     	ds	1
   707  000020                     I2Cdev_readBytes@count:
   708                           	opt stack 0
   709  000020                     ___ftdiv@exp:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x1F
   713  000020                     	ds	1
   714  000021                     I2Cdev_readByte@regAddr:
   715                           	opt stack 0
   716  000021                     ___ftdiv@sign:
   717                           	opt stack 0
   718  000021                     MPU6050_getMotion6@ax:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x20
   722  000021                     	ds	1
   723  000022                     ___ftmul@cntr:
   724                           	opt stack 0
   725  000022                     I2Cdev_readByte@data:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x21
   729  000022                     	ds	1
   730  000023                     ___ftmul@sign:
   731                           	opt stack 0
   732  000023                     MPU6050_getMotion6@ay:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x22
   736  000023                     	ds	1
   737  000024                     ?_fround:
   738                           	opt stack 0
   739  000024                     ?_scale:
   740                           	opt stack 0
   741  000024                     I2Cdev_readByte@devAddr:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x23
   745  000024                     	ds	1
   746  000025                     I2Cdev_readBits@regAddr:
   747                           	opt stack 0
   748  000025                     I2Cdev_writeBit@regAddr:
   749                           	opt stack 0
   750  000025                     I2Cdev_writeBits@regAddr:
   751                           	opt stack 0
   752  000025                     MPU6050_getMotion6@az:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x24
   756  000025                     	ds	1
   757  000026                     I2Cdev_readBits@bitStart:
   758                           	opt stack 0
   759  000026                     I2Cdev_writeBit@bitNum:
   760                           	opt stack 0
   761  000026                     I2Cdev_writeBits@bitStart:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x25
   765  000026                     	ds	1
   766  000027                     I2Cdev_readBits@length:
   767                           	opt stack 0
   768  000027                     I2Cdev_writeBit@data:
   769                           	opt stack 0
   770  000027                     I2Cdev_writeBits@length:
   771                           	opt stack 0
   772  000027                     MPU6050_getMotion6@gx:
   773                           	opt stack 0
   774  000027                     _fround$2836:
   775                           	opt stack 0
   776  000027                     _scale$2837:
   777                           	opt stack 0
   778                           
   779                           ; 3 bytes @ 0x26
   780  000027                     	ds	1
   781  000028                     ??_I2Cdev_writeBit:
   782  000028                     I2Cdev_writeBits@data:
   783                           	opt stack 0
   784  000028                     I2Cdev_readBits@data:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x27
   788  000028                     	ds	1
   789  000029                     ??_I2Cdev_writeBits:
   790  000029                     MPU6050_getMotion6@gy:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x28
   794  000029                     	ds	1
   795  00002A                     ??_I2Cdev_readBits:
   796  00002A                     scale@scl:
   797                           	opt stack 0
   798  00002A                     _fround$2835:
   799                           	opt stack 0
   800                           
   801                           ; 3 bytes @ 0x29
   802  00002A                     	ds	1
   803  00002B                     ?___fttol:
   804                           	opt stack 0
   805  00002B                     MPU6050_getMotion6@gz:
   806                           	opt stack 0
   807  00002B                     ___fttol@f1:
   808                           	opt stack 0
   809                           
   810                           ; 3 bytes @ 0x2A
   811  00002B                     	ds	1
   812  00002C                     I2Cdev_writeBits@devAddr:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x2B
   816  00002C                     	ds	1
   817  00002D                     ??_MPU6050_getMotion6:
   818  00002D                     I2Cdev_readBits@count:
   819                           	opt stack 0
   820  00002D                     I2Cdev_writeBits@mask:
   821                           	opt stack 0
   822  00002D                     fround@prec:
   823                           	opt stack 0
   824  00002D                     _I2Cdev_writeBit$422:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x2C
   828  00002D                     	ds	1
   829  00002E                     ?___ftadd:
   830                           	opt stack 0
   831  00002E                     I2Cdev_readBits@devAddr:
   832                           	opt stack 0
   833  00002E                     I2Cdev_writeBits@b:
   834                           	opt stack 0
   835  00002E                     ___ftadd@f1:
   836                           	opt stack 0
   837                           
   838                           ; 3 bytes @ 0x2D
   839  00002E                     	ds	1
   840  00002F                     ??___fttol:
   841  00002F                     I2Cdev_readBits@mask:
   842                           	opt stack 0
   843  00002F                     I2Cdev_writeBit@devAddr:
   844                           	opt stack 0
   845  00002F                     MPU6050_setFullScaleGyroRange@range:
   846                           	opt stack 0
   847  00002F                     MPU6050_setFullScaleAccelRange@range:
   848                           	opt stack 0
   849  00002F                     MPU6050_setClockSource@source:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x2E
   853  00002F                     	ds	1
   854  000030                     I2Cdev_readBits@b:
   855                           	opt stack 0
   856  000030                     I2Cdev_writeBit@b:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x2F
   860  000030                     	ds	1
   861  000031                     MPU6050_setSleepEnabled@enabled:
   862                           	opt stack 0
   863  000031                     ___ftadd@f2:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0x30
   867  000031                     	ds	1
   868  000032                     
   869                           ; 1 bytes @ 0x31
   870  000032                     	ds	2
   871  000034                     ??___ftadd:
   872  000034                     ___fttol@sign1:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x33
   876  000034                     	ds	1
   877  000035                     ___fttol@lval:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x34
   881  000035                     	ds	2
   882  000037                     ___ftadd@sign:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x36
   886  000037                     	ds	1
   887  000038                     ___ftadd@exp2:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x37
   891  000038                     	ds	1
   892  000039                     ___ftadd@exp1:
   893                           	opt stack 0
   894  000039                     ___fttol@exp1:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x38
   898  000039                     	ds	1
   899  00003A                     ?___ftsub:
   900                           	opt stack 0
   901  00003A                     ___ftsub@f1:
   902                           	opt stack 0
   903  00003A                     USART_Init@baud_rate:
   904                           	opt stack 0
   905                           
   906                           ; 4 bytes @ 0x39
   907  00003A                     	ds	3
   908  00003D                     ___ftsub@f2:
   909                           	opt stack 0
   910                           
   911                           ; 3 bytes @ 0x3C
   912  00003D                     	ds	1
   913  00003E                     USART_Init@temp:
   914                           	opt stack 0
   915                           
   916                           ; 3 bytes @ 0x3D
   917  00003E                     	ds	2
   918  000040                     ?_printf:
   919                           	opt stack 0
   920  000040                     printf@f:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x3F
   924  000040                     	ds	1
   925  000041                     ??_initBT:
   926                           
   927                           ; 1 bytes @ 0x40
   928  000041                     	ds	4
   929  000045                     ??_printf:
   930                           
   931                           ; 1 bytes @ 0x44
   932  000045                     	ds	6
   933  00004B                     ??_main:
   934                           
   935                           ; 1 bytes @ 0x4A
   936  00004B                     	ds	1
   937                           tblptru	equ	0xFF8
   938                           postinc0	equ	0xFEE
   939                           wreg	equ	0xFE8
   940                           
   941 ;;
   942 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   943 ;;
   944 ;; *************** function _main *****************
   945 ;; Defined at:
   946 ;;		line 29 in file "main.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;		None
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  angle           3   48[BANK0 ] float 
   951 ;;  error_angle     3   30[BANK0 ] float 
   952 ;;  dt              3   27[BANK0 ] float 
   953 ;;  A               3   24[BANK0 ] float 
   954 ;;  fgx             3    0        float 
   955 ;;  fgy             3    0        float 
   956 ;;  fgz             3    0        float 
   957 ;;  faz             3    0        float 
   958 ;;  fay             3    0        float 
   959 ;;  fax             3    0        float 
   960 ;;  gx              2   46[BANK0 ] int 
   961 ;;  ax              2   44[BANK0 ] int 
   962 ;;  gz              2   42[BANK0 ] int 
   963 ;;  gy              2   40[BANK0 ] int 
   964 ;;  az              2   38[BANK0 ] int 
   965 ;;  ay              2   36[BANK0 ] int 
   966 ;;  data_in         1   23[BANK0 ] unsigned char 
   967 ;; Return value:  Size  Location     Type
   968 ;;                  2   28[None  ] int 
   969 ;; Registers used:
   970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   976 ;;      Params:         0       0       0       0       0       0       0       0       0
   977 ;;      Locals:         0      28       0       0       0       0       0       0       0
   978 ;;      Temps:          1       0       0       0       0       0       0       0       0
   979 ;;      Totals:         1      28       0       0       0       0       0       0       0
   980 ;;Total ram usage:       29 bytes
   981 ;; Hardware stack levels required when called:    7
   982 ;; This function calls:
   983 ;;		_MPU6050
   984 ;;		_MPU6050_getMotion6
   985 ;;		_MPU6050_initialize
   986 ;;		_MPU6050_testConnection
   987 ;;		_OpenI2C
   988 ;;		___awtoft
   989 ;;		___ftadd
   990 ;;		___ftge
   991 ;;		___ftmul
   992 ;;		___ftneg
   993 ;;		___ftsub
   994 ;;		_initBT
   995 ;;		_initIO
   996 ;;		_printf
   997 ;; This function is called by:
   998 ;;		Startup code after reset
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text0
  1003  0012A2                     __ptext0:
  1004                           	opt stack 0
  1005  0012A2                     _main:
  1006                           	opt stack 24
  1007                           
  1008                           ;main.c: 30: char data_in=0;
  1009                           
  1010                           ;incstack = 0
  1011  0012A2  0E00               	movlw	0
  1012  0012A4  0100               	movlb	0	; () banked
  1013  0012A6  6F77               	movwf	main@data_in& (0+255),b
  1014                           
  1015                           ;main.c: 31: int16_t ax, ay, az, gx, gy, gz;
  1016                           ;main.c: 32: float fax, fay, faz, fgz, fgy, fgx;
  1017                           ;main.c: 33: float angle=180;
  1018  0012A8  0E00               	movlw	0
  1019  0012AA  6F90               	movwf	main@angle& (0+255),b
  1020  0012AC  0E34               	movlw	52
  1021  0012AE  6F91               	movwf	(main@angle+1)& (0+255),b
  1022  0012B0  0E43               	movlw	67
  1023  0012B2  6F92               	movwf	(main@angle+2)& (0+255),b
  1024                           
  1025                           ;main.c: 34: float A = 0.962;
  1026  0012B4  0E46               	movlw	70
  1027  0012B6  6F78               	movwf	main@A& (0+255),b
  1028  0012B8  0E76               	movlw	118
  1029  0012BA  6F79               	movwf	(main@A+1)& (0+255),b
  1030  0012BC  0E3F               	movlw	63
  1031  0012BE  6F7A               	movwf	(main@A+2)& (0+255),b
  1032                           
  1033                           ;main.c: 35: float dt = 0.02;
  1034  0012C0  0ED7               	movlw	215
  1035  0012C2  6F7B               	movwf	main@dt& (0+255),b
  1036  0012C4  0EA3               	movlw	163
  1037  0012C6  6F7C               	movwf	(main@dt+1)& (0+255),b
  1038  0012C8  0E3C               	movlw	60
  1039  0012CA  6F7D               	movwf	(main@dt+2)& (0+255),b
  1040                           
  1041                           ;main.c: 36: float error_angle;
  1042                           ;main.c: 38: OSCCON = 0x72;
  1043  0012CC  0E72               	movlw	114
  1044  0012CE  6ED3               	movwf	4051,c	;volatile
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;main.c: 40: LATCbits.LATC2=1;
  1048  0012D0  848B               	bsf	3979,2,c	;volatile
  1049                           
  1050                           ; BSR set to: 0
  1051                           ;main.c: 42: initIO();
  1052  0012D2  ECC0  F013         	call	_initIO	;wreg free
  1053                           
  1054                           ;main.c: 43: initBT();
  1055  0012D6  ECAE  F013         	call	_initBT	;wreg free
  1056                           
  1057                           ;main.c: 45: _delay((unsigned long)((30)*(8000000/4000.0)));
  1058  0012DA  0E4E               	movlw	78
  1059  0012DC  6E4B               	movwf	??_main& (0+255),c
  1060  0012DE  0EEB               	movlw	235
  1061  0012E0                     u4307:
  1062  0012E0  2EE8               	decfsz	wreg,f,c
  1063  0012E2  D7FE               	bra	u4307
  1064  0012E4  2E4B               	decfsz	??_main& (0+255),f,c
  1065  0012E6  D7FC               	bra	u4307
  1066  0012E8  F000               	nop	
  1067                           
  1068                           ;main.c: 47: OpenI2C(0b00001000, 0b10000000);
  1069  0012EA  0E80               	movlw	128
  1070  0012EC  6E01               	movwf	OpenI2C@slew,c
  1071  0012EE  0E08               	movlw	8
  1072  0012F0  ECE1  F013         	call	_OpenI2C
  1073                           
  1074                           ;main.c: 48: SSPADD = 14;
  1075  0012F4  0E0E               	movlw	14
  1076  0012F6  6EC8               	movwf	4040,c	;volatile
  1077                           
  1078                           ;main.c: 50: MPU6050(0x68);
  1079  0012F8  0E68               	movlw	104
  1080  0012FA  EC83  F014         	call	_MPU6050
  1081                           
  1082                           ;main.c: 51: printf("Init MPU... \r\n");
  1083  0012FE  0E77               	movlw	low STR_1
  1084  001300  6E40               	movwf	printf@f,c
  1085  001302  0E08               	movlw	high STR_1
  1086  001304  6E41               	movwf	printf@f+1,c
  1087  001306  EC55  F004         	call	_printf	;wreg free
  1088                           
  1089                           ;main.c: 52: MPU6050_initialize();
  1090  00130A  EC0D  F014         	call	_MPU6050_initialize	;wreg free
  1091                           
  1092                           ;main.c: 53: _delay((unsigned long)((30)*(8000000/4000.0)));
  1093  00130E  0E4E               	movlw	78
  1094  001310  6E4B               	movwf	??_main& (0+255),c
  1095  001312  0EEB               	movlw	235
  1096  001314                     u4317:
  1097  001314  2EE8               	decfsz	wreg,f,c
  1098  001316  D7FE               	bra	u4317
  1099  001318  2E4B               	decfsz	??_main& (0+255),f,c
  1100  00131A  D7FC               	bra	u4317
  1101  00131C  F000               	nop	
  1102                           
  1103                           ;main.c: 54: if(MPU6050_testConnection())
  1104  00131E  EC71  F014         	call	_MPU6050_testConnection	;wreg free
  1105  001322  0900               	iorlw	0
  1106  001324  B4D8               	btfsc	status,2,c
  1107  001326  D007               	goto	l29
  1108                           
  1109                           ;main.c: 55: printf("MPU enabled!\r\n");
  1110  001328  0E86               	movlw	low STR_2
  1111  00132A  6E40               	movwf	printf@f,c
  1112  00132C  0E08               	movlw	high STR_2
  1113  00132E  6E41               	movwf	printf@f+1,c
  1114  001330  EC55  F004         	call	_printf	;wreg free
  1115  001334  D006               	goto	l30
  1116  001336                     l29:
  1117                           
  1118                           ;main.c: 56: else printf("MPU failure\r\n");
  1119  001336  0E95               	movlw	low STR_3
  1120  001338  6E40               	movwf	printf@f,c
  1121  00133A  0E08               	movlw	high STR_3
  1122  00133C  6E41               	movwf	printf@f+1,c
  1123  00133E  EC55  F004         	call	_printf	;wreg free
  1124  001342                     l30:
  1125                           
  1126                           ;main.c: 59: MPU6050_getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
  1127                           
  1128                           ;main.c: 58: while (1) {
  1129  001342  0E8C               	movlw	low main@ax
  1130  001344  6E21               	movwf	MPU6050_getMotion6@ax,c
  1131  001346  0E00               	movlw	high main@ax
  1132  001348  6E22               	movwf	MPU6050_getMotion6@ax+1,c
  1133  00134A  0E84               	movlw	low main@ay
  1134  00134C  6E23               	movwf	MPU6050_getMotion6@ay,c
  1135  00134E  0E00               	movlw	high main@ay
  1136  001350  6E24               	movwf	MPU6050_getMotion6@ay+1,c
  1137  001352  0E86               	movlw	low main@az
  1138  001354  6E25               	movwf	MPU6050_getMotion6@az,c
  1139  001356  0E00               	movlw	high main@az
  1140  001358  6E26               	movwf	MPU6050_getMotion6@az+1,c
  1141  00135A  0E8E               	movlw	low main@gx
  1142  00135C  6E27               	movwf	MPU6050_getMotion6@gx,c
  1143  00135E  0E00               	movlw	high main@gx
  1144  001360  6E28               	movwf	MPU6050_getMotion6@gx+1,c
  1145  001362  0E88               	movlw	low main@gy
  1146  001364  6E29               	movwf	MPU6050_getMotion6@gy,c
  1147  001366  0E00               	movlw	high main@gy
  1148  001368  6E2A               	movwf	MPU6050_getMotion6@gy+1,c
  1149  00136A  0E8A               	movlw	low main@gz
  1150  00136C  6E2B               	movwf	MPU6050_getMotion6@gz,c
  1151  00136E  0E00               	movlw	high main@gz
  1152  001370  6E2C               	movwf	MPU6050_getMotion6@gz+1,c
  1153  001372  ECA6  F00E         	call	_MPU6050_getMotion6	;wreg free
  1154                           
  1155                           ;main.c: 62: angle = angle + gx*dt;
  1156  001376  C07B  F018         	movff	main@dt,___ftmul@f2
  1157  00137A  C07C  F019         	movff	main@dt+1,___ftmul@f2+1
  1158  00137E  C07D  F01A         	movff	main@dt+2,___ftmul@f2+2
  1159  001382  C08E  F009         	movff	main@gx,___awtoft@c
  1160  001386  C08F  F00A         	movff	main@gx+1,___awtoft@c+1
  1161  00138A  EC6D  F013         	call	___awtoft	;wreg free
  1162  00138E  C009  F015         	movff	?___awtoft,___ftmul@f1
  1163  001392  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  1164  001396  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  1165  00139A  ECB2  F00D         	call	___ftmul	;wreg free
  1166  00139E  C015  F02E         	movff	?___ftmul,___ftadd@f1
  1167  0013A2  C016  F02F         	movff	?___ftmul+1,___ftadd@f1+1
  1168  0013A6  C017  F030         	movff	?___ftmul+2,___ftadd@f1+2
  1169  0013AA  C090  F031         	movff	main@angle,___ftadd@f2
  1170  0013AE  C091  F032         	movff	main@angle+1,___ftadd@f2+1
  1171  0013B2  C092  F033         	movff	main@angle+2,___ftadd@f2+2
  1172  0013B6  ECAF  F00B         	call	___ftadd	;wreg free
  1173  0013BA  C02E  F090         	movff	?___ftadd,main@angle
  1174  0013BE  C02F  F091         	movff	?___ftadd+1,main@angle+1
  1175  0013C2  C030  F092         	movff	?___ftadd+2,main@angle+2
  1176                           
  1177                           ;main.c: 63: error_angle = ax - angle;
  1178  0013C6  C08C  F009         	movff	main@ax,___awtoft@c
  1179  0013CA  C08D  F00A         	movff	main@ax+1,___awtoft@c+1
  1180  0013CE  EC6D  F013         	call	___awtoft	;wreg free
  1181  0013D2  C009  F02E         	movff	?___awtoft,___ftadd@f1
  1182  0013D6  C00A  F02F         	movff	?___awtoft+1,___ftadd@f1+1
  1183  0013DA  C00B  F030         	movff	?___awtoft+2,___ftadd@f1+2
  1184  0013DE  C090  F001         	movff	main@angle,___ftneg@f1
  1185  0013E2  C091  F002         	movff	main@angle+1,___ftneg@f1+1
  1186  0013E6  C092  F003         	movff	main@angle+2,___ftneg@f1+2
  1187  0013EA  EC9C  F013         	call	___ftneg	;wreg free
  1188  0013EE  C001  F031         	movff	?___ftneg,___ftadd@f2
  1189  0013F2  C002  F032         	movff	?___ftneg+1,___ftadd@f2+1
  1190  0013F6  C003  F033         	movff	?___ftneg+2,___ftadd@f2+2
  1191  0013FA  ECAF  F00B         	call	___ftadd	;wreg free
  1192  0013FE  C02E  F07E         	movff	?___ftadd,main@error_angle
  1193  001402  C02F  F07F         	movff	?___ftadd+1,main@error_angle+1
  1194  001406  C030  F080         	movff	?___ftadd+2,main@error_angle+2
  1195                           
  1196                           ;main.c: 64: angle = angle + (1-A)*error_angle;
  1197  00140A  C07E  F018         	movff	main@error_angle,___ftmul@f2
  1198  00140E  C07F  F019         	movff	main@error_angle+1,___ftmul@f2+1
  1199  001412  C080  F01A         	movff	main@error_angle+2,___ftmul@f2+2
  1200  001416  0E00               	movlw	0
  1201  001418  6E31               	movwf	___ftadd@f2,c
  1202  00141A  0E80               	movlw	128
  1203  00141C  6E32               	movwf	___ftadd@f2+1,c
  1204  00141E  0E3F               	movlw	63
  1205  001420  6E33               	movwf	___ftadd@f2+2,c
  1206  001422  C078  F001         	movff	main@A,___ftneg@f1
  1207  001426  C079  F002         	movff	main@A+1,___ftneg@f1+1
  1208  00142A  C07A  F003         	movff	main@A+2,___ftneg@f1+2
  1209  00142E  EC9C  F013         	call	___ftneg	;wreg free
  1210  001432  C001  F02E         	movff	?___ftneg,___ftadd@f1
  1211  001436  C002  F02F         	movff	?___ftneg+1,___ftadd@f1+1
  1212  00143A  C003  F030         	movff	?___ftneg+2,___ftadd@f1+2
  1213  00143E  ECAF  F00B         	call	___ftadd	;wreg free
  1214  001442  C02E  F015         	movff	?___ftadd,___ftmul@f1
  1215  001446  C02F  F016         	movff	?___ftadd+1,___ftmul@f1+1
  1216  00144A  C030  F017         	movff	?___ftadd+2,___ftmul@f1+2
  1217  00144E  ECB2  F00D         	call	___ftmul	;wreg free
  1218  001452  C015  F081         	movff	?___ftmul,_main$2834
  1219  001456  C016  F082         	movff	?___ftmul+1,_main$2834+1
  1220  00145A  C017  F083         	movff	?___ftmul+2,_main$2834+2
  1221                           
  1222                           ;main.c: 64: angle = angle + (1-A)*error_angle;
  1223  00145E  C081  F02E         	movff	_main$2834,___ftadd@f1
  1224  001462  C082  F02F         	movff	_main$2834+1,___ftadd@f1+1
  1225  001466  C083  F030         	movff	_main$2834+2,___ftadd@f1+2
  1226  00146A  C090  F031         	movff	main@angle,___ftadd@f2
  1227  00146E  C091  F032         	movff	main@angle+1,___ftadd@f2+1
  1228  001472  C092  F033         	movff	main@angle+2,___ftadd@f2+2
  1229  001476  ECAF  F00B         	call	___ftadd	;wreg free
  1230  00147A  C02E  F090         	movff	?___ftadd,main@angle
  1231  00147E  C02F  F091         	movff	?___ftadd+1,main@angle+1
  1232  001482  C030  F092         	movff	?___ftadd+2,main@angle+2
  1233                           
  1234                           ;main.c: 67: printf("%f\r\n", angle);
  1235  001486  0EA3               	movlw	low STR_4
  1236  001488  6E40               	movwf	printf@f,c
  1237  00148A  0E08               	movlw	high STR_4
  1238  00148C  6E41               	movwf	printf@f+1,c
  1239  00148E  C090  F042         	movff	main@angle,?_printf+2
  1240  001492  C091  F043         	movff	main@angle+1,?_printf+3
  1241  001496  C092  F044         	movff	main@angle+2,?_printf+4
  1242  00149A  EC55  F004         	call	_printf	;wreg free
  1243                           
  1244                           ;main.c: 69: if(angle>360) angle-=360;
  1245  00149E  0E00               	movlw	0
  1246  0014A0  6E01               	movwf	___ftge@ff1,c
  1247  0014A2  0EB4               	movlw	180
  1248  0014A4  6E02               	movwf	___ftge@ff1+1,c
  1249  0014A6  0E43               	movlw	67
  1250  0014A8  6E03               	movwf	___ftge@ff1+2,c
  1251  0014AA  C090  F004         	movff	main@angle,___ftge@ff2
  1252  0014AE  C091  F005         	movff	main@angle+1,___ftge@ff2+1
  1253  0014B2  C092  F006         	movff	main@angle+2,___ftge@ff2+2
  1254  0014B6  EC5D  F010         	call	___ftge	;wreg free
  1255  0014BA  B0D8               	btfsc	status,0,c
  1256  0014BC  D014               	goto	l32
  1257  0014BE  C090  F03A         	movff	main@angle,___ftsub@f1
  1258  0014C2  C091  F03B         	movff	main@angle+1,___ftsub@f1+1
  1259  0014C6  C092  F03C         	movff	main@angle+2,___ftsub@f1+2
  1260  0014CA  0E00               	movlw	0
  1261  0014CC  6E3D               	movwf	___ftsub@f2,c
  1262  0014CE  0EB4               	movlw	180
  1263  0014D0  6E3E               	movwf	___ftsub@f2+1,c
  1264  0014D2  0E43               	movlw	67
  1265  0014D4  6E3F               	movwf	___ftsub@f2+2,c
  1266  0014D6  EC4D  F013         	call	___ftsub	;wreg free
  1267  0014DA  C03A  F090         	movff	?___ftsub,main@angle
  1268  0014DE  C03B  F091         	movff	?___ftsub+1,main@angle+1
  1269  0014E2  C03C  F092         	movff	?___ftsub+2,main@angle+2
  1270  0014E6                     l32:
  1271                           
  1272                           ;main.c: 70: _delay((unsigned long)((10)*(8000000/4000.0)));
  1273  0014E6  0E1A               	movlw	26
  1274  0014E8  6E4B               	movwf	??_main& (0+255),c
  1275  0014EA  0EF8               	movlw	248
  1276  0014EC                     u4327:
  1277  0014EC  2EE8               	decfsz	wreg,f,c
  1278  0014EE  D7FE               	bra	u4327
  1279  0014F0  2E4B               	decfsz	??_main& (0+255),f,c
  1280  0014F2  D7FC               	bra	u4327
  1281  0014F4  D000               	nop2	
  1282                           
  1283                           ;main.c: 71: LATCbits.LC2=1;
  1284  0014F6  848B               	bsf	3979,2,c	;volatile
  1285                           
  1286                           ;main.c: 72: _delay((unsigned long)((10)*(8000000/4000.0)));
  1287  0014F8  0E1A               	movlw	26
  1288  0014FA  6E4B               	movwf	??_main& (0+255),c
  1289  0014FC  0EF8               	movlw	248
  1290  0014FE                     u4337:
  1291  0014FE  2EE8               	decfsz	wreg,f,c
  1292  001500  D7FE               	bra	u4337
  1293  001502  2E4B               	decfsz	??_main& (0+255),f,c
  1294  001504  D7FC               	bra	u4337
  1295  001506  D000               	nop2	
  1296                           
  1297                           ;main.c: 73: LATCbits.LC2=0;
  1298  001508  948B               	bcf	3979,2,c	;volatile
  1299  00150A  D71B               	goto	l30
  1300  00150C                     __end_of_main:
  1301                           	opt stack 0
  1302                           tblptru	equ	0xFF8
  1303                           postinc0	equ	0xFEE
  1304                           wreg	equ	0xFE8
  1305                           status	equ	0xFD8
  1306                           
  1307 ;; *************** function _printf *****************
  1308 ;; Defined at:
  1309 ;;		line 464 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  f               2   63[COMRAM] PTR const unsigned char 
  1312 ;;		 -> STR_4(5), STR_3(14), STR_2(15), STR_1(15), 
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  tmpval          4   15[BANK0 ] struct .
  1315 ;;  val             4    9[BANK0 ] unsigned long 
  1316 ;;  fval            3   19[BANK0 ] unsigned long 
  1317 ;;  cp              3    0        PTR const unsigned char 
  1318 ;;  exp             2   13[BANK0 ] int 
  1319 ;;  prec            2    7[BANK0 ] int 
  1320 ;;  flag            2    5[BANK0 ] unsigned short 
  1321 ;;  ap              2    3[BANK0 ] PTR void [1]
  1322 ;;		 -> ?_printf(2), 
  1323 ;;  len             2    0        unsigned int 
  1324 ;;  width           2    0        int 
  1325 ;;  c               1   22[BANK0 ] char 
  1326 ;;  d               1    0        unsigned char 
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  2   63[COMRAM] int 
  1329 ;; Registers used:
  1330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1336 ;;      Params:         5       0       0       0       0       0       0       0       0
  1337 ;;      Locals:         0      23       0       0       0       0       0       0       0
  1338 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1339 ;;      Totals:        11      23       0       0       0       0       0       0       0
  1340 ;;Total ram usage:       34 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    3
  1343 ;; This function calls:
  1344 ;;		___awdiv
  1345 ;;		___ftadd
  1346 ;;		___ftge
  1347 ;;		___ftmul
  1348 ;;		___ftneg
  1349 ;;		___ftsub
  1350 ;;		___fttol
  1351 ;;		___lldiv
  1352 ;;		___llmod
  1353 ;;		___lltoft
  1354 ;;		___wmul
  1355 ;;		__div_to_l_
  1356 ;;		__tdiv_to_l_
  1357 ;;		_fround
  1358 ;;		_putch
  1359 ;;		_scale
  1360 ;; This function is called by:
  1361 ;;		_main
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           	psect	text1
  1366  0008AA                     __ptext1:
  1367                           	opt stack 0
  1368  0008AA                     _printf:
  1369                           	opt stack 27
  1370                           
  1371                           ;doprnt.c: 466: va_list ap;
  1372                           ;doprnt.c: 499: signed char c;
  1373                           ;doprnt.c: 501: int width;
  1374                           ;doprnt.c: 504: int prec;
  1375                           ;doprnt.c: 508: unsigned short flag;
  1376                           ;doprnt.c: 515: char d;
  1377                           ;doprnt.c: 516: double fval;
  1378                           ;doprnt.c: 517: int exp;
  1379                           ;doprnt.c: 523: union {
  1380                           ;doprnt.c: 524: unsigned long vd;
  1381                           ;doprnt.c: 525: double integ;
  1382                           ;doprnt.c: 526: } tmpval;
  1383                           ;doprnt.c: 528: unsigned long val;
  1384                           ;doprnt.c: 529: unsigned len;
  1385                           ;doprnt.c: 530: const char * cp;
  1386                           ;doprnt.c: 533: *ap = __va_start();
  1387                           
  1388                           ;incstack = 0
  1389  0008AA  0E42               	movlw	low (?_printf+2)
  1390  0008AC  0100               	movlb	0	; () banked
  1391  0008AE  6F63               	movwf	printf@ap& (0+255),b
  1392  0008B0  0E00               	movlw	high (?_printf+2)
  1393  0008B2  6F64               	movwf	(printf@ap+1)& (0+255),b
  1394                           
  1395                           ;doprnt.c: 536: while(c = *f++) {
  1396  0008B4  D2E4               	goto	l1144
  1397  0008B6                     
  1398                           ; BSR set to: 0
  1399                           ;doprnt.c: 538: if(c != '%')
  1400                           
  1401                           ; BSR set to: 0
  1402  0008B6  0E25               	movlw	37
  1403  0008B8  1976               	xorwf	printf@c& (0+255),w,b
  1404  0008BA  B4D8               	btfsc	status,2,c
  1405  0008BC  D004               	goto	l1100
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;doprnt.c: 540: {
  1409                           ;doprnt.c: 541: (putch(c) );
  1410  0008BE  5176               	movf	printf@c& (0+255),w,b
  1411  0008C0  ECD1  F013         	call	_putch
  1412                           
  1413                           ;doprnt.c: 542: continue;
  1414  0008C4  D2DC               	goto	l1144
  1415  0008C6                     l1100:
  1416                           
  1417                           ;doprnt.c: 543: }
  1418                           ;doprnt.c: 548: flag = 0;
  1419  0008C6  0E00               	movlw	0
  1420  0008C8  0100               	movlb	0	; () banked
  1421  0008CA  6F66               	movwf	(printf@flag+1)& (0+255),b
  1422  0008CC  0E00               	movlw	0
  1423  0008CE  6F65               	movwf	printf@flag& (0+255),b
  1424                           
  1425                           ;doprnt.c: 635: switch(c = *f++) {
  1426  0008D0  D002               	goto	l1101
  1427  0008D2                     
  1428                           ; BSR set to: 0
  1429                           ;doprnt.c: 663: flag |= 0x400;
  1430                           
  1431                           ; BSR set to: 0
  1432  0008D2  8566               	bsf	(printf@flag+1)& (0+255),2,b
  1433                           
  1434                           ;doprnt.c: 664: break;
  1435  0008D4  D011               	goto	l1105
  1436  0008D6                     l1101:
  1437                           
  1438                           ; BSR set to: 0
  1439                           
  1440                           ; BSR set to: 0
  1441  0008D6  C040  FFF6         	movff	printf@f,tblptrl
  1442  0008DA  C041  FFF7         	movff	printf@f+1,tblptrh
  1443  0008DE  4A40               	infsnz	printf@f,f,c
  1444  0008E0  2A41               	incf	printf@f+1,f,c
  1445  0008E2                     	if	0	;tblptru may be non-zero
  1446  0008E2                     	endif
  1447  0008E2                     	if	0	;tblptru may be non-zero
  1448  0008E2                     	endif
  1449  0008E2  0008               	tblrd		*
  1450  0008E4  CFF5 F076          	movff	tablat,printf@c
  1451  0008E8  5176               	movf	printf@c& (0+255),w,b
  1452                           
  1453                           ; Switch size 1, requested type "space"
  1454                           ; Number of cases is 2, Range of values is 0 to 102
  1455                           ; switch strategies available:
  1456                           ; Name         Instructions Cycles
  1457                           ; simple_byte            7     4 (average)
  1458                           ;	Chosen strategy is simple_byte
  1459  0008EA  0A00               	xorlw	0	; case 0
  1460  0008EC  B4D8               	btfsc	status,2,c
  1461  0008EE  0012               	return	
  1462  0008F0  0A66               	xorlw	102	; case 102
  1463  0008F2  B4D8               	btfsc	status,2,c
  1464  0008F4  D7EE               	goto	l1104
  1465  0008F6  D2C3               	goto	l1144
  1466  0008F8                     l1105:
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;doprnt.c: 825: if(flag & (0x700)) {
  1470                           
  1471                           ; BSR set to: 0
  1472  0008F8  0E07               	movlw	7
  1473  0008FA  1566               	andwf	(printf@flag+1)& (0+255),w,b
  1474  0008FC  B4D8               	btfsc	status,2,c
  1475  0008FE  D2B2               	goto	l1107
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;doprnt.c: 829: prec = 6;
  1479  000900  0E00               	movlw	0
  1480  000902  6F68               	movwf	(printf@prec+1)& (0+255),b
  1481  000904  0E06               	movlw	6
  1482  000906  6F67               	movwf	printf@prec& (0+255),b
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1486  000908  C063  FFD9         	movff	printf@ap,fsr2l
  1487  00090C  C064  FFDA         	movff	printf@ap+1,fsr2h
  1488  000910  CFDE F073          	movff	postinc2,printf@fval
  1489  000914  CFDE F074          	movff	postinc2,printf@fval+1
  1490  000918  CFDD F075          	movff	postdec2,printf@fval+2
  1491                           
  1492                           ; BSR set to: 0
  1493  00091C  0E03               	movlw	3
  1494  00091E  2763               	addwf	printf@ap& (0+255),f,b
  1495  000920  0E00               	movlw	0
  1496  000922  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;doprnt.c: 831: if(fval < 0.0) {
  1500  000924  AF75               	btfss	(printf@fval+2)& (0+255),7,b
  1501  000926  D011               	goto	l1108
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;doprnt.c: 832: fval = -fval;
  1505  000928  C073  F001         	movff	printf@fval,___ftneg@f1
  1506  00092C  C074  F002         	movff	printf@fval+1,___ftneg@f1+1
  1507  000930  C075  F003         	movff	printf@fval+2,___ftneg@f1+2
  1508  000934  EC9C  F013         	call	___ftneg	;wreg free
  1509  000938  C001  F073         	movff	?___ftneg,printf@fval
  1510  00093C  C002  F074         	movff	?___ftneg+1,printf@fval+1
  1511  000940  C003  F075         	movff	?___ftneg+2,printf@fval+2
  1512                           
  1513                           ;doprnt.c: 833: flag |= 0x03;
  1514  000944  0E03               	movlw	3
  1515  000946  0100               	movlb	0	; () banked
  1516  000948  1365               	iorwf	printf@flag& (0+255),f,b
  1517  00094A                     l1108:
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;doprnt.c: 834: }
  1521                           ;doprnt.c: 835: exp = 0;
  1522                           
  1523                           ; BSR set to: 0
  1524  00094A  0E00               	movlw	0
  1525  00094C  6F6E               	movwf	(printf@exp+1)& (0+255),b
  1526  00094E  0E00               	movlw	0
  1527  000950  6F6D               	movwf	printf@exp& (0+255),b
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;doprnt.c: 836: if( fval!=0) {
  1531  000952  5173               	movf	printf@fval& (0+255),w,b
  1532  000954  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1533  000956  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1534  000958  B4D8               	btfsc	status,2,c
  1535  00095A  D086               	goto	l1113
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1539  00095C  0E82               	movlw	130
  1540  00095E  6E45               	movwf	??_printf& (0+255),c
  1541  000960  0EFF               	movlw	255
  1542  000962  6E46               	movwf	(??_printf+1)& (0+255),c
  1543  000964  C073  F047         	movff	printf@fval,??_printf+2
  1544  000968  C074  F048         	movff	printf@fval+1,??_printf+3
  1545  00096C  C075  F049         	movff	printf@fval+2,??_printf+4
  1546  000970  C076  F04A         	movff	printf@fval+3,??_printf+5
  1547  000974  0E10               	movlw	16
  1548  000976  D005               	goto	u3660
  1549  000978                     u3665:
  1550  000978  90D8               	bcf	status,0,c
  1551  00097A  324A               	rrcf	??_printf+5,f,c
  1552  00097C  3249               	rrcf	??_printf+4,f,c
  1553  00097E  3248               	rrcf	??_printf+3,f,c
  1554  000980  3247               	rrcf	??_printf+2,f,c
  1555  000982                     u3660:
  1556  000982  2EE8               	decfsz	wreg,f,c
  1557  000984  D7F9               	goto	u3665
  1558  000986  5047               	movf	??_printf+2,w,c
  1559  000988  2445               	addwf	??_printf,w,c
  1560  00098A  6F6D               	movwf	printf@exp& (0+255),b
  1561  00098C  0E00               	movlw	0
  1562  00098E  2046               	addwfc	??_printf+1,w,c
  1563  000990  6F6E               	movwf	(printf@exp+1)& (0+255),b
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;doprnt.c: 838: exp--;
  1567  000992  076D               	decf	printf@exp& (0+255),f,b
  1568  000994  A0D8               	btfss	status,0,c
  1569  000996  076E               	decf	(printf@exp+1)& (0+255),f,b
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;doprnt.c: 839: exp *= 3;
  1573  000998  C06D  F00F         	movff	printf@exp,___wmul@multiplier
  1574  00099C  C06E  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1575  0009A0  0E00               	movlw	0
  1576  0009A2  6E12               	movwf	___wmul@multiplicand+1,c
  1577  0009A4  0E03               	movlw	3
  1578  0009A6  6E11               	movwf	___wmul@multiplicand,c
  1579  0009A8  EC89  F013         	call	___wmul	;wreg free
  1580  0009AC  C00F  F06D         	movff	?___wmul,printf@exp
  1581  0009B0  C010  F06E         	movff	?___wmul+1,printf@exp+1
  1582                           
  1583                           ;doprnt.c: 840: exp /= 10;
  1584  0009B4  C06D  F007         	movff	printf@exp,___awdiv@dividend
  1585  0009B8  C06E  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1586  0009BC  0E00               	movlw	0
  1587  0009BE  6E0A               	movwf	___awdiv@divisor+1,c
  1588  0009C0  0E0A               	movlw	10
  1589  0009C2  6E09               	movwf	___awdiv@divisor,c
  1590  0009C4  ECE8  F010         	call	___awdiv	;wreg free
  1591  0009C8  C007  F06D         	movff	?___awdiv,printf@exp
  1592  0009CC  C008  F06E         	movff	?___awdiv+1,printf@exp+1
  1593                           
  1594                           ;doprnt.c: 841: if(exp < 0)
  1595  0009D0  0100               	movlb	0	; () banked
  1596  0009D2  AF6E               	btfss	(printf@exp+1)& (0+255),7,b
  1597  0009D4  D003               	goto	l1110
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;doprnt.c: 842: exp--;
  1601  0009D6  076D               	decf	printf@exp& (0+255),f,b
  1602  0009D8  A0D8               	btfss	status,0,c
  1603  0009DA  076E               	decf	(printf@exp+1)& (0+255),f,b
  1604  0009DC                     l1110:
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1608                           
  1609                           ; BSR set to: 0
  1610  0009DC  516D               	movf	printf@exp& (0+255),w,b
  1611  0009DE  0800               	sublw	0
  1612  0009E0  EC4D  F007         	call	_scale
  1613  0009E4  C024  F06F         	movff	?_scale,printf@tmpval
  1614  0009E8  C025  F070         	movff	?_scale+1,printf@tmpval+1
  1615  0009EC  C026  F071         	movff	?_scale+2,printf@tmpval+2
  1616                           
  1617                           ;doprnt.c: 847: tmpval.integ *= fval;
  1618  0009F0  C06F  F015         	movff	printf@tmpval,___ftmul@f1
  1619  0009F4  C070  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1620  0009F8  C071  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1621  0009FC  C073  F018         	movff	printf@fval,___ftmul@f2
  1622  000A00  C074  F019         	movff	printf@fval+1,___ftmul@f2+1
  1623  000A04  C075  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1624  000A08  ECB2  F00D         	call	___ftmul	;wreg free
  1625  000A0C  C015  F06F         	movff	?___ftmul,printf@tmpval
  1626  000A10  C016  F070         	movff	?___ftmul+1,printf@tmpval+1
  1627  000A14  C017  F071         	movff	?___ftmul+2,printf@tmpval+2
  1628                           
  1629                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1630  000A18  C06F  F001         	movff	printf@tmpval,___ftge@ff1
  1631  000A1C  C070  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1632  000A20  C071  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1633  000A24  0E00               	movlw	0
  1634  000A26  6E04               	movwf	___ftge@ff2,c
  1635  000A28  0E80               	movlw	128
  1636  000A2A  6E05               	movwf	___ftge@ff2+1,c
  1637  000A2C  0E3F               	movlw	63
  1638  000A2E  6E06               	movwf	___ftge@ff2+2,c
  1639  000A30  EC5D  F010         	call	___ftge	;wreg free
  1640  000A34  B0D8               	btfsc	status,0,c
  1641  000A36  D005               	goto	l1111
  1642                           
  1643                           ;doprnt.c: 849: exp--;
  1644  000A38  0100               	movlb	0	; () banked
  1645  000A3A  076D               	decf	printf@exp& (0+255),f,b
  1646  000A3C  A0D8               	btfss	status,0,c
  1647  000A3E  076E               	decf	(printf@exp+1)& (0+255),f,b
  1648  000A40  D013               	goto	l1113
  1649  000A42                     l1111:
  1650                           
  1651                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1652                           
  1653                           ; BSR set to: 0
  1654  000A42  C06F  F001         	movff	printf@tmpval,___ftge@ff1
  1655  000A46  C070  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1656  000A4A  C071  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1657  000A4E  0E00               	movlw	0
  1658  000A50  6E04               	movwf	___ftge@ff2,c
  1659  000A52  0E20               	movlw	32
  1660  000A54  6E05               	movwf	___ftge@ff2+1,c
  1661  000A56  0E41               	movlw	65
  1662  000A58  6E06               	movwf	___ftge@ff2+2,c
  1663  000A5A  EC5D  F010         	call	___ftge	;wreg free
  1664  000A5E  A0D8               	btfss	status,0,c
  1665  000A60  D003               	goto	l1113
  1666                           
  1667                           ;doprnt.c: 851: exp++;
  1668  000A62  0100               	movlb	0	; () banked
  1669  000A64  4B6D               	infsnz	printf@exp& (0+255),f,b
  1670  000A66  2B6E               	incf	(printf@exp+1)& (0+255),f,b
  1671  000A68                     l1113:
  1672                           
  1673                           ;doprnt.c: 852: }
  1674                           ;doprnt.c: 1112: if(prec <= 12)
  1675                           
  1676                           ; BSR set to: 0
  1677                           
  1678                           ; BSR set to: 0
  1679                           
  1680                           ; BSR set to: 0
  1681  000A68  0100               	movlb	0	; () banked
  1682  000A6A  BF68               	btfsc	(printf@prec+1)& (0+255),7,b
  1683  000A6C  D006               	goto	u3700
  1684  000A6E  5168               	movf	(printf@prec+1)& (0+255),w,b
  1685  000A70  E11B               	bnz	l4898
  1686  000A72  0E0D               	movlw	13
  1687  000A74  5D67               	subwf	printf@prec& (0+255),w,b
  1688  000A76  B0D8               	btfsc	status,0,c
  1689  000A78  D017               	goto	l1114
  1690  000A7A                     u3700:
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;doprnt.c: 1113: fval += fround(prec);
  1694  000A7A  C073  F02E         	movff	printf@fval,___ftadd@f1
  1695  000A7E  C074  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1696  000A82  C075  F030         	movff	printf@fval+2,___ftadd@f1+2
  1697  000A86  5167               	movf	printf@prec& (0+255),w,b
  1698  000A88  EC86  F00A         	call	_fround
  1699  000A8C  C024  F031         	movff	?_fround,___ftadd@f2
  1700  000A90  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1701  000A94  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1702  000A98  ECAF  F00B         	call	___ftadd	;wreg free
  1703  000A9C  C02E  F073         	movff	?___ftadd,printf@fval
  1704  000AA0  C02F  F074         	movff	?___ftadd+1,printf@fval+1
  1705  000AA4  C030  F075         	movff	?___ftadd+2,printf@fval+2
  1706  000AA8                     l1114:
  1707  000AA8                     l4898:
  1708                           
  1709                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1710  000AA8  0100               	movlb	0	; () banked
  1711  000AAA  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  1712  000AAC  D006               	goto	u3710
  1713  000AAE  516E               	movf	(printf@exp+1)& (0+255),w,b
  1714  000AB0  E120               	bnz	l4906
  1715  000AB2  0E0A               	movlw	10
  1716  000AB4  5D6D               	subwf	printf@exp& (0+255),w,b
  1717  000AB6  B0D8               	btfsc	status,0,c
  1718  000AB8  D01C               	goto	u3740
  1719  000ABA                     u3710:
  1720                           
  1721                           ; BSR set to: 0
  1722  000ABA  5173               	movf	printf@fval& (0+255),w,b
  1723  000ABC  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1724  000ABE  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1725  000AC0  B4D8               	btfsc	status,2,c
  1726  000AC2  D056               	goto	l1115
  1727                           
  1728                           ; BSR set to: 0
  1729  000AC4  C073  F02B         	movff	printf@fval,___fttol@f1
  1730  000AC8  C074  F02C         	movff	printf@fval+1,___fttol@f1+1
  1731  000ACC  C075  F02D         	movff	printf@fval+2,___fttol@f1+2
  1732  000AD0  EC2C  F00E         	call	___fttol	;wreg free
  1733  000AD4  502B               	movf	?___fttol,w,c
  1734  000AD6  102C               	iorwf	?___fttol+1,w,c
  1735  000AD8  102D               	iorwf	?___fttol+2,w,c
  1736  000ADA  102E               	iorwf	?___fttol+3,w,c
  1737  000ADC  A4D8               	btfss	status,2,c
  1738  000ADE  D048               	goto	l1115
  1739  000AE0  0100               	movlb	0	; () banked
  1740  000AE2  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  1741  000AE4  D045               	goto	l1115
  1742  000AE6  516E               	movf	(printf@exp+1)& (0+255),w,b
  1743  000AE8  E104               	bnz	l4906
  1744  000AEA  0E02               	movlw	2
  1745  000AEC  5D6D               	subwf	printf@exp& (0+255),w,b
  1746  000AEE  A0D8               	btfss	status,0,c
  1747  000AF0  D03F               	goto	l1115
  1748  000AF2                     u3740:
  1749  000AF2                     l4906:
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1753  000AF2  C06F  F001         	movff	printf@tmpval,___ftge@ff1
  1754  000AF6  C070  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1755  000AFA  C071  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1756  000AFE  0E70               	movlw	112
  1757  000B00  6E04               	movwf	___ftge@ff2,c
  1758  000B02  0E89               	movlw	137
  1759  000B04  6E05               	movwf	___ftge@ff2+1,c
  1760  000B06  0E40               	movlw	64
  1761  000B08  6E06               	movwf	___ftge@ff2+2,c
  1762  000B0A  EC5D  F010         	call	___ftge	;wreg free
  1763  000B0E  B0D8               	btfsc	status,0,c
  1764  000B10  D003               	goto	l1118
  1765                           
  1766                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1767  000B12  0100               	movlb	0	; () banked
  1768  000B14  0EF7               	movlw	247
  1769  000B16  D002               	goto	L1
  1770  000B18                     l1118:
  1771                           
  1772                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1773                           
  1774                           ; BSR set to: 0
  1775  000B18  0100               	movlb	0	; () banked
  1776  000B1A  0EF8               	movlw	248
  1777  000B1C                     L1:
  1778  000B1C  276D               	addwf	printf@exp& (0+255),f,b
  1779  000B1E  0EFF               	movlw	255
  1780  000B20  236E               	addwfc	(printf@exp+1)& (0+255),f,b
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;doprnt.c: 1124: }
  1784                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1785                           
  1786                           ; BSR set to: 0
  1787  000B22  516D               	movf	printf@exp& (0+255),w,b
  1788  000B24  EC4D  F007         	call	_scale
  1789  000B28  C024  F06F         	movff	?_scale,printf@tmpval
  1790  000B2C  C025  F070         	movff	?_scale+1,printf@tmpval+1
  1791  000B30  C026  F071         	movff	?_scale+2,printf@tmpval+2
  1792                           
  1793                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1794  000B34  C073  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1795  000B38  C074  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1796  000B3C  C075  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1797  000B40  C06F  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1798  000B44  C070  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1799  000B48  C071  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1800  000B4C  EC85  F00C         	call	__tdiv_to_l_	;wreg free
  1801  000B50  C001  F069         	movff	?__tdiv_to_l_,printf@val
  1802  000B54  C002  F06A         	movff	?__tdiv_to_l_+1,printf@val+1
  1803  000B58  C003  F06B         	movff	?__tdiv_to_l_+2,printf@val+2
  1804  000B5C  C004  F06C         	movff	?__tdiv_to_l_+3,printf@val+3
  1805                           
  1806                           ;doprnt.c: 1129: fval = 0.0;
  1807  000B60  0E00               	movlw	0
  1808  000B62  0100               	movlb	0	; () banked
  1809  000B64  6F73               	movwf	printf@fval& (0+255),b
  1810  000B66  0E00               	movlw	0
  1811  000B68  6F74               	movwf	(printf@fval+1)& (0+255),b
  1812  000B6A  0E00               	movlw	0
  1813  000B6C  6F75               	movwf	(printf@fval+2)& (0+255),b
  1814                           
  1815                           ;doprnt.c: 1130: } else {
  1816  000B6E  D033               	goto	l1124
  1817  000B70                     l1115:
  1818                           
  1819                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1820                           
  1821                           ; BSR set to: 0
  1822  000B70  C073  F02B         	movff	printf@fval,___fttol@f1
  1823  000B74  C074  F02C         	movff	printf@fval+1,___fttol@f1+1
  1824  000B78  C075  F02D         	movff	printf@fval+2,___fttol@f1+2
  1825  000B7C  EC2C  F00E         	call	___fttol	;wreg free
  1826  000B80  C02B  F069         	movff	?___fttol,printf@val
  1827  000B84  C02C  F06A         	movff	?___fttol+1,printf@val+1
  1828  000B88  C02D  F06B         	movff	?___fttol+2,printf@val+2
  1829  000B8C  C02E  F06C         	movff	?___fttol+3,printf@val+3
  1830                           
  1831                           ;doprnt.c: 1132: fval -= (double)val;
  1832  000B90  C073  F03A         	movff	printf@fval,___ftsub@f1
  1833  000B94  C074  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1834  000B98  C075  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1835  000B9C  C069  F009         	movff	printf@val,___lltoft@c
  1836  000BA0  C06A  F00A         	movff	printf@val+1,___lltoft@c+1
  1837  000BA4  C06B  F00B         	movff	printf@val+2,___lltoft@c+2
  1838  000BA8  C06C  F00C         	movff	printf@val+3,___lltoft@c+3
  1839  000BAC  ECCC  F012         	call	___lltoft	;wreg free
  1840  000BB0  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1841  000BB4  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1842  000BB8  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1843  000BBC  EC4D  F013         	call	___ftsub	;wreg free
  1844  000BC0  C03A  F073         	movff	?___ftsub,printf@fval
  1845  000BC4  C03B  F074         	movff	?___ftsub+1,printf@fval+1
  1846  000BC8  C03C  F075         	movff	?___ftsub+2,printf@fval+2
  1847                           
  1848                           ;doprnt.c: 1133: exp = 0;
  1849  000BCC  0E00               	movlw	0
  1850  000BCE  0100               	movlb	0	; () banked
  1851  000BD0  6F6E               	movwf	(printf@exp+1)& (0+255),b
  1852  000BD2  0E00               	movlw	0
  1853  000BD4  6F6D               	movwf	printf@exp& (0+255),b
  1854  000BD6                     l1124:
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;doprnt.c: 1134: }
  1858                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1859                           
  1860                           ; BSR set to: 0
  1861  000BD6  0E01               	movlw	1
  1862  000BD8  6F76               	movwf	printf@c& (0+255),b
  1863  000BDA                     l4926:
  1864                           
  1865                           ; BSR set to: 0
  1866  000BDA  0E0A               	movlw	10
  1867  000BDC  1976               	xorwf	printf@c& (0+255),w,b
  1868  000BDE  B4D8               	btfsc	status,2,c
  1869  000BE0  D018               	goto	u3780
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;doprnt.c: 1137: if(val < dpowers[c])
  1873                           
  1874                           ; BSR set to: 0
  1875                           
  1876                           ; BSR set to: 0
  1877  000BE2  5176               	movf	printf@c& (0+255),w,b
  1878  000BE4  0D04               	mullw	4
  1879  000BE6  0E01               	movlw	low _dpowers
  1880  000BE8  24F3               	addwf	prodl,w,c
  1881  000BEA  6EF6               	movwf	tblptrl,c
  1882  000BEC  0E08               	movlw	high _dpowers
  1883  000BEE  20F4               	addwfc	prodh,w,c
  1884  000BF0  6EF7               	movwf	tblptrh,c
  1885  000BF2                     	if	0	;There are less than 3 active tblptr bytes
  1886  000BF2                     	endif
  1887  000BF2  0009               	tblrd		*+
  1888  000BF4  50F5               	movf	tablat,w,c
  1889  000BF6  5D69               	subwf	printf@val& (0+255),w,b
  1890  000BF8  0009               	tblrd		*+
  1891  000BFA  50F5               	movf	tablat,w,c
  1892  000BFC  596A               	subwfb	(printf@val+1)& (0+255),w,b
  1893  000BFE  0009               	tblrd		*+
  1894  000C00  50F5               	movf	tablat,w,c
  1895  000C02  596B               	subwfb	(printf@val+2)& (0+255),w,b
  1896  000C04  0009               	tblrd		*+
  1897  000C06  50F5               	movf	tablat,w,c
  1898  000C08  596C               	subwfb	(printf@val+3)& (0+255),w,b
  1899  000C0A  A0D8               	btfss	status,0,c
  1900  000C0C  D002               	goto	u3780
  1901                           
  1902                           ; BSR set to: 0
  1903                           
  1904                           ; BSR set to: 0
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;doprnt.c: 1138: break;
  1908  000C0E  2B76               	incf	printf@c& (0+255),f,b
  1909  000C10  D7E4               	goto	l4926
  1910  000C12                     u3780:
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;doprnt.c: 1175: {
  1914                           ;doprnt.c: 1188: if(flag & 0x03)
  1915                           
  1916                           ; BSR set to: 0
  1917  000C12  0E03               	movlw	3
  1918  000C14  1565               	andwf	printf@flag& (0+255),w,b
  1919  000C16  6E45               	movwf	??_printf& (0+255),c
  1920  000C18  0E00               	movlw	0
  1921  000C1A  1566               	andwf	(printf@flag+1)& (0+255),w,b
  1922  000C1C  6E46               	movwf	(??_printf+1)& (0+255),c
  1923  000C1E  5045               	movf	??_printf,w,c
  1924  000C20  1046               	iorwf	??_printf+1,w,c
  1925  000C22  B4D8               	btfsc	status,2,c
  1926  000C24  D04A               	goto	l1129
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;doprnt.c: 1190: (putch('-') );
  1930  000C26  0E2D               	movlw	45
  1931  000C28  ECD1  F013         	call	_putch
  1932                           
  1933                           ;doprnt.c: 1195: }
  1934                           ;doprnt.c: 1196: while(c--) {
  1935  000C2C  D046               	goto	l1129
  1936  000C2E                     
  1937                           ;doprnt.c: 1200: {
  1938                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1939  000C2E  C069  F001         	movff	printf@val,___lldiv@dividend
  1940  000C32  C06A  F002         	movff	printf@val+1,___lldiv@dividend+1
  1941  000C36  C06B  F003         	movff	printf@val+2,___lldiv@dividend+2
  1942  000C3A  C06C  F004         	movff	printf@val+3,___lldiv@dividend+3
  1943  000C3E  0100               	movlb	0	; () banked
  1944  000C40  5176               	movf	printf@c& (0+255),w,b
  1945  000C42  0D04               	mullw	4
  1946  000C44  0E01               	movlw	low _dpowers
  1947  000C46  24F3               	addwf	prodl,w,c
  1948  000C48  6EF6               	movwf	tblptrl,c
  1949  000C4A  0E08               	movlw	high _dpowers
  1950  000C4C  20F4               	addwfc	prodh,w,c
  1951  000C4E  6EF7               	movwf	tblptrh,c
  1952  000C50                     	if	0	;There are less than 3 active tblptr bytes
  1953  000C50                     	endif
  1954  000C50  0009               	tblrd		*+
  1955  000C52  CFF5 F005          	movff	tablat,___lldiv@divisor
  1956  000C56  0009               	tblrd		*+
  1957  000C58  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1958  000C5C  0009               	tblrd		*+
  1959  000C5E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1960  000C62  000A               	tblrd		*-
  1961  000C64  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1962  000C68  EC2A  F011         	call	___lldiv	;wreg free
  1963  000C6C  C001  F06F         	movff	?___lldiv,printf@tmpval
  1964  000C70  C002  F070         	movff	?___lldiv+1,printf@tmpval+1
  1965  000C74  C003  F071         	movff	?___lldiv+2,printf@tmpval+2
  1966  000C78  C004  F072         	movff	?___lldiv+3,printf@tmpval+3
  1967                           
  1968                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1969  000C7C  C06F  F001         	movff	printf@tmpval,___llmod@dividend
  1970  000C80  C070  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1971  000C84  C071  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1972  000C88  C072  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1973  000C8C  0E0A               	movlw	10
  1974  000C8E  6E05               	movwf	___llmod@divisor,c
  1975  000C90  0E00               	movlw	0
  1976  000C92  6E06               	movwf	___llmod@divisor+1,c
  1977  000C94  0E00               	movlw	0
  1978  000C96  6E07               	movwf	___llmod@divisor+2,c
  1979  000C98  0E00               	movlw	0
  1980  000C9A  6E08               	movwf	___llmod@divisor+3,c
  1981  000C9C  EC99  F012         	call	___llmod	;wreg free
  1982  000CA0  C001  F06F         	movff	?___llmod,printf@tmpval
  1983  000CA4  C002  F070         	movff	?___llmod+1,printf@tmpval+1
  1984  000CA8  C003  F071         	movff	?___llmod+2,printf@tmpval+2
  1985  000CAC  C004  F072         	movff	?___llmod+3,printf@tmpval+3
  1986                           
  1987                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1988  000CB0  0100               	movlb	0	; () banked
  1989  000CB2  516F               	movf	printf@tmpval& (0+255),w,b
  1990  000CB4  0F30               	addlw	48
  1991  000CB6  ECD1  F013         	call	_putch
  1992  000CBA                     l1129:
  1993  000CBA  0100               	movlb	0	; () banked
  1994  000CBC  0776               	decf	printf@c& (0+255),f,b
  1995  000CBE  2976               	incf	printf@c& (0+255),w,b
  1996  000CC0  B4D8               	btfsc	status,2,c
  1997  000CC2  D008               	goto	l1132
  1998  000CC4  D7B4               	goto	l1130
  1999  000CC6                     l4950:
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;doprnt.c: 1208: (putch('0') );
  2003  000CC6  0E30               	movlw	48
  2004  000CC8  ECD1  F013         	call	_putch
  2005                           
  2006                           ;doprnt.c: 1209: exp--;
  2007  000CCC  0100               	movlb	0	; () banked
  2008  000CCE  076D               	decf	printf@exp& (0+255),f,b
  2009  000CD0  A0D8               	btfss	status,0,c
  2010  000CD2  076E               	decf	(printf@exp+1)& (0+255),f,b
  2011  000CD4                     l1132:
  2012                           
  2013                           ; BSR set to: 0
  2014                           
  2015                           ; BSR set to: 0
  2016  000CD4  BF6E               	btfsc	(printf@exp+1)& (0+255),7,b
  2017  000CD6  D005               	goto	u3810
  2018  000CD8  516E               	movf	(printf@exp+1)& (0+255),w,b
  2019  000CDA  E1F5               	bnz	l4950
  2020  000CDC  056D               	decf	printf@exp& (0+255),w,b
  2021  000CDE  B0D8               	btfsc	status,0,c
  2022  000CE0  D7F2               	goto	l1133
  2023  000CE2                     u3810:
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;doprnt.c: 1210: }
  2027                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2028                           
  2029                           ; BSR set to: 0
  2030  000CE2  BF68               	btfsc	(printf@prec+1)& (0+255),7,b
  2031  000CE4  D009               	goto	l1135
  2032  000CE6  5168               	movf	(printf@prec+1)& (0+255),w,b
  2033  000CE8  E104               	bnz	u3820
  2034  000CEA  0E09               	movlw	9
  2035  000CEC  5D67               	subwf	printf@prec& (0+255),w,b
  2036  000CEE  A0D8               	btfss	status,0,c
  2037  000CF0  D003               	goto	l1135
  2038  000CF2                     u3820:
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2042  000CF2  0E08               	movlw	8
  2043  000CF4  6F76               	movwf	printf@c& (0+255),b
  2044  000CF6  D002               	goto	l1136
  2045  000CF8                     l1135:
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;doprnt.c: 1213: else
  2049                           ;doprnt.c: 1214: c = prec;
  2050  000CF8  C067  F076         	movff	printf@prec,printf@c
  2051  000CFC                     l1136:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;doprnt.c: 1215: prec -= c;
  2055                           
  2056                           ; BSR set to: 0
  2057  000CFC  5176               	movf	printf@c& (0+255),w,b
  2058  000CFE  5F67               	subwf	printf@prec& (0+255),f,b
  2059  000D00  0E00               	movlw	0
  2060  000D02  BF76               	btfsc	printf@c& (0+255),7,b
  2061  000D04  0EFF               	movlw	255
  2062  000D06  5B68               	subwfb	(printf@prec+1)& (0+255),f,b
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;doprnt.c: 1219: if(c)
  2066  000D08  5176               	movf	printf@c& (0+255),w,b
  2067  000D0A  B4D8               	btfsc	status,2,c
  2068  000D0C  D003               	goto	l1137
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;doprnt.c: 1221: (putch('.') );
  2072  000D0E  0E2E               	movlw	46
  2073  000D10  ECD1  F013         	call	_putch
  2074  000D14                     l1137:
  2075                           
  2076                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2077  000D14  0100               	movlb	0	; () banked
  2078  000D16  5176               	movf	printf@c& (0+255),w,b
  2079  000D18  EC4D  F007         	call	_scale
  2080  000D1C  C024  F060         	movff	?_scale,_printf$2838
  2081  000D20  C025  F061         	movff	?_scale+1,_printf$2838+1
  2082  000D24  C026  F062         	movff	?_scale+2,_printf$2838+2
  2083                           
  2084                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2085  000D28  C073  F018         	movff	printf@fval,___ftmul@f2
  2086  000D2C  C074  F019         	movff	printf@fval+1,___ftmul@f2+1
  2087  000D30  C075  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2088  000D34  C060  F015         	movff	_printf$2838,___ftmul@f1
  2089  000D38  C061  F016         	movff	_printf$2838+1,___ftmul@f1+1
  2090  000D3C  C062  F017         	movff	_printf$2838+2,___ftmul@f1+2
  2091  000D40  ECB2  F00D         	call	___ftmul	;wreg free
  2092  000D44  C015  F02B         	movff	?___ftmul,___fttol@f1
  2093  000D48  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2094  000D4C  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2095  000D50  EC2C  F00E         	call	___fttol	;wreg free
  2096  000D54  C02B  F069         	movff	?___fttol,printf@val
  2097  000D58  C02C  F06A         	movff	?___fttol+1,printf@val+1
  2098  000D5C  C02D  F06B         	movff	?___fttol+2,printf@val+2
  2099  000D60  C02E  F06C         	movff	?___fttol+3,printf@val+3
  2100                           
  2101                           ;doprnt.c: 1228: while(c--) {
  2102  000D64  D06D               	goto	l1138
  2103  000D66                     
  2104                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2105  000D66  C069  F001         	movff	printf@val,___lldiv@dividend
  2106  000D6A  C06A  F002         	movff	printf@val+1,___lldiv@dividend+1
  2107  000D6E  C06B  F003         	movff	printf@val+2,___lldiv@dividend+2
  2108  000D72  C06C  F004         	movff	printf@val+3,___lldiv@dividend+3
  2109  000D76  0100               	movlb	0	; () banked
  2110  000D78  5176               	movf	printf@c& (0+255),w,b
  2111  000D7A  0D04               	mullw	4
  2112  000D7C  0E01               	movlw	low _dpowers
  2113  000D7E  24F3               	addwf	prodl,w,c
  2114  000D80  6EF6               	movwf	tblptrl,c
  2115  000D82  0E08               	movlw	high _dpowers
  2116  000D84  20F4               	addwfc	prodh,w,c
  2117  000D86  6EF7               	movwf	tblptrh,c
  2118  000D88                     	if	0	;There are less than 3 active tblptr bytes
  2119  000D88                     	endif
  2120  000D88  0009               	tblrd		*+
  2121  000D8A  CFF5 F005          	movff	tablat,___lldiv@divisor
  2122  000D8E  0009               	tblrd		*+
  2123  000D90  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2124  000D94  0009               	tblrd		*+
  2125  000D96  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2126  000D9A  000A               	tblrd		*-
  2127  000D9C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2128  000DA0  EC2A  F011         	call	___lldiv	;wreg free
  2129  000DA4  C001  F06F         	movff	?___lldiv,printf@tmpval
  2130  000DA8  C002  F070         	movff	?___lldiv+1,printf@tmpval+1
  2131  000DAC  C003  F071         	movff	?___lldiv+2,printf@tmpval+2
  2132  000DB0  C004  F072         	movff	?___lldiv+3,printf@tmpval+3
  2133                           
  2134                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2135  000DB4  C06F  F001         	movff	printf@tmpval,___llmod@dividend
  2136  000DB8  C070  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  2137  000DBC  C071  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  2138  000DC0  C072  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  2139  000DC4  0E0A               	movlw	10
  2140  000DC6  6E05               	movwf	___llmod@divisor,c
  2141  000DC8  0E00               	movlw	0
  2142  000DCA  6E06               	movwf	___llmod@divisor+1,c
  2143  000DCC  0E00               	movlw	0
  2144  000DCE  6E07               	movwf	___llmod@divisor+2,c
  2145  000DD0  0E00               	movlw	0
  2146  000DD2  6E08               	movwf	___llmod@divisor+3,c
  2147  000DD4  EC99  F012         	call	___llmod	;wreg free
  2148  000DD8  C001  F06F         	movff	?___llmod,printf@tmpval
  2149  000DDC  C002  F070         	movff	?___llmod+1,printf@tmpval+1
  2150  000DE0  C003  F071         	movff	?___llmod+2,printf@tmpval+2
  2151  000DE4  C004  F072         	movff	?___llmod+3,printf@tmpval+3
  2152                           
  2153                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2154  000DE8  0100               	movlb	0	; () banked
  2155  000DEA  516F               	movf	printf@tmpval& (0+255),w,b
  2156  000DEC  0F30               	addlw	48
  2157  000DEE  ECD1  F013         	call	_putch
  2158                           
  2159                           ;doprnt.c: 1232: val %= dpowers[c];
  2160  000DF2  C069  F001         	movff	printf@val,___llmod@dividend
  2161  000DF6  C06A  F002         	movff	printf@val+1,___llmod@dividend+1
  2162  000DFA  C06B  F003         	movff	printf@val+2,___llmod@dividend+2
  2163  000DFE  C06C  F004         	movff	printf@val+3,___llmod@dividend+3
  2164  000E02  0100               	movlb	0	; () banked
  2165  000E04  5176               	movf	printf@c& (0+255),w,b
  2166  000E06  0D04               	mullw	4
  2167  000E08  0E01               	movlw	low _dpowers
  2168  000E0A  24F3               	addwf	prodl,w,c
  2169  000E0C  6EF6               	movwf	tblptrl,c
  2170  000E0E  0E08               	movlw	high _dpowers
  2171  000E10  20F4               	addwfc	prodh,w,c
  2172  000E12  6EF7               	movwf	tblptrh,c
  2173  000E14                     	if	0	;There are less than 3 active tblptr bytes
  2174  000E14                     	endif
  2175  000E14  0009               	tblrd		*+
  2176  000E16  CFF5 F005          	movff	tablat,___llmod@divisor
  2177  000E1A  0009               	tblrd		*+
  2178  000E1C  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2179  000E20  0009               	tblrd		*+
  2180  000E22  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2181  000E26  000A               	tblrd		*-
  2182  000E28  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2183  000E2C  EC99  F012         	call	___llmod	;wreg free
  2184  000E30  C001  F069         	movff	?___llmod,printf@val
  2185  000E34  C002  F06A         	movff	?___llmod+1,printf@val+1
  2186  000E38  C003  F06B         	movff	?___llmod+2,printf@val+2
  2187  000E3C  C004  F06C         	movff	?___llmod+3,printf@val+3
  2188  000E40                     l1138:
  2189  000E40  0100               	movlb	0	; () banked
  2190  000E42  0776               	decf	printf@c& (0+255),f,b
  2191  000E44  2976               	incf	printf@c& (0+255),w,b
  2192  000E46  B4D8               	btfsc	status,2,c
  2193  000E48  D008               	goto	l1141
  2194  000E4A  D78D               	goto	l1139
  2195  000E4C                     
  2196                           ; BSR set to: 0
  2197                           ;doprnt.c: 1236: (putch('0') );
  2198                           
  2199                           ; BSR set to: 0
  2200  000E4C  0E30               	movlw	48
  2201  000E4E  ECD1  F013         	call	_putch
  2202                           
  2203                           ;doprnt.c: 1237: prec--;
  2204  000E52  0100               	movlb	0	; () banked
  2205  000E54  0767               	decf	printf@prec& (0+255),f,b
  2206  000E56  A0D8               	btfss	status,0,c
  2207  000E58  0768               	decf	(printf@prec+1)& (0+255),f,b
  2208  000E5A                     l1141:
  2209                           
  2210                           ; BSR set to: 0
  2211                           
  2212                           ; BSR set to: 0
  2213  000E5A  5167               	movf	printf@prec& (0+255),w,b
  2214  000E5C  1168               	iorwf	(printf@prec+1)& (0+255),w,b
  2215  000E5E  B4D8               	btfsc	status,2,c
  2216  000E60  D00E               	goto	l1144
  2217  000E62  D7F4               	goto	l1142
  2218  000E64                     l1107:
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;doprnt.c: 1246: }
  2222                           ;doprnt.c: 1422: {
  2223                           ;doprnt.c: 1438: if(flag & 0x03)
  2224                           
  2225                           ; BSR set to: 0
  2226  000E64  0E03               	movlw	3
  2227  000E66  1565               	andwf	printf@flag& (0+255),w,b
  2228  000E68  6E45               	movwf	??_printf& (0+255),c
  2229  000E6A  0E00               	movlw	0
  2230  000E6C  1566               	andwf	(printf@flag+1)& (0+255),w,b
  2231  000E6E  6E46               	movwf	(??_printf+1)& (0+255),c
  2232  000E70  5045               	movf	??_printf,w,c
  2233  000E72  1046               	iorwf	??_printf+1,w,c
  2234  000E74  B4D8               	btfsc	status,2,c
  2235  000E76  D003               	goto	l1144
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;doprnt.c: 1439: (putch('-') );
  2239  000E78  0E2D               	movlw	45
  2240  000E7A  ECD1  F013         	call	_putch
  2241  000E7E                     l1144:
  2242  000E7E  C040  FFF6         	movff	printf@f,tblptrl
  2243  000E82  C041  FFF7         	movff	printf@f+1,tblptrh
  2244  000E86  4A40               	infsnz	printf@f,f,c
  2245  000E88  2A41               	incf	printf@f+1,f,c
  2246  000E8A                     	if	0	;tblptru may be non-zero
  2247  000E8A                     	endif
  2248  000E8A                     	if	0	;tblptru may be non-zero
  2249  000E8A                     	endif
  2250  000E8A  0008               	tblrd		*
  2251  000E8C  CFF5 F076          	movff	tablat,printf@c
  2252  000E90  0100               	movlb	0	; () banked
  2253  000E92  5176               	movf	printf@c& (0+255),w,b
  2254  000E94  B4D8               	btfsc	status,2,c
  2255  000E96  0012               	return	
  2256  000E98  D50E               	goto	l1099
  2257  000E9A                     __end_of_printf:
  2258                           	opt stack 0
  2259                           tblptru	equ	0xFF8
  2260                           tblptrh	equ	0xFF7
  2261                           tblptrl	equ	0xFF6
  2262                           tablat	equ	0xFF5
  2263                           prodh	equ	0xFF4
  2264                           prodl	equ	0xFF3
  2265                           postinc0	equ	0xFEE
  2266                           wreg	equ	0xFE8
  2267                           postinc2	equ	0xFDE
  2268                           postdec2	equ	0xFDD
  2269                           fsr2h	equ	0xFDA
  2270                           fsr2l	equ	0xFD9
  2271                           status	equ	0xFD8
  2272                           
  2273 ;; *************** function _scale *****************
  2274 ;; Defined at:
  2275 ;;		line 425 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  scl             1    wreg     char 
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;  scl             1   41[COMRAM] char 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  3   35[COMRAM] char 
  2282 ;; Registers used:
  2283 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2289 ;;      Params:         3       0       0       0       0       0       0       0       0
  2290 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2291 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2292 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2293 ;;Total ram usage:        7 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    2
  2296 ;; This function calls:
  2297 ;;		___awdiv
  2298 ;;		___awmod
  2299 ;;		___ftmul
  2300 ;;		___wmul
  2301 ;; This function is called by:
  2302 ;;		_printf
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text2
  2307  000E9A                     __ptext2:
  2308                           	opt stack 0
  2309  000E9A                     _scale:
  2310                           	opt stack 27
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;incstack = 0
  2314                           ;scale@scl stored from wreg
  2315  000E9A  6E2A               	movwf	scale@scl,c
  2316                           
  2317                           ;doprnt.c: 428: if(scl < 0) {
  2318  000E9C  AE2A               	btfss	scale@scl,7,c
  2319  000E9E  D101               	goto	l1088
  2320                           
  2321                           ;doprnt.c: 429: scl = -scl;
  2322  000EA0  6C2A               	negf	scale@scl,c
  2323                           
  2324                           ;doprnt.c: 430: if(scl>=110)
  2325  000EA2  502A               	movf	scale@scl,w,c
  2326  000EA4  0A80               	xorlw	128
  2327  000EA6  0F12               	addlw	-238
  2328  000EA8  A0D8               	btfss	status,0,c
  2329  000EAA  D091               	goto	l1089
  2330                           
  2331                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2332  000EAC  0E00               	movlw	0
  2333  000EAE  6E12               	movwf	___wmul@multiplicand+1,c
  2334  000EB0  0E03               	movlw	3
  2335  000EB2  6E11               	movwf	___wmul@multiplicand,c
  2336  000EB4  0E00               	movlw	0
  2337  000EB6  6E0A               	movwf	___awdiv@divisor+1,c
  2338  000EB8  0E0A               	movlw	10
  2339  000EBA  6E09               	movwf	___awdiv@divisor,c
  2340  000EBC  0E00               	movlw	0
  2341  000EBE  6E04               	movwf	___awmod@divisor+1,c
  2342  000EC0  0E64               	movlw	100
  2343  000EC2  6E03               	movwf	___awmod@divisor,c
  2344  000EC4  502A               	movf	scale@scl,w,c
  2345  000EC6  6E01               	movwf	___awmod@dividend,c
  2346  000EC8  6A02               	clrf	___awmod@dividend+1,c
  2347  000ECA  BE01               	btfsc	___awmod@dividend,7,c
  2348  000ECC  0602               	decf	___awmod@dividend+1,f,c
  2349  000ECE  EC61  F012         	call	___awmod	;wreg free
  2350  000ED2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2351  000ED6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2352  000EDA  ECE8  F010         	call	___awdiv	;wreg free
  2353  000EDE  0E09               	movlw	9
  2354  000EE0  2407               	addwf	?___awdiv,w,c
  2355  000EE2  6E0F               	movwf	___wmul@multiplier,c
  2356  000EE4  0E00               	movlw	0
  2357  000EE6  2008               	addwfc	?___awdiv+1,w,c
  2358  000EE8  6E10               	movwf	___wmul@multiplier+1,c
  2359  000EEA  EC89  F013         	call	___wmul	;wreg free
  2360  000EEE  0E50               	movlw	low __npowers_
  2361  000EF0  240F               	addwf	?___wmul,w,c
  2362  000EF2  6EF6               	movwf	tblptrl,c
  2363  000EF4  0E08               	movlw	high __npowers_
  2364  000EF6  2010               	addwfc	?___wmul+1,w,c
  2365  000EF8  6EF7               	movwf	tblptrh,c
  2366  000EFA                     	if	0	;There are less than 3 active tblptr bytes
  2367  000EFA                     	endif
  2368  000EFA  0009               	tblrd		*+
  2369  000EFC  CFF5 F018          	movff	tablat,___ftmul@f2
  2370  000F00  0009               	tblrd		*+
  2371  000F02  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2372  000F06  000A               	tblrd		*-
  2373  000F08  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2374  000F0C  0E00               	movlw	0
  2375  000F0E  6E0A               	movwf	___awdiv@divisor+1,c
  2376  000F10  0E64               	movlw	100
  2377  000F12  6E09               	movwf	___awdiv@divisor,c
  2378  000F14  502A               	movf	scale@scl,w,c
  2379  000F16  6E07               	movwf	___awdiv@dividend,c
  2380  000F18  6A08               	clrf	___awdiv@dividend+1,c
  2381  000F1A  BE07               	btfsc	___awdiv@dividend,7,c
  2382  000F1C  0608               	decf	___awdiv@dividend+1,f,c
  2383  000F1E  ECE8  F010         	call	___awdiv	;wreg free
  2384  000F22  0E12               	movlw	18
  2385  000F24  2407               	addwf	?___awdiv,w,c
  2386  000F26  6E0F               	movwf	___wmul@multiplier,c
  2387  000F28  0E00               	movlw	0
  2388  000F2A  2008               	addwfc	?___awdiv+1,w,c
  2389  000F2C  6E10               	movwf	___wmul@multiplier+1,c
  2390  000F2E  0E00               	movlw	0
  2391  000F30  6E12               	movwf	___wmul@multiplicand+1,c
  2392  000F32  0E03               	movlw	3
  2393  000F34  6E11               	movwf	___wmul@multiplicand,c
  2394  000F36  EC89  F013         	call	___wmul	;wreg free
  2395  000F3A  0E50               	movlw	low __npowers_
  2396  000F3C  240F               	addwf	?___wmul,w,c
  2397  000F3E  6EF6               	movwf	tblptrl,c
  2398  000F40  0E08               	movlw	high __npowers_
  2399  000F42  2010               	addwfc	?___wmul+1,w,c
  2400  000F44  6EF7               	movwf	tblptrh,c
  2401  000F46                     	if	0	;There are less than 3 active tblptr bytes
  2402  000F46                     	endif
  2403  000F46  0009               	tblrd		*+
  2404  000F48  CFF5 F015          	movff	tablat,___ftmul@f1
  2405  000F4C  0009               	tblrd		*+
  2406  000F4E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2407  000F52  000A               	tblrd		*-
  2408  000F54  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2409  000F58  ECB2  F00D         	call	___ftmul	;wreg free
  2410  000F5C  C015  F027         	movff	?___ftmul,_scale$2837
  2411  000F60  C016  F028         	movff	?___ftmul+1,_scale$2837+1
  2412  000F64  C017  F029         	movff	?___ftmul+2,_scale$2837+2
  2413                           
  2414                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2415  000F68  C027  F015         	movff	_scale$2837,___ftmul@f1
  2416  000F6C  C028  F016         	movff	_scale$2837+1,___ftmul@f1+1
  2417  000F70  C029  F017         	movff	_scale$2837+2,___ftmul@f1+2
  2418  000F74  0E00               	movlw	0
  2419  000F76  6E12               	movwf	___wmul@multiplicand+1,c
  2420  000F78  0E03               	movlw	3
  2421  000F7A  6E11               	movwf	___wmul@multiplicand,c
  2422  000F7C  0E00               	movlw	0
  2423  000F7E  6E04               	movwf	___awmod@divisor+1,c
  2424  000F80  0E0A               	movlw	10
  2425  000F82  6E03               	movwf	___awmod@divisor,c
  2426  000F84  502A               	movf	scale@scl,w,c
  2427  000F86  6E01               	movwf	___awmod@dividend,c
  2428  000F88  6A02               	clrf	___awmod@dividend+1,c
  2429  000F8A  BE01               	btfsc	___awmod@dividend,7,c
  2430  000F8C  0602               	decf	___awmod@dividend+1,f,c
  2431  000F8E  EC61  F012         	call	___awmod	;wreg free
  2432  000F92  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2433  000F96  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2434  000F9A  EC89  F013         	call	___wmul	;wreg free
  2435  000F9E  0E50               	movlw	low __npowers_
  2436  000FA0  240F               	addwf	?___wmul,w,c
  2437  000FA2  6EF6               	movwf	tblptrl,c
  2438  000FA4  0E08               	movlw	high __npowers_
  2439  000FA6  2010               	addwfc	?___wmul+1,w,c
  2440  000FA8  6EF7               	movwf	tblptrh,c
  2441  000FAA                     	if	0	;There are less than 3 active tblptr bytes
  2442  000FAA                     	endif
  2443  000FAA  0009               	tblrd		*+
  2444  000FAC  CFF5 F018          	movff	tablat,___ftmul@f2
  2445  000FB0  0009               	tblrd		*+
  2446  000FB2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2447  000FB6  000A               	tblrd		*-
  2448  000FB8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2449  000FBC  ECB2  F00D         	call	___ftmul	;wreg free
  2450  000FC0  C015  F024         	movff	?___ftmul,?_scale
  2451  000FC4  C016  F025         	movff	?___ftmul+1,?_scale+1
  2452  000FC8  C017  F026         	movff	?___ftmul+2,?_scale+2
  2453  000FCC  0012               	return	
  2454  000FCE                     l1089:
  2455                           
  2456                           ;doprnt.c: 432: else if(scl > 10)
  2457  000FCE  502A               	movf	scale@scl,w,c
  2458  000FD0  0A80               	xorlw	128
  2459  000FD2  0F75               	addlw	-139
  2460  000FD4  A0D8               	btfss	status,0,c
  2461  000FD6  D053               	goto	l1092
  2462                           
  2463                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2464  000FD8  0E00               	movlw	0
  2465  000FDA  6E0A               	movwf	___awdiv@divisor+1,c
  2466  000FDC  0E0A               	movlw	10
  2467  000FDE  6E09               	movwf	___awdiv@divisor,c
  2468  000FE0  502A               	movf	scale@scl,w,c
  2469  000FE2  6E07               	movwf	___awdiv@dividend,c
  2470  000FE4  6A08               	clrf	___awdiv@dividend+1,c
  2471  000FE6  BE07               	btfsc	___awdiv@dividend,7,c
  2472  000FE8  0608               	decf	___awdiv@dividend+1,f,c
  2473  000FEA  ECE8  F010         	call	___awdiv	;wreg free
  2474  000FEE  0E09               	movlw	9
  2475  000FF0  2407               	addwf	?___awdiv,w,c
  2476  000FF2  6E0F               	movwf	___wmul@multiplier,c
  2477  000FF4  0E00               	movlw	0
  2478  000FF6  2008               	addwfc	?___awdiv+1,w,c
  2479  000FF8  6E10               	movwf	___wmul@multiplier+1,c
  2480  000FFA  0E00               	movlw	0
  2481  000FFC  6E12               	movwf	___wmul@multiplicand+1,c
  2482  000FFE  0E03               	movlw	3
  2483  001000  6E11               	movwf	___wmul@multiplicand,c
  2484  001002  EC89  F013         	call	___wmul	;wreg free
  2485  001006  0E50               	movlw	low __npowers_
  2486  001008  240F               	addwf	?___wmul,w,c
  2487  00100A  6EF6               	movwf	tblptrl,c
  2488  00100C  0E08               	movlw	high __npowers_
  2489  00100E  2010               	addwfc	?___wmul+1,w,c
  2490  001010  6EF7               	movwf	tblptrh,c
  2491  001012                     	if	0	;There are less than 3 active tblptr bytes
  2492  001012                     	endif
  2493  001012  0009               	tblrd		*+
  2494  001014  CFF5 F015          	movff	tablat,___ftmul@f1
  2495  001018  0009               	tblrd		*+
  2496  00101A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2497  00101E  000A               	tblrd		*-
  2498  001020  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2499  001024  0E00               	movlw	0
  2500  001026  6E12               	movwf	___wmul@multiplicand+1,c
  2501  001028  0E03               	movlw	3
  2502  00102A  6E11               	movwf	___wmul@multiplicand,c
  2503  00102C  0E00               	movlw	0
  2504  00102E  6E04               	movwf	___awmod@divisor+1,c
  2505  001030  0E0A               	movlw	10
  2506  001032  6E03               	movwf	___awmod@divisor,c
  2507  001034  502A               	movf	scale@scl,w,c
  2508  001036  6E01               	movwf	___awmod@dividend,c
  2509  001038  6A02               	clrf	___awmod@dividend+1,c
  2510  00103A  BE01               	btfsc	___awmod@dividend,7,c
  2511  00103C  0602               	decf	___awmod@dividend+1,f,c
  2512  00103E  EC61  F012         	call	___awmod	;wreg free
  2513  001042  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2514  001046  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2515  00104A  EC89  F013         	call	___wmul	;wreg free
  2516  00104E  0E50               	movlw	low __npowers_
  2517  001050  240F               	addwf	?___wmul,w,c
  2518  001052  6EF6               	movwf	tblptrl,c
  2519  001054  0E08               	movlw	high __npowers_
  2520  001056  2010               	addwfc	?___wmul+1,w,c
  2521  001058  6EF7               	movwf	tblptrh,c
  2522  00105A                     	if	0	;There are less than 3 active tblptr bytes
  2523  00105A                     	endif
  2524  00105A  0009               	tblrd		*+
  2525  00105C  CFF5 F018          	movff	tablat,___ftmul@f2
  2526  001060  0009               	tblrd		*+
  2527  001062  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2528  001066  000A               	tblrd		*-
  2529  001068  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2530  00106C  ECB2  F00D         	call	___ftmul	;wreg free
  2531  001070  C015  F024         	movff	?___ftmul,?_scale
  2532  001074  C016  F025         	movff	?___ftmul+1,?_scale+1
  2533  001078  C017  F026         	movff	?___ftmul+2,?_scale+2
  2534  00107C  0012               	return	
  2535  00107E                     l1092:
  2536                           
  2537                           ;doprnt.c: 434: return _npowers_[scl];
  2538  00107E  502A               	movf	scale@scl,w,c
  2539  001080  0D03               	mullw	3
  2540  001082  0E50               	movlw	low __npowers_
  2541  001084  24F3               	addwf	prodl,w,c
  2542  001086  6EF6               	movwf	tblptrl,c
  2543  001088  0E08               	movlw	high __npowers_
  2544  00108A  20F4               	addwfc	prodh,w,c
  2545  00108C  6EF7               	movwf	tblptrh,c
  2546  00108E                     	if	0	;There are less than 3 active tblptr bytes
  2547  00108E                     	endif
  2548  00108E  0009               	tblrd		*+
  2549  001090  CFF5 F024          	movff	tablat,?_scale
  2550  001094  0009               	tblrd		*+
  2551  001096  CFF5 F025          	movff	tablat,?_scale+1
  2552  00109A  000A               	tblrd		*-
  2553  00109C  CFF5 F026          	movff	tablat,?_scale+2
  2554  0010A0  0012               	return	
  2555  0010A2                     l1088:
  2556                           
  2557                           ;doprnt.c: 435: }
  2558                           ;doprnt.c: 436: if(scl>=110)
  2559  0010A2  502A               	movf	scale@scl,w,c
  2560  0010A4  0A80               	xorlw	128
  2561  0010A6  0F12               	addlw	-238
  2562  0010A8  A0D8               	btfss	status,0,c
  2563  0010AA  D091               	goto	l1093
  2564                           
  2565                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2566  0010AC  0E00               	movlw	0
  2567  0010AE  6E12               	movwf	___wmul@multiplicand+1,c
  2568  0010B0  0E03               	movlw	3
  2569  0010B2  6E11               	movwf	___wmul@multiplicand,c
  2570  0010B4  0E00               	movlw	0
  2571  0010B6  6E0A               	movwf	___awdiv@divisor+1,c
  2572  0010B8  0E0A               	movlw	10
  2573  0010BA  6E09               	movwf	___awdiv@divisor,c
  2574  0010BC  0E00               	movlw	0
  2575  0010BE  6E04               	movwf	___awmod@divisor+1,c
  2576  0010C0  0E64               	movlw	100
  2577  0010C2  6E03               	movwf	___awmod@divisor,c
  2578  0010C4  502A               	movf	scale@scl,w,c
  2579  0010C6  6E01               	movwf	___awmod@dividend,c
  2580  0010C8  6A02               	clrf	___awmod@dividend+1,c
  2581  0010CA  BE01               	btfsc	___awmod@dividend,7,c
  2582  0010CC  0602               	decf	___awmod@dividend+1,f,c
  2583  0010CE  EC61  F012         	call	___awmod	;wreg free
  2584  0010D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2585  0010D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2586  0010DA  ECE8  F010         	call	___awdiv	;wreg free
  2587  0010DE  0E09               	movlw	9
  2588  0010E0  2407               	addwf	?___awdiv,w,c
  2589  0010E2  6E0F               	movwf	___wmul@multiplier,c
  2590  0010E4  0E00               	movlw	0
  2591  0010E6  2008               	addwfc	?___awdiv+1,w,c
  2592  0010E8  6E10               	movwf	___wmul@multiplier+1,c
  2593  0010EA  EC89  F013         	call	___wmul	;wreg free
  2594  0010EE  0E29               	movlw	low __powers_
  2595  0010F0  240F               	addwf	?___wmul,w,c
  2596  0010F2  6EF6               	movwf	tblptrl,c
  2597  0010F4  0E08               	movlw	high __powers_
  2598  0010F6  2010               	addwfc	?___wmul+1,w,c
  2599  0010F8  6EF7               	movwf	tblptrh,c
  2600  0010FA                     	if	0	;There are less than 3 active tblptr bytes
  2601  0010FA                     	endif
  2602  0010FA  0009               	tblrd		*+
  2603  0010FC  CFF5 F018          	movff	tablat,___ftmul@f2
  2604  001100  0009               	tblrd		*+
  2605  001102  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2606  001106  000A               	tblrd		*-
  2607  001108  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2608  00110C  0E00               	movlw	0
  2609  00110E  6E0A               	movwf	___awdiv@divisor+1,c
  2610  001110  0E64               	movlw	100
  2611  001112  6E09               	movwf	___awdiv@divisor,c
  2612  001114  502A               	movf	scale@scl,w,c
  2613  001116  6E07               	movwf	___awdiv@dividend,c
  2614  001118  6A08               	clrf	___awdiv@dividend+1,c
  2615  00111A  BE07               	btfsc	___awdiv@dividend,7,c
  2616  00111C  0608               	decf	___awdiv@dividend+1,f,c
  2617  00111E  ECE8  F010         	call	___awdiv	;wreg free
  2618  001122  0E12               	movlw	18
  2619  001124  2407               	addwf	?___awdiv,w,c
  2620  001126  6E0F               	movwf	___wmul@multiplier,c
  2621  001128  0E00               	movlw	0
  2622  00112A  2008               	addwfc	?___awdiv+1,w,c
  2623  00112C  6E10               	movwf	___wmul@multiplier+1,c
  2624  00112E  0E00               	movlw	0
  2625  001130  6E12               	movwf	___wmul@multiplicand+1,c
  2626  001132  0E03               	movlw	3
  2627  001134  6E11               	movwf	___wmul@multiplicand,c
  2628  001136  EC89  F013         	call	___wmul	;wreg free
  2629  00113A  0E29               	movlw	low __powers_
  2630  00113C  240F               	addwf	?___wmul,w,c
  2631  00113E  6EF6               	movwf	tblptrl,c
  2632  001140  0E08               	movlw	high __powers_
  2633  001142  2010               	addwfc	?___wmul+1,w,c
  2634  001144  6EF7               	movwf	tblptrh,c
  2635  001146                     	if	0	;There are less than 3 active tblptr bytes
  2636  001146                     	endif
  2637  001146  0009               	tblrd		*+
  2638  001148  CFF5 F015          	movff	tablat,___ftmul@f1
  2639  00114C  0009               	tblrd		*+
  2640  00114E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2641  001152  000A               	tblrd		*-
  2642  001154  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2643  001158  ECB2  F00D         	call	___ftmul	;wreg free
  2644  00115C  C015  F027         	movff	?___ftmul,_scale$2837
  2645  001160  C016  F028         	movff	?___ftmul+1,_scale$2837+1
  2646  001164  C017  F029         	movff	?___ftmul+2,_scale$2837+2
  2647                           
  2648                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2649  001168  C027  F015         	movff	_scale$2837,___ftmul@f1
  2650  00116C  C028  F016         	movff	_scale$2837+1,___ftmul@f1+1
  2651  001170  C029  F017         	movff	_scale$2837+2,___ftmul@f1+2
  2652  001174  0E00               	movlw	0
  2653  001176  6E12               	movwf	___wmul@multiplicand+1,c
  2654  001178  0E03               	movlw	3
  2655  00117A  6E11               	movwf	___wmul@multiplicand,c
  2656  00117C  0E00               	movlw	0
  2657  00117E  6E04               	movwf	___awmod@divisor+1,c
  2658  001180  0E0A               	movlw	10
  2659  001182  6E03               	movwf	___awmod@divisor,c
  2660  001184  502A               	movf	scale@scl,w,c
  2661  001186  6E01               	movwf	___awmod@dividend,c
  2662  001188  6A02               	clrf	___awmod@dividend+1,c
  2663  00118A  BE01               	btfsc	___awmod@dividend,7,c
  2664  00118C  0602               	decf	___awmod@dividend+1,f,c
  2665  00118E  EC61  F012         	call	___awmod	;wreg free
  2666  001192  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2667  001196  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2668  00119A  EC89  F013         	call	___wmul	;wreg free
  2669  00119E  0E29               	movlw	low __powers_
  2670  0011A0  240F               	addwf	?___wmul,w,c
  2671  0011A2  6EF6               	movwf	tblptrl,c
  2672  0011A4  0E08               	movlw	high __powers_
  2673  0011A6  2010               	addwfc	?___wmul+1,w,c
  2674  0011A8  6EF7               	movwf	tblptrh,c
  2675  0011AA                     	if	0	;There are less than 3 active tblptr bytes
  2676  0011AA                     	endif
  2677  0011AA  0009               	tblrd		*+
  2678  0011AC  CFF5 F018          	movff	tablat,___ftmul@f2
  2679  0011B0  0009               	tblrd		*+
  2680  0011B2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2681  0011B6  000A               	tblrd		*-
  2682  0011B8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2683  0011BC  ECB2  F00D         	call	___ftmul	;wreg free
  2684  0011C0  C015  F024         	movff	?___ftmul,?_scale
  2685  0011C4  C016  F025         	movff	?___ftmul+1,?_scale+1
  2686  0011C8  C017  F026         	movff	?___ftmul+2,?_scale+2
  2687  0011CC  0012               	return	
  2688  0011CE                     l1093:
  2689                           
  2690                           ;doprnt.c: 438: else if(scl > 10)
  2691  0011CE  502A               	movf	scale@scl,w,c
  2692  0011D0  0A80               	xorlw	128
  2693  0011D2  0F75               	addlw	-139
  2694  0011D4  A0D8               	btfss	status,0,c
  2695  0011D6  D053               	goto	l1095
  2696                           
  2697                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2698  0011D8  0E00               	movlw	0
  2699  0011DA  6E0A               	movwf	___awdiv@divisor+1,c
  2700  0011DC  0E0A               	movlw	10
  2701  0011DE  6E09               	movwf	___awdiv@divisor,c
  2702  0011E0  502A               	movf	scale@scl,w,c
  2703  0011E2  6E07               	movwf	___awdiv@dividend,c
  2704  0011E4  6A08               	clrf	___awdiv@dividend+1,c
  2705  0011E6  BE07               	btfsc	___awdiv@dividend,7,c
  2706  0011E8  0608               	decf	___awdiv@dividend+1,f,c
  2707  0011EA  ECE8  F010         	call	___awdiv	;wreg free
  2708  0011EE  0E09               	movlw	9
  2709  0011F0  2407               	addwf	?___awdiv,w,c
  2710  0011F2  6E0F               	movwf	___wmul@multiplier,c
  2711  0011F4  0E00               	movlw	0
  2712  0011F6  2008               	addwfc	?___awdiv+1,w,c
  2713  0011F8  6E10               	movwf	___wmul@multiplier+1,c
  2714  0011FA  0E00               	movlw	0
  2715  0011FC  6E12               	movwf	___wmul@multiplicand+1,c
  2716  0011FE  0E03               	movlw	3
  2717  001200  6E11               	movwf	___wmul@multiplicand,c
  2718  001202  EC89  F013         	call	___wmul	;wreg free
  2719  001206  0E29               	movlw	low __powers_
  2720  001208  240F               	addwf	?___wmul,w,c
  2721  00120A  6EF6               	movwf	tblptrl,c
  2722  00120C  0E08               	movlw	high __powers_
  2723  00120E  2010               	addwfc	?___wmul+1,w,c
  2724  001210  6EF7               	movwf	tblptrh,c
  2725  001212                     	if	0	;There are less than 3 active tblptr bytes
  2726  001212                     	endif
  2727  001212  0009               	tblrd		*+
  2728  001214  CFF5 F015          	movff	tablat,___ftmul@f1
  2729  001218  0009               	tblrd		*+
  2730  00121A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2731  00121E  000A               	tblrd		*-
  2732  001220  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2733  001224  0E00               	movlw	0
  2734  001226  6E12               	movwf	___wmul@multiplicand+1,c
  2735  001228  0E03               	movlw	3
  2736  00122A  6E11               	movwf	___wmul@multiplicand,c
  2737  00122C  0E00               	movlw	0
  2738  00122E  6E04               	movwf	___awmod@divisor+1,c
  2739  001230  0E0A               	movlw	10
  2740  001232  6E03               	movwf	___awmod@divisor,c
  2741  001234  502A               	movf	scale@scl,w,c
  2742  001236  6E01               	movwf	___awmod@dividend,c
  2743  001238  6A02               	clrf	___awmod@dividend+1,c
  2744  00123A  BE01               	btfsc	___awmod@dividend,7,c
  2745  00123C  0602               	decf	___awmod@dividend+1,f,c
  2746  00123E  EC61  F012         	call	___awmod	;wreg free
  2747  001242  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2748  001246  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2749  00124A  EC89  F013         	call	___wmul	;wreg free
  2750  00124E  0E29               	movlw	low __powers_
  2751  001250  240F               	addwf	?___wmul,w,c
  2752  001252  6EF6               	movwf	tblptrl,c
  2753  001254  0E08               	movlw	high __powers_
  2754  001256  2010               	addwfc	?___wmul+1,w,c
  2755  001258  6EF7               	movwf	tblptrh,c
  2756  00125A                     	if	0	;There are less than 3 active tblptr bytes
  2757  00125A                     	endif
  2758  00125A  0009               	tblrd		*+
  2759  00125C  CFF5 F018          	movff	tablat,___ftmul@f2
  2760  001260  0009               	tblrd		*+
  2761  001262  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2762  001266  000A               	tblrd		*-
  2763  001268  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2764  00126C  ECB2  F00D         	call	___ftmul	;wreg free
  2765  001270  C015  F024         	movff	?___ftmul,?_scale
  2766  001274  C016  F025         	movff	?___ftmul+1,?_scale+1
  2767  001278  C017  F026         	movff	?___ftmul+2,?_scale+2
  2768  00127C  0012               	return	
  2769  00127E                     l1095:
  2770                           
  2771                           ;doprnt.c: 440: return _powers_[scl];
  2772  00127E  502A               	movf	scale@scl,w,c
  2773  001280  0D03               	mullw	3
  2774  001282  0E29               	movlw	low __powers_
  2775  001284  24F3               	addwf	prodl,w,c
  2776  001286  6EF6               	movwf	tblptrl,c
  2777  001288  0E08               	movlw	high __powers_
  2778  00128A  20F4               	addwfc	prodh,w,c
  2779  00128C  6EF7               	movwf	tblptrh,c
  2780  00128E                     	if	0	;There are less than 3 active tblptr bytes
  2781  00128E                     	endif
  2782  00128E  0009               	tblrd		*+
  2783  001290  CFF5 F024          	movff	tablat,?_scale
  2784  001294  0009               	tblrd		*+
  2785  001296  CFF5 F025          	movff	tablat,?_scale+1
  2786  00129A  000A               	tblrd		*-
  2787  00129C  CFF5 F026          	movff	tablat,?_scale+2
  2788  0012A0  0012               	return	
  2789  0012A2                     __end_of_scale:
  2790                           	opt stack 0
  2791                           tblptru	equ	0xFF8
  2792                           tblptrh	equ	0xFF7
  2793                           tblptrl	equ	0xFF6
  2794                           tablat	equ	0xFF5
  2795                           prodh	equ	0xFF4
  2796                           prodl	equ	0xFF3
  2797                           postinc0	equ	0xFEE
  2798                           wreg	equ	0xFE8
  2799                           postinc2	equ	0xFDE
  2800                           postdec2	equ	0xFDD
  2801                           fsr2h	equ	0xFDA
  2802                           fsr2l	equ	0xFD9
  2803                           status	equ	0xFD8
  2804                           
  2805 ;; *************** function _putch *****************
  2806 ;; Defined at:
  2807 ;;		line 19 in file "USART_Source_File.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  byte            1    wreg     unsigned char 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  byte            1    1[COMRAM] unsigned char 
  2812 ;;  trash           1    0[COMRAM] unsigned char 
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		wreg
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2822 ;;      Params:         0       0       0       0       0       0       0       0       0
  2823 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2824 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2825 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2826 ;;Total ram usage:        2 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; This function calls:
  2829 ;;		Nothing
  2830 ;; This function is called by:
  2831 ;;		_printf
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text3
  2836  0027A2                     __ptext3:
  2837                           	opt stack 0
  2838  0027A2                     _putch:
  2839                           	opt stack 29
  2840                           
  2841                           ;incstack = 0
  2842                           ;putch@byte stored from wreg
  2843  0027A2  6E02               	movwf	putch@byte,c
  2844                           
  2845                           ;USART_Source_File.c: 20: char trash;
  2846                           ;USART_Source_File.c: 23: if(RCSTAbits.FERR)
  2847  0027A4  B4AB               	btfsc	4011,2,c	;volatile
  2848                           
  2849                           ;USART_Source_File.c: 24: trash = RCREG;
  2850  0027A6  CFAE F001          	movff	4014,putch@trash	;volatile
  2851                           
  2852                           ;USART_Source_File.c: 25: if(RCSTAbits.OERR) {
  2853  0027AA  A2AB               	btfss	4011,1,c	;volatile
  2854  0027AC  D002               	goto	l64
  2855                           
  2856                           ;USART_Source_File.c: 26: RCSTAbits.CREN=0;
  2857  0027AE  98AB               	bcf	4011,4,c	;volatile
  2858                           
  2859                           ;USART_Source_File.c: 27: RCSTAbits.CREN=1;
  2860  0027B0  88AB               	bsf	4011,4,c	;volatile
  2861  0027B2                     l64:
  2862                           
  2863                           ;USART_Source_File.c: 28: }
  2864                           ;USART_Source_File.c: 31: while (TXSTA1bits.TRMT == 0);
  2865  0027B2  A2AC               	btfss	4012,1,c	;volatile
  2866  0027B4  D7FE               	goto	l64
  2867                           
  2868                           ;USART_Source_File.c: 32: TXREG1 = byte;
  2869  0027B6  C002  FFAD         	movff	putch@byte,4013	;volatile
  2870  0027BA                     
  2871                           ;USART_Source_File.c: 34: continue;
  2872  0027BA  A89E               	btfss	3998,4,c	;volatile
  2873  0027BC  D7FE               	goto	l69
  2874                           
  2875                           ;USART_Source_File.c: 35: TXIF=0;
  2876  0027BE  989E               	bcf	3998,4,c	;volatile
  2877  0027C0  0012               	return		;funcret
  2878  0027C2                     __end_of_putch:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           prodh	equ	0xFF4
  2885                           prodl	equ	0xFF3
  2886                           postinc0	equ	0xFEE
  2887                           wreg	equ	0xFE8
  2888                           postinc2	equ	0xFDE
  2889                           postdec2	equ	0xFDD
  2890                           fsr2h	equ	0xFDA
  2891                           fsr2l	equ	0xFD9
  2892                           status	equ	0xFD8
  2893                           
  2894 ;; *************** function _fround *****************
  2895 ;; Defined at:
  2896 ;;		line 409 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;  prec            1    wreg     unsigned char 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  prec            1   44[COMRAM] unsigned char 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  3   35[COMRAM] unsigned char 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2910 ;;      Params:         3       0       0       0       0       0       0       0       0
  2911 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2913 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2914 ;;Total ram usage:       10 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    2
  2917 ;; This function calls:
  2918 ;;		___awdiv
  2919 ;;		___awmod
  2920 ;;		___ftmul
  2921 ;;		___wmul
  2922 ;; This function is called by:
  2923 ;;		_printf
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           	psect	text4
  2928  00150C                     __ptext4:
  2929                           	opt stack 0
  2930  00150C                     _fround:
  2931                           	opt stack 27
  2932                           
  2933                           ;incstack = 0
  2934                           ;fround@prec stored from wreg
  2935  00150C  6E2D               	movwf	fround@prec,c
  2936                           
  2937                           ;doprnt.c: 413: if(prec>=110)
  2938  00150E  0E6D               	movlw	109
  2939  001510  642D               	cpfsgt	fround@prec,c
  2940  001512  D09F               	goto	l1082
  2941                           
  2942                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2943  001514  0E00               	movlw	0
  2944  001516  6E12               	movwf	___wmul@multiplicand+1,c
  2945  001518  0E03               	movlw	3
  2946  00151A  6E11               	movwf	___wmul@multiplicand,c
  2947  00151C  0E00               	movlw	0
  2948  00151E  6E0A               	movwf	___awdiv@divisor+1,c
  2949  001520  0E0A               	movlw	10
  2950  001522  6E09               	movwf	___awdiv@divisor,c
  2951  001524  0E00               	movlw	0
  2952  001526  6E04               	movwf	___awmod@divisor+1,c
  2953  001528  0E64               	movlw	100
  2954  00152A  6E03               	movwf	___awmod@divisor,c
  2955  00152C  C02D  F001         	movff	fround@prec,___awmod@dividend
  2956  001530  6A02               	clrf	___awmod@dividend+1,c
  2957  001532  EC61  F012         	call	___awmod	;wreg free
  2958  001536  C001  F007         	movff	?___awmod,___awdiv@dividend
  2959  00153A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2960  00153E  ECE8  F010         	call	___awdiv	;wreg free
  2961  001542  0E09               	movlw	9
  2962  001544  2407               	addwf	?___awdiv,w,c
  2963  001546  6E0F               	movwf	___wmul@multiplier,c
  2964  001548  0E00               	movlw	0
  2965  00154A  2008               	addwfc	?___awdiv+1,w,c
  2966  00154C  6E10               	movwf	___wmul@multiplier+1,c
  2967  00154E  EC89  F013         	call	___wmul	;wreg free
  2968  001552  0E50               	movlw	low __npowers_
  2969  001554  240F               	addwf	?___wmul,w,c
  2970  001556  6EF6               	movwf	tblptrl,c
  2971  001558  0E08               	movlw	high __npowers_
  2972  00155A  2010               	addwfc	?___wmul+1,w,c
  2973  00155C  6EF7               	movwf	tblptrh,c
  2974  00155E                     	if	0	;There are less than 3 active tblptr bytes
  2975  00155E                     	endif
  2976  00155E  0009               	tblrd		*+
  2977  001560  CFF5 F018          	movff	tablat,___ftmul@f2
  2978  001564  0009               	tblrd		*+
  2979  001566  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2980  00156A  000A               	tblrd		*-
  2981  00156C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2982  001570  0E00               	movlw	0
  2983  001572  6E0A               	movwf	___awdiv@divisor+1,c
  2984  001574  0E64               	movlw	100
  2985  001576  6E09               	movwf	___awdiv@divisor,c
  2986  001578  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2987  00157C  6A08               	clrf	___awdiv@dividend+1,c
  2988  00157E  ECE8  F010         	call	___awdiv	;wreg free
  2989  001582  0E12               	movlw	18
  2990  001584  2407               	addwf	?___awdiv,w,c
  2991  001586  6E0F               	movwf	___wmul@multiplier,c
  2992  001588  0E00               	movlw	0
  2993  00158A  2008               	addwfc	?___awdiv+1,w,c
  2994  00158C  6E10               	movwf	___wmul@multiplier+1,c
  2995  00158E  0E00               	movlw	0
  2996  001590  6E12               	movwf	___wmul@multiplicand+1,c
  2997  001592  0E03               	movlw	3
  2998  001594  6E11               	movwf	___wmul@multiplicand,c
  2999  001596  EC89  F013         	call	___wmul	;wreg free
  3000  00159A  0E50               	movlw	low __npowers_
  3001  00159C  240F               	addwf	?___wmul,w,c
  3002  00159E  6EF6               	movwf	tblptrl,c
  3003  0015A0  0E08               	movlw	high __npowers_
  3004  0015A2  2010               	addwfc	?___wmul+1,w,c
  3005  0015A4  6EF7               	movwf	tblptrh,c
  3006  0015A6                     	if	0	;There are less than 3 active tblptr bytes
  3007  0015A6                     	endif
  3008  0015A6  0009               	tblrd		*+
  3009  0015A8  CFF5 F015          	movff	tablat,___ftmul@f1
  3010  0015AC  0009               	tblrd		*+
  3011  0015AE  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3012  0015B2  000A               	tblrd		*-
  3013  0015B4  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3014  0015B8  ECB2  F00D         	call	___ftmul	;wreg free
  3015  0015BC  C015  F02A         	movff	?___ftmul,_fround$2835
  3016  0015C0  C016  F02B         	movff	?___ftmul+1,_fround$2835+1
  3017  0015C4  C017  F02C         	movff	?___ftmul+2,_fround$2835+2
  3018                           
  3019                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3020  0015C8  0E00               	movlw	0
  3021  0015CA  6E12               	movwf	___wmul@multiplicand+1,c
  3022  0015CC  0E03               	movlw	3
  3023  0015CE  6E11               	movwf	___wmul@multiplicand,c
  3024  0015D0  0E00               	movlw	0
  3025  0015D2  6E04               	movwf	___awmod@divisor+1,c
  3026  0015D4  0E0A               	movlw	10
  3027  0015D6  6E03               	movwf	___awmod@divisor,c
  3028  0015D8  C02D  F001         	movff	fround@prec,___awmod@dividend
  3029  0015DC  6A02               	clrf	___awmod@dividend+1,c
  3030  0015DE  EC61  F012         	call	___awmod	;wreg free
  3031  0015E2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3032  0015E6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3033  0015EA  EC89  F013         	call	___wmul	;wreg free
  3034  0015EE  0E50               	movlw	low __npowers_
  3035  0015F0  240F               	addwf	?___wmul,w,c
  3036  0015F2  6EF6               	movwf	tblptrl,c
  3037  0015F4  0E08               	movlw	high __npowers_
  3038  0015F6  2010               	addwfc	?___wmul+1,w,c
  3039  0015F8  6EF7               	movwf	tblptrh,c
  3040  0015FA                     	if	0	;There are less than 3 active tblptr bytes
  3041  0015FA                     	endif
  3042  0015FA  0009               	tblrd		*+
  3043  0015FC  CFF5 F018          	movff	tablat,___ftmul@f2
  3044  001600  0009               	tblrd		*+
  3045  001602  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3046  001606  000A               	tblrd		*-
  3047  001608  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3048  00160C  C02A  F015         	movff	_fround$2835,___ftmul@f1
  3049  001610  C02B  F016         	movff	_fround$2835+1,___ftmul@f1+1
  3050  001614  C02C  F017         	movff	_fround$2835+2,___ftmul@f1+2
  3051  001618  ECB2  F00D         	call	___ftmul	;wreg free
  3052  00161C  C015  F027         	movff	?___ftmul,_fround$2836
  3053  001620  C016  F028         	movff	?___ftmul+1,_fround$2836+1
  3054  001624  C017  F029         	movff	?___ftmul+2,_fround$2836+2
  3055                           
  3056                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3057  001628  C027  F015         	movff	_fround$2836,___ftmul@f1
  3058  00162C  C028  F016         	movff	_fround$2836+1,___ftmul@f1+1
  3059  001630  C029  F017         	movff	_fround$2836+2,___ftmul@f1+2
  3060  001634  0E00               	movlw	0
  3061  001636  6E18               	movwf	___ftmul@f2,c
  3062  001638  0E00               	movlw	0
  3063  00163A  6E19               	movwf	___ftmul@f2+1,c
  3064  00163C  0E3F               	movlw	63
  3065  00163E  6E1A               	movwf	___ftmul@f2+2,c
  3066  001640  ECB2  F00D         	call	___ftmul	;wreg free
  3067  001644  C015  F024         	movff	?___ftmul,?_fround
  3068  001648  C016  F025         	movff	?___ftmul+1,?_fround+1
  3069  00164C  C017  F026         	movff	?___ftmul+2,?_fround+2
  3070  001650  0012               	return	
  3071  001652                     l1082:
  3072                           
  3073                           ;doprnt.c: 415: else if(prec > 10)
  3074  001652  0E0A               	movlw	10
  3075  001654  642D               	cpfsgt	fround@prec,c
  3076  001656  D063               	goto	l1085
  3077                           
  3078                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3079  001658  0E00               	movlw	0
  3080  00165A  6E12               	movwf	___wmul@multiplicand+1,c
  3081  00165C  0E03               	movlw	3
  3082  00165E  6E11               	movwf	___wmul@multiplicand,c
  3083  001660  0E00               	movlw	0
  3084  001662  6E04               	movwf	___awmod@divisor+1,c
  3085  001664  0E0A               	movlw	10
  3086  001666  6E03               	movwf	___awmod@divisor,c
  3087  001668  C02D  F001         	movff	fround@prec,___awmod@dividend
  3088  00166C  6A02               	clrf	___awmod@dividend+1,c
  3089  00166E  EC61  F012         	call	___awmod	;wreg free
  3090  001672  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3091  001676  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3092  00167A  EC89  F013         	call	___wmul	;wreg free
  3093  00167E  0E50               	movlw	low __npowers_
  3094  001680  240F               	addwf	?___wmul,w,c
  3095  001682  6EF6               	movwf	tblptrl,c
  3096  001684  0E08               	movlw	high __npowers_
  3097  001686  2010               	addwfc	?___wmul+1,w,c
  3098  001688  6EF7               	movwf	tblptrh,c
  3099  00168A                     	if	0	;There are less than 3 active tblptr bytes
  3100  00168A                     	endif
  3101  00168A  0009               	tblrd		*+
  3102  00168C  CFF5 F018          	movff	tablat,___ftmul@f2
  3103  001690  0009               	tblrd		*+
  3104  001692  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3105  001696  000A               	tblrd		*-
  3106  001698  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3107  00169C  0E00               	movlw	0
  3108  00169E  6E0A               	movwf	___awdiv@divisor+1,c
  3109  0016A0  0E0A               	movlw	10
  3110  0016A2  6E09               	movwf	___awdiv@divisor,c
  3111  0016A4  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3112  0016A8  6A08               	clrf	___awdiv@dividend+1,c
  3113  0016AA  ECE8  F010         	call	___awdiv	;wreg free
  3114  0016AE  0E09               	movlw	9
  3115  0016B0  2407               	addwf	?___awdiv,w,c
  3116  0016B2  6E0F               	movwf	___wmul@multiplier,c
  3117  0016B4  0E00               	movlw	0
  3118  0016B6  2008               	addwfc	?___awdiv+1,w,c
  3119  0016B8  6E10               	movwf	___wmul@multiplier+1,c
  3120  0016BA  0E00               	movlw	0
  3121  0016BC  6E12               	movwf	___wmul@multiplicand+1,c
  3122  0016BE  0E03               	movlw	3
  3123  0016C0  6E11               	movwf	___wmul@multiplicand,c
  3124  0016C2  EC89  F013         	call	___wmul	;wreg free
  3125  0016C6  0E50               	movlw	low __npowers_
  3126  0016C8  240F               	addwf	?___wmul,w,c
  3127  0016CA  6EF6               	movwf	tblptrl,c
  3128  0016CC  0E08               	movlw	high __npowers_
  3129  0016CE  2010               	addwfc	?___wmul+1,w,c
  3130  0016D0  6EF7               	movwf	tblptrh,c
  3131  0016D2                     	if	0	;There are less than 3 active tblptr bytes
  3132  0016D2                     	endif
  3133  0016D2  0009               	tblrd		*+
  3134  0016D4  CFF5 F015          	movff	tablat,___ftmul@f1
  3135  0016D8  0009               	tblrd		*+
  3136  0016DA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3137  0016DE  000A               	tblrd		*-
  3138  0016E0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3139  0016E4  ECB2  F00D         	call	___ftmul	;wreg free
  3140  0016E8  C015  F02A         	movff	?___ftmul,_fround$2835
  3141  0016EC  C016  F02B         	movff	?___ftmul+1,_fround$2835+1
  3142  0016F0  C017  F02C         	movff	?___ftmul+2,_fround$2835+2
  3143                           
  3144                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3145  0016F4  C02A  F015         	movff	_fround$2835,___ftmul@f1
  3146  0016F8  C02B  F016         	movff	_fround$2835+1,___ftmul@f1+1
  3147  0016FC  C02C  F017         	movff	_fround$2835+2,___ftmul@f1+2
  3148  001700  0E00               	movlw	0
  3149  001702  6E18               	movwf	___ftmul@f2,c
  3150  001704  0E00               	movlw	0
  3151  001706  6E19               	movwf	___ftmul@f2+1,c
  3152  001708  0E3F               	movlw	63
  3153  00170A  6E1A               	movwf	___ftmul@f2+2,c
  3154  00170C  ECB2  F00D         	call	___ftmul	;wreg free
  3155  001710  C015  F024         	movff	?___ftmul,?_fround
  3156  001714  C016  F025         	movff	?___ftmul+1,?_fround+1
  3157  001718  C017  F026         	movff	?___ftmul+2,?_fround+2
  3158  00171C  0012               	return	
  3159  00171E                     l1085:
  3160                           
  3161                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3162  00171E  502D               	movf	fround@prec,w,c
  3163  001720  0D03               	mullw	3
  3164  001722  0E50               	movlw	low __npowers_
  3165  001724  24F3               	addwf	prodl,w,c
  3166  001726  6EF6               	movwf	tblptrl,c
  3167  001728  0E08               	movlw	high __npowers_
  3168  00172A  20F4               	addwfc	prodh,w,c
  3169  00172C  6EF7               	movwf	tblptrh,c
  3170  00172E                     	if	0	;There are less than 3 active tblptr bytes
  3171  00172E                     	endif
  3172  00172E  0009               	tblrd		*+
  3173  001730  CFF5 F015          	movff	tablat,___ftmul@f1
  3174  001734  0009               	tblrd		*+
  3175  001736  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3176  00173A  000A               	tblrd		*-
  3177  00173C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3178  001740  0E00               	movlw	0
  3179  001742  6E18               	movwf	___ftmul@f2,c
  3180  001744  0E00               	movlw	0
  3181  001746  6E19               	movwf	___ftmul@f2+1,c
  3182  001748  0E3F               	movlw	63
  3183  00174A  6E1A               	movwf	___ftmul@f2+2,c
  3184  00174C  ECB2  F00D         	call	___ftmul	;wreg free
  3185  001750  C015  F024         	movff	?___ftmul,?_fround
  3186  001754  C016  F025         	movff	?___ftmul+1,?_fround+1
  3187  001758  C017  F026         	movff	?___ftmul+2,?_fround+2
  3188  00175C  0012               	return	
  3189  00175E                     __end_of_fround:
  3190                           	opt stack 0
  3191                           tblptru	equ	0xFF8
  3192                           tblptrh	equ	0xFF7
  3193                           tblptrl	equ	0xFF6
  3194                           tablat	equ	0xFF5
  3195                           prodh	equ	0xFF4
  3196                           prodl	equ	0xFF3
  3197                           postinc0	equ	0xFEE
  3198                           wreg	equ	0xFE8
  3199                           postinc2	equ	0xFDE
  3200                           postdec2	equ	0xFDD
  3201                           fsr2h	equ	0xFDA
  3202                           fsr2l	equ	0xFD9
  3203                           status	equ	0xFD8
  3204                           
  3205 ;; *************** function ___ftmul *****************
  3206 ;; Defined at:
  3207 ;;		line 62 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/ftmul.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  f1              3   20[COMRAM] float 
  3210 ;;  f2              3   23[COMRAM] float 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3213 ;;  sign            1   34[COMRAM] unsigned char 
  3214 ;;  cntr            1   33[COMRAM] unsigned char 
  3215 ;;  exp             1   29[COMRAM] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  3   20[COMRAM] float 
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3225 ;;      Params:         6       0       0       0       0       0       0       0       0
  3226 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3227 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3228 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3229 ;;Total ram usage:       15 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    1
  3232 ;; This function calls:
  3233 ;;		___ftpack
  3234 ;; This function is called by:
  3235 ;;		_main
  3236 ;;		_fround
  3237 ;;		_scale
  3238 ;;		_printf
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           	psect	text5
  3243  001B64                     __ptext5:
  3244                           	opt stack 0
  3245  001B64                     ___ftmul:
  3246                           	opt stack 27
  3247                           
  3248                           ;incstack = 0
  3249  001B64  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3250  001B68  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3251  001B6A  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3252  001B6C  3416               	rlcf	___ftmul@f1+1,w,c
  3253  001B6E  361B               	rlcf	??___ftmul& (0+255),f,c
  3254  001B70  E301               	bnc	u2861
  3255  001B72  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3256  001B74                     u2861:
  3257  001B74  501B               	movf	??___ftmul,w,c
  3258  001B76  6E1E               	movwf	___ftmul@exp,c
  3259  001B78  501E               	movf	___ftmul@exp,w,c
  3260  001B7A  A4D8               	btfss	status,2,c
  3261  001B7C  D007               	goto	l1546
  3262  001B7E  0E00               	movlw	0
  3263  001B80  6E15               	movwf	?___ftmul,c
  3264  001B82  0E00               	movlw	0
  3265  001B84  6E16               	movwf	?___ftmul+1,c
  3266  001B86  0E00               	movlw	0
  3267  001B88  6E17               	movwf	?___ftmul+2,c
  3268  001B8A  0012               	return	
  3269  001B8C                     l1546:
  3270  001B8C  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3271  001B90  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3272  001B92  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3273  001B94  3419               	rlcf	___ftmul@f2+1,w,c
  3274  001B96  361B               	rlcf	??___ftmul& (0+255),f,c
  3275  001B98  E301               	bnc	u2881
  3276  001B9A  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3277  001B9C                     u2881:
  3278  001B9C  501B               	movf	??___ftmul,w,c
  3279  001B9E  6E23               	movwf	___ftmul@sign,c
  3280  001BA0  5023               	movf	___ftmul@sign,w,c
  3281  001BA2  A4D8               	btfss	status,2,c
  3282  001BA4  D007               	goto	l1548
  3283  001BA6  0E00               	movlw	0
  3284  001BA8  6E15               	movwf	?___ftmul,c
  3285  001BAA  0E00               	movlw	0
  3286  001BAC  6E16               	movwf	?___ftmul+1,c
  3287  001BAE  0E00               	movlw	0
  3288  001BB0  6E17               	movwf	?___ftmul+2,c
  3289  001BB2  0012               	return	
  3290  001BB4                     l1548:
  3291  001BB4  5023               	movf	___ftmul@sign,w,c
  3292  001BB6  0F7B               	addlw	123
  3293  001BB8  261E               	addwf	___ftmul@exp,f,c
  3294  001BBA  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3295  001BBE  501A               	movf	___ftmul@f2+2,w,c
  3296  001BC0  1A23               	xorwf	___ftmul@sign,f,c
  3297  001BC2  0E80               	movlw	128
  3298  001BC4  1623               	andwf	___ftmul@sign,f,c
  3299  001BC6  8E16               	bsf	___ftmul@f1+1,7,c
  3300  001BC8  8E19               	bsf	___ftmul@f2+1,7,c
  3301  001BCA  0EFF               	movlw	255
  3302  001BCC  1618               	andwf	___ftmul@f2,f,c
  3303  001BCE  0EFF               	movlw	255
  3304  001BD0  1619               	andwf	___ftmul@f2+1,f,c
  3305  001BD2  0E00               	movlw	0
  3306  001BD4  161A               	andwf	___ftmul@f2+2,f,c
  3307  001BD6  0E00               	movlw	0
  3308  001BD8  6E1F               	movwf	___ftmul@f3_as_product,c
  3309  001BDA  0E00               	movlw	0
  3310  001BDC  6E20               	movwf	___ftmul@f3_as_product+1,c
  3311  001BDE  0E00               	movlw	0
  3312  001BE0  6E21               	movwf	___ftmul@f3_as_product+2,c
  3313  001BE2  0E07               	movlw	7
  3314  001BE4  6E22               	movwf	___ftmul@cntr,c
  3315  001BE6  A015               	btfss	___ftmul@f1,0,c
  3316  001BE8  D006               	goto	l1550
  3317  001BEA  5018               	movf	___ftmul@f2,w,c
  3318  001BEC  261F               	addwf	___ftmul@f3_as_product,f,c
  3319  001BEE  5019               	movf	___ftmul@f2+1,w,c
  3320  001BF0  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3321  001BF2  501A               	movf	___ftmul@f2+2,w,c
  3322  001BF4  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3323  001BF6                     l1550:
  3324  001BF6  90D8               	bcf	status,0,c
  3325  001BF8  3217               	rrcf	___ftmul@f1+2,f,c
  3326  001BFA  3216               	rrcf	___ftmul@f1+1,f,c
  3327  001BFC  3215               	rrcf	___ftmul@f1,f,c
  3328  001BFE  90D8               	bcf	status,0,c
  3329  001C00  3618               	rlcf	___ftmul@f2,f,c
  3330  001C02  3619               	rlcf	___ftmul@f2+1,f,c
  3331  001C04  361A               	rlcf	___ftmul@f2+2,f,c
  3332  001C06  2E22               	decfsz	___ftmul@cntr,f,c
  3333  001C08  D7EE               	goto	l1549
  3334  001C0A  0E09               	movlw	9
  3335  001C0C  6E22               	movwf	___ftmul@cntr,c
  3336  001C0E  A015               	btfss	___ftmul@f1,0,c
  3337  001C10  D006               	goto	l1553
  3338  001C12  5018               	movf	___ftmul@f2,w,c
  3339  001C14  261F               	addwf	___ftmul@f3_as_product,f,c
  3340  001C16  5019               	movf	___ftmul@f2+1,w,c
  3341  001C18  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3342  001C1A  501A               	movf	___ftmul@f2+2,w,c
  3343  001C1C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3344  001C1E                     l1553:
  3345  001C1E  90D8               	bcf	status,0,c
  3346  001C20  3217               	rrcf	___ftmul@f1+2,f,c
  3347  001C22  3216               	rrcf	___ftmul@f1+1,f,c
  3348  001C24  3215               	rrcf	___ftmul@f1,f,c
  3349  001C26  90D8               	bcf	status,0,c
  3350  001C28  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3351  001C2A  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3352  001C2C  321F               	rrcf	___ftmul@f3_as_product,f,c
  3353  001C2E  2E22               	decfsz	___ftmul@cntr,f,c
  3354  001C30  D7EE               	goto	l1552
  3355  001C32  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3356  001C36  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3357  001C3A  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3358  001C3E  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3359  001C42  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3360  001C46  EC06  F010         	call	___ftpack	;wreg free
  3361  001C4A  C001  F015         	movff	?___ftpack,?___ftmul
  3362  001C4E  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3363  001C52  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3364  001C56  0012               	return	
  3365  001C58                     __end_of___ftmul:
  3366                           	opt stack 0
  3367                           tblptru	equ	0xFF8
  3368                           tblptrh	equ	0xFF7
  3369                           tblptrl	equ	0xFF6
  3370                           tablat	equ	0xFF5
  3371                           prodh	equ	0xFF4
  3372                           prodl	equ	0xFF3
  3373                           postinc0	equ	0xFEE
  3374                           wreg	equ	0xFE8
  3375                           postinc2	equ	0xFDE
  3376                           postdec2	equ	0xFDD
  3377                           fsr2h	equ	0xFDA
  3378                           fsr2l	equ	0xFD9
  3379                           status	equ	0xFD8
  3380                           
  3381 ;; *************** function ___awmod *****************
  3382 ;; Defined at:
  3383 ;;		line 8 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/awmod.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;  dividend        2    0[COMRAM] int 
  3386 ;;  divisor         2    2[COMRAM] int 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  sign            1    5[COMRAM] unsigned char 
  3389 ;;  counter         1    4[COMRAM] unsigned char 
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  2    0[COMRAM] int 
  3392 ;; Registers used:
  3393 ;;		wreg, status,2, status,0
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3399 ;;      Params:         4       0       0       0       0       0       0       0       0
  3400 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3401 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3402 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3403 ;;Total ram usage:        6 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_fround
  3409 ;;		_scale
  3410 ;; This function uses a non-reentrant model
  3411 ;;
  3412                           
  3413                           	psect	text6
  3414  0024C2                     __ptext6:
  3415                           	opt stack 0
  3416  0024C2                     ___awmod:
  3417                           	opt stack 28
  3418                           
  3419                           ;incstack = 0
  3420  0024C2  0E00               	movlw	0
  3421  0024C4  6E06               	movwf	___awmod@sign,c
  3422  0024C6  AE02               	btfss	___awmod@dividend+1,7,c
  3423  0024C8  D006               	goto	l1399
  3424  0024CA  6C01               	negf	___awmod@dividend,c
  3425  0024CC  1E02               	comf	___awmod@dividend+1,f,c
  3426  0024CE  B0D8               	btfsc	status,0,c
  3427  0024D0  2A02               	incf	___awmod@dividend+1,f,c
  3428  0024D2  0E01               	movlw	1
  3429  0024D4  6E06               	movwf	___awmod@sign,c
  3430  0024D6                     l1399:
  3431  0024D6  AE04               	btfss	___awmod@divisor+1,7,c
  3432  0024D8  D004               	goto	l1400
  3433  0024DA  6C03               	negf	___awmod@divisor,c
  3434  0024DC  1E04               	comf	___awmod@divisor+1,f,c
  3435  0024DE  B0D8               	btfsc	status,0,c
  3436  0024E0  2A04               	incf	___awmod@divisor+1,f,c
  3437  0024E2                     l1400:
  3438  0024E2  5003               	movf	___awmod@divisor,w,c
  3439  0024E4  1004               	iorwf	___awmod@divisor+1,w,c
  3440  0024E6  B4D8               	btfsc	status,2,c
  3441  0024E8  D018               	goto	l1407
  3442  0024EA  0E01               	movlw	1
  3443  0024EC  6E05               	movwf	___awmod@counter,c
  3444  0024EE  D004               	goto	l1402
  3445  0024F0  90D8               	bcf	status,0,c
  3446  0024F2  3603               	rlcf	___awmod@divisor,f,c
  3447  0024F4  3604               	rlcf	___awmod@divisor+1,f,c
  3448  0024F6  2A05               	incf	___awmod@counter,f,c
  3449  0024F8                     l1402:
  3450  0024F8  AE04               	btfss	___awmod@divisor+1,7,c
  3451  0024FA  D7FA               	goto	l1403
  3452  0024FC                     u3010:
  3453  0024FC  5003               	movf	___awmod@divisor,w,c
  3454  0024FE  5C01               	subwf	___awmod@dividend,w,c
  3455  002500  5004               	movf	___awmod@divisor+1,w,c
  3456  002502  5802               	subwfb	___awmod@dividend+1,w,c
  3457  002504  A0D8               	btfss	status,0,c
  3458  002506  D004               	goto	l1406
  3459  002508  5003               	movf	___awmod@divisor,w,c
  3460  00250A  5E01               	subwf	___awmod@dividend,f,c
  3461  00250C  5004               	movf	___awmod@divisor+1,w,c
  3462  00250E  5A02               	subwfb	___awmod@dividend+1,f,c
  3463  002510                     l1406:
  3464  002510  90D8               	bcf	status,0,c
  3465  002512  3204               	rrcf	___awmod@divisor+1,f,c
  3466  002514  3203               	rrcf	___awmod@divisor,f,c
  3467  002516  2E05               	decfsz	___awmod@counter,f,c
  3468  002518  D7F1               	goto	u3010
  3469  00251A                     l1407:
  3470  00251A  5006               	movf	___awmod@sign,w,c
  3471  00251C  B4D8               	btfsc	status,2,c
  3472  00251E  D004               	goto	l1408
  3473  002520  6C01               	negf	___awmod@dividend,c
  3474  002522  1E02               	comf	___awmod@dividend+1,f,c
  3475  002524  B0D8               	btfsc	status,0,c
  3476  002526  2A02               	incf	___awmod@dividend+1,f,c
  3477  002528                     l1408:
  3478  002528  C001  F001         	movff	___awmod@dividend,?___awmod
  3479  00252C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3480  002530  0012               	return	
  3481  002532                     __end_of___awmod:
  3482                           	opt stack 0
  3483                           tblptru	equ	0xFF8
  3484                           tblptrh	equ	0xFF7
  3485                           tblptrl	equ	0xFF6
  3486                           tablat	equ	0xFF5
  3487                           prodh	equ	0xFF4
  3488                           prodl	equ	0xFF3
  3489                           postinc0	equ	0xFEE
  3490                           wreg	equ	0xFE8
  3491                           postinc2	equ	0xFDE
  3492                           postdec2	equ	0xFDD
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function ___awdiv *****************
  3498 ;; Defined at:
  3499 ;;		line 8 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  dividend        2    6[COMRAM] int 
  3502 ;;  divisor         2    8[COMRAM] int 
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  quotient        2   12[COMRAM] int 
  3505 ;;  sign            1   11[COMRAM] unsigned char 
  3506 ;;  counter         1   10[COMRAM] unsigned char 
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  2    6[COMRAM] int 
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, status,0
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3516 ;;      Params:         4       0       0       0       0       0       0       0       0
  3517 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3518 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3519 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3520 ;;Total ram usage:        8 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; This function calls:
  3523 ;;		Nothing
  3524 ;; This function is called by:
  3525 ;;		_fround
  3526 ;;		_scale
  3527 ;;		_printf
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text7
  3532  0021D0                     __ptext7:
  3533                           	opt stack 0
  3534  0021D0                     ___awdiv:
  3535                           	opt stack 28
  3536                           
  3537                           ;incstack = 0
  3538  0021D0  0E00               	movlw	0
  3539  0021D2  6E0C               	movwf	___awdiv@sign,c
  3540  0021D4  AE0A               	btfss	___awdiv@divisor+1,7,c
  3541  0021D6  D006               	goto	l1386
  3542  0021D8  6C09               	negf	___awdiv@divisor,c
  3543  0021DA  1E0A               	comf	___awdiv@divisor+1,f,c
  3544  0021DC  B0D8               	btfsc	status,0,c
  3545  0021DE  2A0A               	incf	___awdiv@divisor+1,f,c
  3546  0021E0  0E01               	movlw	1
  3547  0021E2  6E0C               	movwf	___awdiv@sign,c
  3548  0021E4                     l1386:
  3549  0021E4  AE08               	btfss	___awdiv@dividend+1,7,c
  3550  0021E6  D006               	goto	l1387
  3551  0021E8  6C07               	negf	___awdiv@dividend,c
  3552  0021EA  1E08               	comf	___awdiv@dividend+1,f,c
  3553  0021EC  B0D8               	btfsc	status,0,c
  3554  0021EE  2A08               	incf	___awdiv@dividend+1,f,c
  3555  0021F0  0E01               	movlw	1
  3556  0021F2  1A0C               	xorwf	___awdiv@sign,f,c
  3557  0021F4                     l1387:
  3558  0021F4  0E00               	movlw	0
  3559  0021F6  6E0E               	movwf	___awdiv@quotient+1,c
  3560  0021F8  0E00               	movlw	0
  3561  0021FA  6E0D               	movwf	___awdiv@quotient,c
  3562  0021FC  5009               	movf	___awdiv@divisor,w,c
  3563  0021FE  100A               	iorwf	___awdiv@divisor+1,w,c
  3564  002200  B4D8               	btfsc	status,2,c
  3565  002202  D01C               	goto	l1394
  3566  002204  0E01               	movlw	1
  3567  002206  6E0B               	movwf	___awdiv@counter,c
  3568  002208  D004               	goto	l1389
  3569  00220A  90D8               	bcf	status,0,c
  3570  00220C  3609               	rlcf	___awdiv@divisor,f,c
  3571  00220E  360A               	rlcf	___awdiv@divisor+1,f,c
  3572  002210  2A0B               	incf	___awdiv@counter,f,c
  3573  002212                     l1389:
  3574  002212  AE0A               	btfss	___awdiv@divisor+1,7,c
  3575  002214  D7FA               	goto	l1390
  3576  002216                     u2950:
  3577  002216  90D8               	bcf	status,0,c
  3578  002218  360D               	rlcf	___awdiv@quotient,f,c
  3579  00221A  360E               	rlcf	___awdiv@quotient+1,f,c
  3580  00221C  5009               	movf	___awdiv@divisor,w,c
  3581  00221E  5C07               	subwf	___awdiv@dividend,w,c
  3582  002220  500A               	movf	___awdiv@divisor+1,w,c
  3583  002222  5808               	subwfb	___awdiv@dividend+1,w,c
  3584  002224  A0D8               	btfss	status,0,c
  3585  002226  D005               	goto	l1393
  3586  002228  5009               	movf	___awdiv@divisor,w,c
  3587  00222A  5E07               	subwf	___awdiv@dividend,f,c
  3588  00222C  500A               	movf	___awdiv@divisor+1,w,c
  3589  00222E  5A08               	subwfb	___awdiv@dividend+1,f,c
  3590  002230  800D               	bsf	___awdiv@quotient,0,c
  3591  002232                     l1393:
  3592  002232  90D8               	bcf	status,0,c
  3593  002234  320A               	rrcf	___awdiv@divisor+1,f,c
  3594  002236  3209               	rrcf	___awdiv@divisor,f,c
  3595  002238  2E0B               	decfsz	___awdiv@counter,f,c
  3596  00223A  D7ED               	goto	u2950
  3597  00223C                     l1394:
  3598  00223C  500C               	movf	___awdiv@sign,w,c
  3599  00223E  B4D8               	btfsc	status,2,c
  3600  002240  D004               	goto	l1395
  3601  002242  6C0D               	negf	___awdiv@quotient,c
  3602  002244  1E0E               	comf	___awdiv@quotient+1,f,c
  3603  002246  B0D8               	btfsc	status,0,c
  3604  002248  2A0E               	incf	___awdiv@quotient+1,f,c
  3605  00224A                     l1395:
  3606  00224A  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3607  00224E  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3608  002252  0012               	return	
  3609  002254                     __end_of___awdiv:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           postinc0	equ	0xFEE
  3618                           wreg	equ	0xFE8
  3619                           postinc2	equ	0xFDE
  3620                           postdec2	equ	0xFDD
  3621                           fsr2h	equ	0xFDA
  3622                           fsr2l	equ	0xFD9
  3623                           status	equ	0xFD8
  3624                           
  3625 ;; *************** function __tdiv_to_l_ *****************
  3626 ;; Defined at:
  3627 ;;		line 60 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/ftdivl.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;  f1              3    0[COMRAM] float 
  3630 ;;  f2              3    3[COMRAM] float 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  quot            4    9[COMRAM] unsigned long 
  3633 ;;  exp1            1   14[COMRAM] unsigned char 
  3634 ;;  cntr            1   13[COMRAM] unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  4    0[COMRAM] unsigned long 
  3637 ;; Registers used:
  3638 ;;		wreg, status,2, status,0
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3644 ;;      Params:         6       0       0       0       0       0       0       0       0
  3645 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3646 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3647 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3648 ;;Total ram usage:       15 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; This function calls:
  3651 ;;		Nothing
  3652 ;; This function is called by:
  3653 ;;		_printf
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text8
  3658  00190A                     __ptext8:
  3659                           	opt stack 0
  3660  00190A                     __tdiv_to_l_:
  3661                           	opt stack 29
  3662                           
  3663                           ;incstack = 0
  3664  00190A  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3665  00190E  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3666  001910  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3667  001912  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3668  001914  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3669  001916  E301               	bnc	u3341
  3670  001918  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3671  00191A                     u3341:
  3672  00191A  5007               	movf	??__tdiv_to_l_,w,c
  3673  00191C  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3674  00191E  500F               	movf	__tdiv_to_l_@exp1,w,c
  3675  001920  A4D8               	btfss	status,2,c
  3676  001922  D009               	goto	l1522
  3677  001924  0E00               	movlw	0
  3678  001926  6E01               	movwf	?__tdiv_to_l_,c
  3679  001928  0E00               	movlw	0
  3680  00192A  6E02               	movwf	?__tdiv_to_l_+1,c
  3681  00192C  0E00               	movlw	0
  3682  00192E  6E03               	movwf	?__tdiv_to_l_+2,c
  3683  001930  0E00               	movlw	0
  3684  001932  6E04               	movwf	?__tdiv_to_l_+3,c
  3685  001934  0012               	return	
  3686  001936                     l1522:
  3687  001936  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3688  00193A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3689  00193C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3690  00193E  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3691  001940  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3692  001942  E301               	bnc	u3361
  3693  001944  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3694  001946                     u3361:
  3695  001946  5007               	movf	??__tdiv_to_l_,w,c
  3696  001948  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3697  00194A  500E               	movf	__tdiv_to_l_@cntr,w,c
  3698  00194C  A4D8               	btfss	status,2,c
  3699  00194E  D009               	goto	l1524
  3700  001950  0E00               	movlw	0
  3701  001952  6E01               	movwf	?__tdiv_to_l_,c
  3702  001954  0E00               	movlw	0
  3703  001956  6E02               	movwf	?__tdiv_to_l_+1,c
  3704  001958  0E00               	movlw	0
  3705  00195A  6E03               	movwf	?__tdiv_to_l_+2,c
  3706  00195C  0E00               	movlw	0
  3707  00195E  6E04               	movwf	?__tdiv_to_l_+3,c
  3708  001960  0012               	return	
  3709  001962                     l1524:
  3710  001962  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3711  001964  0EFF               	movlw	255
  3712  001966  1601               	andwf	__tdiv_to_l_@f1,f,c
  3713  001968  0EFF               	movlw	255
  3714  00196A  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3715  00196C  0E00               	movlw	0
  3716  00196E  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3717  001970  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3718  001972  0EFF               	movlw	255
  3719  001974  1604               	andwf	__tdiv_to_l_@f2,f,c
  3720  001976  0EFF               	movlw	255
  3721  001978  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3722  00197A  0E00               	movlw	0
  3723  00197C  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3724  00197E  0E00               	movlw	0
  3725  001980  6E0A               	movwf	__tdiv_to_l_@quot,c
  3726  001982  0E00               	movlw	0
  3727  001984  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3728  001986  0E00               	movlw	0
  3729  001988  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3730  00198A  0E00               	movlw	0
  3731  00198C  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3732  00198E  0E7F               	movlw	127
  3733  001990  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3734  001992  500E               	movf	__tdiv_to_l_@cntr,w,c
  3735  001994  0F98               	addlw	152
  3736  001996  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3737  001998  0E18               	movlw	24
  3738  00199A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3739  00199C                     l1525:
  3740  00199C  90D8               	bcf	status,0,c
  3741  00199E  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3742  0019A0  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3743  0019A2  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3744  0019A4  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3745  0019A6  5004               	movf	__tdiv_to_l_@f2,w,c
  3746  0019A8  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3747  0019AA  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3748  0019AC  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3749  0019AE  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3750  0019B0  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3751  0019B2  A0D8               	btfss	status,0,c
  3752  0019B4  D007               	goto	l1526
  3753  0019B6  5004               	movf	__tdiv_to_l_@f2,w,c
  3754  0019B8  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3755  0019BA  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3756  0019BC  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3757  0019BE  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3758  0019C0  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3759  0019C2  800A               	bsf	__tdiv_to_l_@quot,0,c
  3760  0019C4                     l1526:
  3761  0019C4  90D8               	bcf	status,0,c
  3762  0019C6  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3763  0019C8  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3764  0019CA  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3765  0019CC  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3766  0019CE  D7E6               	goto	l1525
  3767  0019D0  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3768  0019D2  D016               	goto	l1528
  3769  0019D4  500F               	movf	__tdiv_to_l_@exp1,w,c
  3770  0019D6  0A80               	xorlw	128
  3771  0019D8  0F97               	addlw	151
  3772  0019DA  B0D8               	btfsc	status,0,c
  3773  0019DC  D009               	goto	l1529
  3774  0019DE  0E00               	movlw	0
  3775  0019E0  6E01               	movwf	?__tdiv_to_l_,c
  3776  0019E2  0E00               	movlw	0
  3777  0019E4  6E02               	movwf	?__tdiv_to_l_+1,c
  3778  0019E6  0E00               	movlw	0
  3779  0019E8  6E03               	movwf	?__tdiv_to_l_+2,c
  3780  0019EA  0E00               	movlw	0
  3781  0019EC  6E04               	movwf	?__tdiv_to_l_+3,c
  3782  0019EE  0012               	return	
  3783  0019F0                     l1529:
  3784  0019F0  90D8               	bcf	status,0,c
  3785  0019F2  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3786  0019F4  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3787  0019F6  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3788  0019F8  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3789  0019FA  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3790  0019FC  D7F9               	goto	l1529
  3791  0019FE  D015               	goto	u3420
  3792  001A00                     l1528:
  3793  001A00  0E17               	movlw	23
  3794  001A02  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3795  001A04  D00F               	goto	l1534
  3796  001A06  0E00               	movlw	0
  3797  001A08  6E01               	movwf	?__tdiv_to_l_,c
  3798  001A0A  0E00               	movlw	0
  3799  001A0C  6E02               	movwf	?__tdiv_to_l_+1,c
  3800  001A0E  0E00               	movlw	0
  3801  001A10  6E03               	movwf	?__tdiv_to_l_+2,c
  3802  001A12  0E00               	movlw	0
  3803  001A14  6E04               	movwf	?__tdiv_to_l_+3,c
  3804  001A16  0012               	return	
  3805  001A18  90D8               	bcf	status,0,c
  3806  001A1A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3807  001A1C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3808  001A1E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3809  001A20  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3810  001A22  060F               	decf	__tdiv_to_l_@exp1,f,c
  3811  001A24                     l1534:
  3812  001A24  500F               	movf	__tdiv_to_l_@exp1,w,c
  3813  001A26  A4D8               	btfss	status,2,c
  3814  001A28  D7F7               	goto	l1535
  3815  001A2A                     u3420:
  3816  001A2A  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3817  001A2E  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3818  001A32  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3819  001A36  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3820  001A3A  0012               	return		;funcret
  3821  001A3C                     __end_of__tdiv_to_l_:
  3822                           	opt stack 0
  3823                           tblptru	equ	0xFF8
  3824                           tblptrh	equ	0xFF7
  3825                           tblptrl	equ	0xFF6
  3826                           tablat	equ	0xFF5
  3827                           prodh	equ	0xFF4
  3828                           prodl	equ	0xFF3
  3829                           postinc0	equ	0xFEE
  3830                           wreg	equ	0xFE8
  3831                           postinc2	equ	0xFDE
  3832                           postdec2	equ	0xFDD
  3833                           fsr2h	equ	0xFDA
  3834                           fsr2l	equ	0xFD9
  3835                           status	equ	0xFD8
  3836                           
  3837 ;; *************** function __div_to_l_ *****************
  3838 ;; Defined at:
  3839 ;;		line 60 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/fldivl.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;  f1              3    0[COMRAM] unsigned long 
  3842 ;;  f2              3    3[COMRAM] unsigned long 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  quot            4    6[COMRAM] unsigned long 
  3845 ;;  exp1            1   11[COMRAM] unsigned char 
  3846 ;;  cntr            1   10[COMRAM] unsigned char 
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  4    0[COMRAM] unsigned long 
  3849 ;; Registers used:
  3850 ;;		wreg, status,2, status,0
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3856 ;;      Params:         6       0       0       0       0       0       0       0       0
  3857 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3858 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3859 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3860 ;;Total ram usage:       12 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_printf
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text9
  3870  001A3C                     __ptext9:
  3871                           	opt stack 0
  3872  001A3C                     __div_to_l_:
  3873                           	opt stack 29
  3874                           
  3875                           ;incstack = 0
  3876  001A3C  3403               	rlcf	__div_to_l_@f1+2,w,c
  3877  001A3E  3404               	rlcf	__div_to_l_@f1+3,w,c
  3878  001A40  6E0C               	movwf	__div_to_l_@exp1,c
  3879  001A42  500C               	movf	__div_to_l_@exp1,w,c
  3880  001A44  A4D8               	btfss	status,2,c
  3881  001A46  D009               	goto	l1418
  3882  001A48  0E00               	movlw	0
  3883  001A4A  6E01               	movwf	?__div_to_l_,c
  3884  001A4C  0E00               	movlw	0
  3885  001A4E  6E02               	movwf	?__div_to_l_+1,c
  3886  001A50  0E00               	movlw	0
  3887  001A52  6E03               	movwf	?__div_to_l_+2,c
  3888  001A54  0E00               	movlw	0
  3889  001A56  6E04               	movwf	?__div_to_l_+3,c
  3890  001A58  0012               	return	
  3891  001A5A                     l1418:
  3892  001A5A  3406               	rlcf	__div_to_l_@f2+2,w,c
  3893  001A5C  3407               	rlcf	__div_to_l_@f2+3,w,c
  3894  001A5E  6E0B               	movwf	__div_to_l_@cntr,c
  3895  001A60  500B               	movf	__div_to_l_@cntr,w,c
  3896  001A62  A4D8               	btfss	status,2,c
  3897  001A64  D009               	goto	l1420
  3898  001A66  0E00               	movlw	0
  3899  001A68  6E01               	movwf	?__div_to_l_,c
  3900  001A6A  0E00               	movlw	0
  3901  001A6C  6E02               	movwf	?__div_to_l_+1,c
  3902  001A6E  0E00               	movlw	0
  3903  001A70  6E03               	movwf	?__div_to_l_+2,c
  3904  001A72  0E00               	movlw	0
  3905  001A74  6E04               	movwf	?__div_to_l_+3,c
  3906  001A76  0012               	return	
  3907  001A78                     l1420:
  3908  001A78  8E03               	bsf	__div_to_l_@f1+2,7,c
  3909  001A7A  0EFF               	movlw	255
  3910  001A7C  1601               	andwf	__div_to_l_@f1,f,c
  3911  001A7E  0EFF               	movlw	255
  3912  001A80  1602               	andwf	__div_to_l_@f1+1,f,c
  3913  001A82  0EFF               	movlw	255
  3914  001A84  1603               	andwf	__div_to_l_@f1+2,f,c
  3915  001A86  0E00               	movlw	0
  3916  001A88  1604               	andwf	__div_to_l_@f1+3,f,c
  3917  001A8A  8E06               	bsf	__div_to_l_@f2+2,7,c
  3918  001A8C  0EFF               	movlw	255
  3919  001A8E  1604               	andwf	__div_to_l_@f2,f,c
  3920  001A90  0EFF               	movlw	255
  3921  001A92  1605               	andwf	__div_to_l_@f2+1,f,c
  3922  001A94  0EFF               	movlw	255
  3923  001A96  1606               	andwf	__div_to_l_@f2+2,f,c
  3924  001A98  0E00               	movlw	0
  3925  001A9A  1607               	andwf	__div_to_l_@f2+3,f,c
  3926  001A9C  0E00               	movlw	0
  3927  001A9E  6E07               	movwf	__div_to_l_@quot,c
  3928  001AA0  0E00               	movlw	0
  3929  001AA2  6E08               	movwf	__div_to_l_@quot+1,c
  3930  001AA4  0E00               	movlw	0
  3931  001AA6  6E09               	movwf	__div_to_l_@quot+2,c
  3932  001AA8  0E00               	movlw	0
  3933  001AAA  6E0A               	movwf	__div_to_l_@quot+3,c
  3934  001AAC  0E7F               	movlw	127
  3935  001AAE  5E0C               	subwf	__div_to_l_@exp1,f,c
  3936  001AB0  500B               	movf	__div_to_l_@cntr,w,c
  3937  001AB2  0FA0               	addlw	160
  3938  001AB4  5E0C               	subwf	__div_to_l_@exp1,f,c
  3939  001AB6  0E20               	movlw	32
  3940  001AB8  6E0B               	movwf	__div_to_l_@cntr,c
  3941  001ABA  90D8               	bcf	status,0,c
  3942  001ABC  3607               	rlcf	__div_to_l_@quot,f,c
  3943  001ABE  3608               	rlcf	__div_to_l_@quot+1,f,c
  3944  001AC0  3609               	rlcf	__div_to_l_@quot+2,f,c
  3945  001AC2  360A               	rlcf	__div_to_l_@quot+3,f,c
  3946  001AC4  5004               	movf	__div_to_l_@f2,w,c
  3947  001AC6  5C01               	subwf	__div_to_l_@f1,w,c
  3948  001AC8  5005               	movf	__div_to_l_@f2+1,w,c
  3949  001ACA  5802               	subwfb	__div_to_l_@f1+1,w,c
  3950  001ACC  5006               	movf	__div_to_l_@f2+2,w,c
  3951  001ACE  5803               	subwfb	__div_to_l_@f1+2,w,c
  3952  001AD0  5007               	movf	__div_to_l_@f2+3,w,c
  3953  001AD2  5804               	subwfb	__div_to_l_@f1+3,w,c
  3954  001AD4  A0D8               	btfss	status,0,c
  3955  001AD6  D009               	goto	l1422
  3956  001AD8  5004               	movf	__div_to_l_@f2,w,c
  3957  001ADA  5E01               	subwf	__div_to_l_@f1,f,c
  3958  001ADC  5005               	movf	__div_to_l_@f2+1,w,c
  3959  001ADE  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3960  001AE0  5006               	movf	__div_to_l_@f2+2,w,c
  3961  001AE2  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3962  001AE4  5007               	movf	__div_to_l_@f2+3,w,c
  3963  001AE6  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3964  001AE8  8007               	bsf	__div_to_l_@quot,0,c
  3965  001AEA                     l1422:
  3966  001AEA  90D8               	bcf	status,0,c
  3967  001AEC  3601               	rlcf	__div_to_l_@f1,f,c
  3968  001AEE  3602               	rlcf	__div_to_l_@f1+1,f,c
  3969  001AF0  3603               	rlcf	__div_to_l_@f1+2,f,c
  3970  001AF2  3604               	rlcf	__div_to_l_@f1+3,f,c
  3971  001AF4  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3972  001AF6  D7E1               	goto	l1421
  3973  001AF8  AE0C               	btfss	__div_to_l_@exp1,7,c
  3974  001AFA  D016               	goto	l1424
  3975  001AFC  500C               	movf	__div_to_l_@exp1,w,c
  3976  001AFE  0A80               	xorlw	128
  3977  001B00  0F9F               	addlw	159
  3978  001B02  B0D8               	btfsc	status,0,c
  3979  001B04  D009               	goto	l1425
  3980  001B06  0E00               	movlw	0
  3981  001B08  6E01               	movwf	?__div_to_l_,c
  3982  001B0A  0E00               	movlw	0
  3983  001B0C  6E02               	movwf	?__div_to_l_+1,c
  3984  001B0E  0E00               	movlw	0
  3985  001B10  6E03               	movwf	?__div_to_l_+2,c
  3986  001B12  0E00               	movlw	0
  3987  001B14  6E04               	movwf	?__div_to_l_+3,c
  3988  001B16  0012               	return	
  3989  001B18                     l1425:
  3990  001B18  90D8               	bcf	status,0,c
  3991  001B1A  320A               	rrcf	__div_to_l_@quot+3,f,c
  3992  001B1C  3209               	rrcf	__div_to_l_@quot+2,f,c
  3993  001B1E  3208               	rrcf	__div_to_l_@quot+1,f,c
  3994  001B20  3207               	rrcf	__div_to_l_@quot,f,c
  3995  001B22  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3996  001B24  D7F9               	goto	l1425
  3997  001B26  D015               	goto	u3490
  3998  001B28                     l1424:
  3999  001B28  0E1F               	movlw	31
  4000  001B2A  640C               	cpfsgt	__div_to_l_@exp1,c
  4001  001B2C  D00F               	goto	l1430
  4002  001B2E  0E00               	movlw	0
  4003  001B30  6E01               	movwf	?__div_to_l_,c
  4004  001B32  0E00               	movlw	0
  4005  001B34  6E02               	movwf	?__div_to_l_+1,c
  4006  001B36  0E00               	movlw	0
  4007  001B38  6E03               	movwf	?__div_to_l_+2,c
  4008  001B3A  0E00               	movlw	0
  4009  001B3C  6E04               	movwf	?__div_to_l_+3,c
  4010  001B3E  0012               	return	
  4011  001B40  90D8               	bcf	status,0,c
  4012  001B42  3607               	rlcf	__div_to_l_@quot,f,c
  4013  001B44  3608               	rlcf	__div_to_l_@quot+1,f,c
  4014  001B46  3609               	rlcf	__div_to_l_@quot+2,f,c
  4015  001B48  360A               	rlcf	__div_to_l_@quot+3,f,c
  4016  001B4A  060C               	decf	__div_to_l_@exp1,f,c
  4017  001B4C                     l1430:
  4018  001B4C  500C               	movf	__div_to_l_@exp1,w,c
  4019  001B4E  A4D8               	btfss	status,2,c
  4020  001B50  D7F7               	goto	l1431
  4021  001B52                     u3490:
  4022  001B52  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4023  001B56  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4024  001B5A  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4025  001B5E  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4026  001B62  0012               	return		;funcret
  4027  001B64                     __end_of__div_to_l_:
  4028                           	opt stack 0
  4029                           tblptru	equ	0xFF8
  4030                           tblptrh	equ	0xFF7
  4031                           tblptrl	equ	0xFF6
  4032                           tablat	equ	0xFF5
  4033                           prodh	equ	0xFF4
  4034                           prodl	equ	0xFF3
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           postinc2	equ	0xFDE
  4038                           postdec2	equ	0xFDD
  4039                           fsr2h	equ	0xFDA
  4040                           fsr2l	equ	0xFD9
  4041                           status	equ	0xFD8
  4042                           
  4043 ;; *************** function ___lltoft *****************
  4044 ;; Defined at:
  4045 ;;		line 35 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/lltoft.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;  c               4    8[COMRAM] unsigned long 
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;  exp             1   16[COMRAM] unsigned char 
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  3    8[COMRAM] float 
  4052 ;; Registers used:
  4053 ;;		wreg, status,2, status,0, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4059 ;;      Params:         4       0       0       0       0       0       0       0       0
  4060 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4061 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4062 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4063 ;;Total ram usage:        9 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    1
  4066 ;; This function calls:
  4067 ;;		___ftpack
  4068 ;; This function is called by:
  4069 ;;		_printf
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text10
  4074  002598                     __ptext10:
  4075                           	opt stack 0
  4076  002598                     ___lltoft:
  4077                           	opt stack 28
  4078                           
  4079                           ;incstack = 0
  4080  002598  0E8E               	movlw	142
  4081  00259A  6E11               	movwf	___lltoft@exp,c
  4082  00259C  D006               	goto	l1624
  4083  00259E  90D8               	bcf	status,0,c
  4084  0025A0  320C               	rrcf	___lltoft@c+3,f,c
  4085  0025A2  320B               	rrcf	___lltoft@c+2,f,c
  4086  0025A4  320A               	rrcf	___lltoft@c+1,f,c
  4087  0025A6  3209               	rrcf	___lltoft@c,f,c
  4088  0025A8  2A11               	incf	___lltoft@exp,f,c
  4089  0025AA                     l1624:
  4090  0025AA  0E00               	movlw	0
  4091  0025AC  1409               	andwf	___lltoft@c,w,c
  4092  0025AE  6E0D               	movwf	??___lltoft& (0+255),c
  4093  0025B0  0E00               	movlw	0
  4094  0025B2  140A               	andwf	___lltoft@c+1,w,c
  4095  0025B4  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4096  0025B6  0E00               	movlw	0
  4097  0025B8  140B               	andwf	___lltoft@c+2,w,c
  4098  0025BA  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4099  0025BC  0EFF               	movlw	255
  4100  0025BE  140C               	andwf	___lltoft@c+3,w,c
  4101  0025C0  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4102  0025C2  500D               	movf	??___lltoft,w,c
  4103  0025C4  100E               	iorwf	??___lltoft+1,w,c
  4104  0025C6  100F               	iorwf	??___lltoft+2,w,c
  4105  0025C8  1010               	iorwf	??___lltoft+3,w,c
  4106  0025CA  A4D8               	btfss	status,2,c
  4107  0025CC  D7E8               	goto	l1625
  4108  0025CE  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4109  0025D2  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4110  0025D6  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4111  0025DA  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4112  0025DE  0E00               	movlw	0
  4113  0025E0  6E05               	movwf	___ftpack@sign,c
  4114  0025E2  EC06  F010         	call	___ftpack	;wreg free
  4115  0025E6  C001  F009         	movff	?___ftpack,?___lltoft
  4116  0025EA  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4117  0025EE  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4118  0025F2  0012               	return	
  4119  0025F4                     __end_of___lltoft:
  4120                           	opt stack 0
  4121                           tblptru	equ	0xFF8
  4122                           tblptrh	equ	0xFF7
  4123                           tblptrl	equ	0xFF6
  4124                           tablat	equ	0xFF5
  4125                           prodh	equ	0xFF4
  4126                           prodl	equ	0xFF3
  4127                           postinc0	equ	0xFEE
  4128                           wreg	equ	0xFE8
  4129                           postinc2	equ	0xFDE
  4130                           postdec2	equ	0xFDD
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function ___llmod *****************
  4136 ;; Defined at:
  4137 ;;		line 8 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/llmod.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  dividend        4    0[COMRAM] unsigned long 
  4140 ;;  divisor         4    4[COMRAM] unsigned long 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  counter         1    8[COMRAM] unsigned char 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  4    0[COMRAM] unsigned long 
  4145 ;; Registers used:
  4146 ;;		wreg, status,2, status,0
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4152 ;;      Params:         8       0       0       0       0       0       0       0       0
  4153 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4154 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4155 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4156 ;;Total ram usage:        9 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; This function calls:
  4159 ;;		Nothing
  4160 ;; This function is called by:
  4161 ;;		_printf
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           	psect	text11
  4166  002532                     __ptext11:
  4167                           	opt stack 0
  4168  002532                     ___llmod:
  4169                           	opt stack 29
  4170                           
  4171                           ;incstack = 0
  4172  002532  5005               	movf	___llmod@divisor,w,c
  4173  002534  1006               	iorwf	___llmod@divisor+1,w,c
  4174  002536  1007               	iorwf	___llmod@divisor+2,w,c
  4175  002538  1008               	iorwf	___llmod@divisor+3,w,c
  4176  00253A  B4D8               	btfsc	status,2,c
  4177  00253C  D024               	goto	l1618
  4178  00253E  0E01               	movlw	1
  4179  002540  6E09               	movwf	___llmod@counter,c
  4180  002542  D006               	goto	l1613
  4181  002544  90D8               	bcf	status,0,c
  4182  002546  3605               	rlcf	___llmod@divisor,f,c
  4183  002548  3606               	rlcf	___llmod@divisor+1,f,c
  4184  00254A  3607               	rlcf	___llmod@divisor+2,f,c
  4185  00254C  3608               	rlcf	___llmod@divisor+3,f,c
  4186  00254E  2A09               	incf	___llmod@counter,f,c
  4187  002550                     l1613:
  4188  002550  AE08               	btfss	___llmod@divisor+3,7,c
  4189  002552  D7F8               	goto	l1614
  4190  002554                     u3590:
  4191  002554  5005               	movf	___llmod@divisor,w,c
  4192  002556  5C01               	subwf	___llmod@dividend,w,c
  4193  002558  5006               	movf	___llmod@divisor+1,w,c
  4194  00255A  5802               	subwfb	___llmod@dividend+1,w,c
  4195  00255C  5007               	movf	___llmod@divisor+2,w,c
  4196  00255E  5803               	subwfb	___llmod@dividend+2,w,c
  4197  002560  5008               	movf	___llmod@divisor+3,w,c
  4198  002562  5804               	subwfb	___llmod@dividend+3,w,c
  4199  002564  A0D8               	btfss	status,0,c
  4200  002566  D008               	goto	l1617
  4201  002568  5005               	movf	___llmod@divisor,w,c
  4202  00256A  5E01               	subwf	___llmod@dividend,f,c
  4203  00256C  5006               	movf	___llmod@divisor+1,w,c
  4204  00256E  5A02               	subwfb	___llmod@dividend+1,f,c
  4205  002570  5007               	movf	___llmod@divisor+2,w,c
  4206  002572  5A03               	subwfb	___llmod@dividend+2,f,c
  4207  002574  5008               	movf	___llmod@divisor+3,w,c
  4208  002576  5A04               	subwfb	___llmod@dividend+3,f,c
  4209  002578                     l1617:
  4210  002578  90D8               	bcf	status,0,c
  4211  00257A  3208               	rrcf	___llmod@divisor+3,f,c
  4212  00257C  3207               	rrcf	___llmod@divisor+2,f,c
  4213  00257E  3206               	rrcf	___llmod@divisor+1,f,c
  4214  002580  3205               	rrcf	___llmod@divisor,f,c
  4215  002582  2E09               	decfsz	___llmod@counter,f,c
  4216  002584  D7E7               	goto	u3590
  4217  002586                     l1618:
  4218  002586  C001  F001         	movff	___llmod@dividend,?___llmod
  4219  00258A  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4220  00258E  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4221  002592  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4222  002596  0012               	return		;funcret
  4223  002598                     __end_of___llmod:
  4224                           	opt stack 0
  4225                           tblptru	equ	0xFF8
  4226                           tblptrh	equ	0xFF7
  4227                           tblptrl	equ	0xFF6
  4228                           tablat	equ	0xFF5
  4229                           prodh	equ	0xFF4
  4230                           prodl	equ	0xFF3
  4231                           postinc0	equ	0xFEE
  4232                           wreg	equ	0xFE8
  4233                           postinc2	equ	0xFDE
  4234                           postdec2	equ	0xFDD
  4235                           fsr2h	equ	0xFDA
  4236                           fsr2l	equ	0xFD9
  4237                           status	equ	0xFD8
  4238                           
  4239 ;; *************** function ___lldiv *****************
  4240 ;; Defined at:
  4241 ;;		line 8 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  dividend        4    0[COMRAM] unsigned long 
  4244 ;;  divisor         4    4[COMRAM] unsigned long 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  quotient        4    8[COMRAM] unsigned long 
  4247 ;;  counter         1   12[COMRAM] unsigned char 
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  4    0[COMRAM] unsigned long 
  4250 ;; Registers used:
  4251 ;;		wreg, status,2, status,0
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4257 ;;      Params:         8       0       0       0       0       0       0       0       0
  4258 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4259 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4260 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4261 ;;Total ram usage:       13 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; This function calls:
  4264 ;;		Nothing
  4265 ;; This function is called by:
  4266 ;;		_printf
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text12
  4271  002254                     __ptext12:
  4272                           	opt stack 0
  4273  002254                     ___lldiv:
  4274                           	opt stack 29
  4275                           
  4276                           ;incstack = 0
  4277  002254  0E00               	movlw	0
  4278  002256  6E09               	movwf	___lldiv@quotient,c
  4279  002258  0E00               	movlw	0
  4280  00225A  6E0A               	movwf	___lldiv@quotient+1,c
  4281  00225C  0E00               	movlw	0
  4282  00225E  6E0B               	movwf	___lldiv@quotient+2,c
  4283  002260  0E00               	movlw	0
  4284  002262  6E0C               	movwf	___lldiv@quotient+3,c
  4285  002264  5005               	movf	___lldiv@divisor,w,c
  4286  002266  1006               	iorwf	___lldiv@divisor+1,w,c
  4287  002268  1007               	iorwf	___lldiv@divisor+2,w,c
  4288  00226A  1008               	iorwf	___lldiv@divisor+3,w,c
  4289  00226C  B4D8               	btfsc	status,2,c
  4290  00226E  D02A               	goto	l1608
  4291  002270  0E01               	movlw	1
  4292  002272  6E0D               	movwf	___lldiv@counter,c
  4293  002274  D006               	goto	l1603
  4294  002276  90D8               	bcf	status,0,c
  4295  002278  3605               	rlcf	___lldiv@divisor,f,c
  4296  00227A  3606               	rlcf	___lldiv@divisor+1,f,c
  4297  00227C  3607               	rlcf	___lldiv@divisor+2,f,c
  4298  00227E  3608               	rlcf	___lldiv@divisor+3,f,c
  4299  002280  2A0D               	incf	___lldiv@counter,f,c
  4300  002282                     l1603:
  4301  002282  AE08               	btfss	___lldiv@divisor+3,7,c
  4302  002284  D7F8               	goto	l1604
  4303  002286                     u3560:
  4304  002286  90D8               	bcf	status,0,c
  4305  002288  3609               	rlcf	___lldiv@quotient,f,c
  4306  00228A  360A               	rlcf	___lldiv@quotient+1,f,c
  4307  00228C  360B               	rlcf	___lldiv@quotient+2,f,c
  4308  00228E  360C               	rlcf	___lldiv@quotient+3,f,c
  4309  002290  5005               	movf	___lldiv@divisor,w,c
  4310  002292  5C01               	subwf	___lldiv@dividend,w,c
  4311  002294  5006               	movf	___lldiv@divisor+1,w,c
  4312  002296  5802               	subwfb	___lldiv@dividend+1,w,c
  4313  002298  5007               	movf	___lldiv@divisor+2,w,c
  4314  00229A  5803               	subwfb	___lldiv@dividend+2,w,c
  4315  00229C  5008               	movf	___lldiv@divisor+3,w,c
  4316  00229E  5804               	subwfb	___lldiv@dividend+3,w,c
  4317  0022A0  A0D8               	btfss	status,0,c
  4318  0022A2  D009               	goto	l1607
  4319  0022A4  5005               	movf	___lldiv@divisor,w,c
  4320  0022A6  5E01               	subwf	___lldiv@dividend,f,c
  4321  0022A8  5006               	movf	___lldiv@divisor+1,w,c
  4322  0022AA  5A02               	subwfb	___lldiv@dividend+1,f,c
  4323  0022AC  5007               	movf	___lldiv@divisor+2,w,c
  4324  0022AE  5A03               	subwfb	___lldiv@dividend+2,f,c
  4325  0022B0  5008               	movf	___lldiv@divisor+3,w,c
  4326  0022B2  5A04               	subwfb	___lldiv@dividend+3,f,c
  4327  0022B4  8009               	bsf	___lldiv@quotient,0,c
  4328  0022B6                     l1607:
  4329  0022B6  90D8               	bcf	status,0,c
  4330  0022B8  3208               	rrcf	___lldiv@divisor+3,f,c
  4331  0022BA  3207               	rrcf	___lldiv@divisor+2,f,c
  4332  0022BC  3206               	rrcf	___lldiv@divisor+1,f,c
  4333  0022BE  3205               	rrcf	___lldiv@divisor,f,c
  4334  0022C0  2E0D               	decfsz	___lldiv@counter,f,c
  4335  0022C2  D7E1               	goto	u3560
  4336  0022C4                     l1608:
  4337  0022C4  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4338  0022C8  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4339  0022CC  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4340  0022D0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4341  0022D4  0012               	return		;funcret
  4342  0022D6                     __end_of___lldiv:
  4343                           	opt stack 0
  4344                           tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           prodh	equ	0xFF4
  4349                           prodl	equ	0xFF3
  4350                           postinc0	equ	0xFEE
  4351                           wreg	equ	0xFE8
  4352                           postinc2	equ	0xFDE
  4353                           postdec2	equ	0xFDD
  4354                           fsr2h	equ	0xFDA
  4355                           fsr2l	equ	0xFD9
  4356                           status	equ	0xFD8
  4357                           
  4358 ;; *************** function ___ftsub *****************
  4359 ;; Defined at:
  4360 ;;		line 20 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/ftsub.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;  f1              3   57[COMRAM] float 
  4363 ;;  f2              3   60[COMRAM] float 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  3   57[COMRAM] float 
  4368 ;; Registers used:
  4369 ;;		wreg, status,2, status,0, cstack
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4375 ;;      Params:         6       0       0       0       0       0       0       0       0
  4376 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4378 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4379 ;;Total ram usage:        6 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    2
  4382 ;; This function calls:
  4383 ;;		___ftadd
  4384 ;; This function is called by:
  4385 ;;		_main
  4386 ;;		_printf
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text13
  4391  00269A                     __ptext13:
  4392                           	opt stack 0
  4393  00269A                     ___ftsub:
  4394                           	opt stack 27
  4395                           
  4396                           ;incstack = 0
  4397  00269A  503D               	movf	___ftsub@f2,w,c
  4398  00269C  103E               	iorwf	___ftsub@f2+1,w,c
  4399  00269E  103F               	iorwf	___ftsub@f2+2,w,c
  4400  0026A0  B4D8               	btfsc	status,2,c
  4401  0026A2  D006               	goto	l1563
  4402  0026A4  0E00               	movlw	0
  4403  0026A6  1A3D               	xorwf	___ftsub@f2,f,c
  4404  0026A8  0E00               	movlw	0
  4405  0026AA  1A3E               	xorwf	___ftsub@f2+1,f,c
  4406  0026AC  0E80               	movlw	128
  4407  0026AE  1A3F               	xorwf	___ftsub@f2+2,f,c
  4408  0026B0                     l1563:
  4409  0026B0  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4410  0026B4  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4411  0026B8  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4412  0026BC  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4413  0026C0  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4414  0026C4  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4415  0026C8  ECAF  F00B         	call	___ftadd	;wreg free
  4416  0026CC  C02E  F03A         	movff	?___ftadd,?___ftsub
  4417  0026D0  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4418  0026D4  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4419  0026D8  0012               	return	
  4420  0026DA                     __end_of___ftsub:
  4421                           	opt stack 0
  4422                           tblptru	equ	0xFF8
  4423                           tblptrh	equ	0xFF7
  4424                           tblptrl	equ	0xFF6
  4425                           tablat	equ	0xFF5
  4426                           prodh	equ	0xFF4
  4427                           prodl	equ	0xFF3
  4428                           postinc0	equ	0xFEE
  4429                           wreg	equ	0xFE8
  4430                           postinc2	equ	0xFDE
  4431                           postdec2	equ	0xFDD
  4432                           fsr2h	equ	0xFDA
  4433                           fsr2l	equ	0xFD9
  4434                           status	equ	0xFD8
  4435                           
  4436 ;; *************** function ___ftneg *****************
  4437 ;; Defined at:
  4438 ;;		line 15 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/ftneg.c"
  4439 ;; Parameters:    Size  Location     Type
  4440 ;;  f1              3    0[COMRAM] float 
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;		None
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  3    0[COMRAM] float 
  4445 ;; Registers used:
  4446 ;;		wreg, status,2, status,0
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4452 ;;      Params:         3       0       0       0       0       0       0       0       0
  4453 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4454 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4455 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4456 ;;Total ram usage:        3 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; This function calls:
  4459 ;;		Nothing
  4460 ;; This function is called by:
  4461 ;;		_main
  4462 ;;		_printf
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           	psect	text14
  4467  002738                     __ptext14:
  4468                           	opt stack 0
  4469  002738                     ___ftneg:
  4470                           	opt stack 29
  4471                           
  4472                           ;incstack = 0
  4473  002738  5001               	movf	___ftneg@f1,w,c
  4474  00273A  1002               	iorwf	___ftneg@f1+1,w,c
  4475  00273C  1003               	iorwf	___ftneg@f1+2,w,c
  4476  00273E  B4D8               	btfsc	status,2,c
  4477  002740  D006               	goto	l1557
  4478  002742  0E00               	movlw	0
  4479  002744  1A01               	xorwf	___ftneg@f1,f,c
  4480  002746  0E00               	movlw	0
  4481  002748  1A02               	xorwf	___ftneg@f1+1,f,c
  4482  00274A  0E80               	movlw	128
  4483  00274C  1A03               	xorwf	___ftneg@f1+2,f,c
  4484  00274E                     l1557:
  4485  00274E  C001  F001         	movff	___ftneg@f1,?___ftneg
  4486  002752  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4487  002756  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4488  00275A  0012               	return		;funcret
  4489  00275C                     __end_of___ftneg:
  4490                           	opt stack 0
  4491                           tblptru	equ	0xFF8
  4492                           tblptrh	equ	0xFF7
  4493                           tblptrl	equ	0xFF6
  4494                           tablat	equ	0xFF5
  4495                           prodh	equ	0xFF4
  4496                           prodl	equ	0xFF3
  4497                           postinc0	equ	0xFEE
  4498                           wreg	equ	0xFE8
  4499                           postinc2	equ	0xFDE
  4500                           postdec2	equ	0xFDD
  4501                           fsr2h	equ	0xFDA
  4502                           fsr2l	equ	0xFD9
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function ___ftge *****************
  4506 ;; Defined at:
  4507 ;;		line 4 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/ftge.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  ff1             3    0[COMRAM] float 
  4510 ;;  ff2             3    3[COMRAM] float 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;		None               void
  4515 ;; Registers used:
  4516 ;;		wreg, status,2, status,0
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4522 ;;      Params:         6       0       0       0       0       0       0       0       0
  4523 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4524 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4525 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4526 ;;Total ram usage:        9 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_main
  4532 ;;		_printf
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text15
  4537  0020BA                     __ptext15:
  4538                           	opt stack 0
  4539  0020BA                     ___ftge:
  4540                           	opt stack 29
  4541                           
  4542                           ;incstack = 0
  4543  0020BA  AE03               	btfss	___ftge@ff1+2,7,c
  4544  0020BC  D016               	goto	l1539
  4545  0020BE  C001  F007         	movff	___ftge@ff1,??___ftge
  4546  0020C2  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4547  0020C6  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4548  0020CA  1E07               	comf	??___ftge,f,c
  4549  0020CC  1E08               	comf	??___ftge+1,f,c
  4550  0020CE  1E09               	comf	??___ftge+2,f,c
  4551  0020D0  2A07               	incf	??___ftge,f,c
  4552  0020D2  0E00               	movlw	0
  4553  0020D4  2208               	addwfc	??___ftge+1,f,c
  4554  0020D6  2209               	addwfc	??___ftge+2,f,c
  4555  0020D8  0E00               	movlw	0
  4556  0020DA  2407               	addwf	??___ftge,w,c
  4557  0020DC  6E01               	movwf	___ftge@ff1,c
  4558  0020DE  0E00               	movlw	0
  4559  0020E0  2008               	addwfc	??___ftge+1,w,c
  4560  0020E2  6E02               	movwf	___ftge@ff1+1,c
  4561  0020E4  0E80               	movlw	128
  4562  0020E6  2009               	addwfc	??___ftge+2,w,c
  4563  0020E8  6E03               	movwf	___ftge@ff1+2,c
  4564  0020EA                     l1539:
  4565  0020EA  AE06               	btfss	___ftge@ff2+2,7,c
  4566  0020EC  D016               	goto	l1540
  4567  0020EE  C004  F007         	movff	___ftge@ff2,??___ftge
  4568  0020F2  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4569  0020F6  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4570  0020FA  1E07               	comf	??___ftge,f,c
  4571  0020FC  1E08               	comf	??___ftge+1,f,c
  4572  0020FE  1E09               	comf	??___ftge+2,f,c
  4573  002100  2A07               	incf	??___ftge,f,c
  4574  002102  0E00               	movlw	0
  4575  002104  2208               	addwfc	??___ftge+1,f,c
  4576  002106  2209               	addwfc	??___ftge+2,f,c
  4577  002108  0E00               	movlw	0
  4578  00210A  2407               	addwf	??___ftge,w,c
  4579  00210C  6E04               	movwf	___ftge@ff2,c
  4580  00210E  0E00               	movlw	0
  4581  002110  2008               	addwfc	??___ftge+1,w,c
  4582  002112  6E05               	movwf	___ftge@ff2+1,c
  4583  002114  0E80               	movlw	128
  4584  002116  2009               	addwfc	??___ftge+2,w,c
  4585  002118  6E06               	movwf	___ftge@ff2+2,c
  4586  00211A                     l1540:
  4587  00211A  0E00               	movlw	0
  4588  00211C  1A01               	xorwf	___ftge@ff1,f,c
  4589  00211E  0E00               	movlw	0
  4590  002120  1A02               	xorwf	___ftge@ff1+1,f,c
  4591  002122  0E80               	movlw	128
  4592  002124  1A03               	xorwf	___ftge@ff1+2,f,c
  4593  002126  0E00               	movlw	0
  4594  002128  1A04               	xorwf	___ftge@ff2,f,c
  4595  00212A  0E00               	movlw	0
  4596  00212C  1A05               	xorwf	___ftge@ff2+1,f,c
  4597  00212E  0E80               	movlw	128
  4598  002130  1A06               	xorwf	___ftge@ff2+2,f,c
  4599  002132  5004               	movf	___ftge@ff2,w,c
  4600  002134  5C01               	subwf	___ftge@ff1,w,c
  4601  002136  5005               	movf	___ftge@ff2+1,w,c
  4602  002138  5802               	subwfb	___ftge@ff1+1,w,c
  4603  00213A  5006               	movf	___ftge@ff2+2,w,c
  4604  00213C  5803               	subwfb	___ftge@ff1+2,w,c
  4605  00213E  B0D8               	btfsc	status,0,c
  4606  002140  D002               	goto	l3944
  4607  002142  90D8               	bcf	status,0,c
  4608  002144  0012               	return	
  4609  002146                     l3944:
  4610  002146  80D8               	bsf	status,0,c
  4611  002148  0012               	return	
  4612  00214A                     __end_of___ftge:
  4613                           	opt stack 0
  4614                           tblptru	equ	0xFF8
  4615                           tblptrh	equ	0xFF7
  4616                           tblptrl	equ	0xFF6
  4617                           tablat	equ	0xFF5
  4618                           prodh	equ	0xFF4
  4619                           prodl	equ	0xFF3
  4620                           postinc0	equ	0xFEE
  4621                           wreg	equ	0xFE8
  4622                           postinc2	equ	0xFDE
  4623                           postdec2	equ	0xFDD
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8
  4627                           
  4628 ;; *************** function _initIO *****************
  4629 ;; Defined at:
  4630 ;;		line 14 in file "Inits.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;		None
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;		None
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg, status,2
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4644 ;;      Params:         0       0       0       0       0       0       0       0       0
  4645 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4646 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4647 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4648 ;;Total ram usage:        0 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; This function calls:
  4651 ;;		Nothing
  4652 ;; This function is called by:
  4653 ;;		_main
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           	psect	text16
  4658  002780                     __ptext16:
  4659                           	opt stack 0
  4660  002780                     _initIO:
  4661                           	opt stack 30
  4662                           
  4663                           ;Inits.c: 15: TRISA = 0;
  4664                           
  4665                           ;incstack = 0
  4666  002780  0E00               	movlw	0
  4667  002782  6E92               	movwf	3986,c	;volatile
  4668                           
  4669                           ;Inits.c: 16: TRISB = 0x07;
  4670  002784  0E07               	movlw	7
  4671  002786  6E93               	movwf	3987,c	;volatile
  4672                           
  4673                           ;Inits.c: 17: TRISC1 = 1;
  4674  002788  8294               	bsf	3988,1,c	;volatile
  4675                           
  4676                           ;Inits.c: 18: TRISC2 = 0;
  4677  00278A  9494               	bcf	3988,2,c	;volatile
  4678                           
  4679                           ;Inits.c: 19: LATA=LATB=LATC=LATD=LATE=0x00;
  4680  00278C  0E00               	movlw	0
  4681  00278E  6E8D               	movwf	3981,c	;volatile
  4682  002790  CF8D FF8C          	movff	3981,3980	;volatile
  4683  002794  CF8C FF8B          	movff	3980,3979	;volatile
  4684  002798  CF8B FF8A          	movff	3979,3978	;volatile
  4685  00279C  CF8A FF89          	movff	3978,3977	;volatile
  4686  0027A0  0012               	return		;funcret
  4687  0027A2                     __end_of_initIO:
  4688                           	opt stack 0
  4689                           tblptru	equ	0xFF8
  4690                           tblptrh	equ	0xFF7
  4691                           tblptrl	equ	0xFF6
  4692                           tablat	equ	0xFF5
  4693                           prodh	equ	0xFF4
  4694                           prodl	equ	0xFF3
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           postinc2	equ	0xFDE
  4698                           postdec2	equ	0xFDD
  4699                           fsr2h	equ	0xFDA
  4700                           fsr2l	equ	0xFD9
  4701                           status	equ	0xFD8
  4702                           
  4703 ;; *************** function _initBT *****************
  4704 ;; Defined at:
  4705 ;;		line 22 in file "Inits.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;		None
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;		None
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  1    wreg      void 
  4712 ;; Registers used:
  4713 ;;		wreg, status,2, status,0, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4719 ;;      Params:         0       0       0       0       0       0       0       0       0
  4720 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4721 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4722 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4723 ;;Total ram usage:        1 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    3
  4726 ;; This function calls:
  4727 ;;		_USART_Init
  4728 ;; This function is called by:
  4729 ;;		_main
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           	psect	text17
  4734  00275C                     __ptext17:
  4735                           	opt stack 0
  4736  00275C                     _initBT:
  4737                           	opt stack 27
  4738                           
  4739                           ;Inits.c: 23: USART_Init(9600);
  4740                           
  4741                           ;incstack = 0
  4742  00275C  0E80               	movlw	128
  4743  00275E  6E3A               	movwf	USART_Init@baud_rate,c
  4744  002760  0E25               	movlw	37
  4745  002762  6E3B               	movwf	USART_Init@baud_rate+1,c
  4746  002764  0E00               	movlw	0
  4747  002766  6E3C               	movwf	USART_Init@baud_rate+2,c
  4748  002768  0E00               	movlw	0
  4749  00276A  6E3D               	movwf	USART_Init@baud_rate+3,c
  4750  00276C  ECE8  F011         	call	_USART_Init	;wreg free
  4751                           
  4752                           ;Inits.c: 24: _delay((unsigned long)((50)*(8000000/4000.0)));
  4753  002770  0E82               	movlw	130
  4754  002772  6E41               	movwf	??_initBT& (0+255),c
  4755  002774  0EDE               	movlw	222
  4756  002776                     u4347:
  4757  002776  2EE8               	decfsz	wreg,f,c
  4758  002778  D7FE               	bra	u4347
  4759  00277A  2E41               	decfsz	??_initBT& (0+255),f,c
  4760  00277C  D7FC               	bra	u4347
  4761  00277E  0012               	return		;funcret
  4762  002780                     __end_of_initBT:
  4763                           	opt stack 0
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           prodh	equ	0xFF4
  4769                           prodl	equ	0xFF3
  4770                           postinc0	equ	0xFEE
  4771                           wreg	equ	0xFE8
  4772                           postinc2	equ	0xFDE
  4773                           postdec2	equ	0xFDD
  4774                           fsr2h	equ	0xFDA
  4775                           fsr2l	equ	0xFD9
  4776                           status	equ	0xFD8
  4777                           
  4778 ;; *************** function _USART_Init *****************
  4779 ;; Defined at:
  4780 ;;		line 8 in file "USART_Source_File.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;  baud_rate       4   57[COMRAM] long 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  temp            3   61[COMRAM] float 
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg, status,2, status,0, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4794 ;;      Params:         4       0       0       0       0       0       0       0       0
  4795 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4797 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4798 ;;Total ram usage:        7 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    2
  4801 ;; This function calls:
  4802 ;;		___altoft
  4803 ;;		___ftadd
  4804 ;;		___ftdiv
  4805 ;;		___fttol
  4806 ;; This function is called by:
  4807 ;;		_initBT
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           	psect	text18
  4812  0023D0                     __ptext18:
  4813                           	opt stack 0
  4814  0023D0                     _USART_Init:
  4815                           	opt stack 27
  4816                           
  4817                           ;USART_Source_File.c: 10: float temp;
  4818                           ;USART_Source_File.c: 11: TRISC6=0;
  4819                           
  4820                           ;incstack = 0
  4821  0023D0  9C94               	bcf	3988,6,c	;volatile
  4822                           
  4823                           ;USART_Source_File.c: 12: TRISC7=1;
  4824  0023D2  8E94               	bsf	3988,7,c	;volatile
  4825                           
  4826                           ;USART_Source_File.c: 13: temp=(((float)(8000000/64)/(float)baud_rate)-1);
  4827  0023D4  C03A  F009         	movff	USART_Init@baud_rate,___altoft@c
  4828  0023D8  C03B  F00A         	movff	USART_Init@baud_rate+1,___altoft@c+1
  4829  0023DC  C03C  F00B         	movff	USART_Init@baud_rate+2,___altoft@c+2
  4830  0023E0  C03D  F00C         	movff	USART_Init@baud_rate+3,___altoft@c+3
  4831  0023E4  EC25  F012         	call	___altoft	;wreg free
  4832  0023E8  C009  F016         	movff	?___altoft,___ftdiv@f2
  4833  0023EC  C00A  F017         	movff	?___altoft+1,___ftdiv@f2+1
  4834  0023F0  C00B  F018         	movff	?___altoft+2,___ftdiv@f2+2
  4835  0023F4  0E24               	movlw	36
  4836  0023F6  6E13               	movwf	___ftdiv@f1,c
  4837  0023F8  0EF4               	movlw	244
  4838  0023FA  6E14               	movwf	___ftdiv@f1+1,c
  4839  0023FC  0E47               	movlw	71
  4840  0023FE  6E15               	movwf	___ftdiv@f1+2,c
  4841  002400  EC93  F00F         	call	___ftdiv	;wreg free
  4842  002404  C013  F02E         	movff	?___ftdiv,___ftadd@f1
  4843  002408  C014  F02F         	movff	?___ftdiv+1,___ftadd@f1+1
  4844  00240C  C015  F030         	movff	?___ftdiv+2,___ftadd@f1+2
  4845  002410  0E00               	movlw	0
  4846  002412  6E31               	movwf	___ftadd@f2,c
  4847  002414  0E80               	movlw	128
  4848  002416  6E32               	movwf	___ftadd@f2+1,c
  4849  002418  0EBF               	movlw	191
  4850  00241A  6E33               	movwf	___ftadd@f2+2,c
  4851  00241C  ECAF  F00B         	call	___ftadd	;wreg free
  4852  002420  C02E  F03E         	movff	?___ftadd,USART_Init@temp
  4853  002424  C02F  F03F         	movff	?___ftadd+1,USART_Init@temp+1
  4854  002428  C030  F040         	movff	?___ftadd+2,USART_Init@temp+2
  4855                           
  4856                           ;USART_Source_File.c: 14: SPBRG=(int)temp;
  4857  00242C  C03E  F02B         	movff	USART_Init@temp,___fttol@f1
  4858  002430  C03F  F02C         	movff	USART_Init@temp+1,___fttol@f1+1
  4859  002434  C040  F02D         	movff	USART_Init@temp+2,___fttol@f1+2
  4860  002438  EC2C  F00E         	call	___fttol	;wreg free
  4861  00243C  502B               	movf	?___fttol,w,c
  4862  00243E  6EAF               	movwf	4015,c	;volatile
  4863                           
  4864                           ;USART_Source_File.c: 15: TXSTA=0x20;
  4865  002440  0E20               	movlw	32
  4866  002442  6EAC               	movwf	4012,c	;volatile
  4867                           
  4868                           ;USART_Source_File.c: 16: RCSTA=0x90;
  4869  002444  0E90               	movlw	144
  4870  002446  6EAB               	movwf	4011,c	;volatile
  4871  002448  0012               	return		;funcret
  4872  00244A                     __end_of_USART_Init:
  4873                           	opt stack 0
  4874                           tblptru	equ	0xFF8
  4875                           tblptrh	equ	0xFF7
  4876                           tblptrl	equ	0xFF6
  4877                           tablat	equ	0xFF5
  4878                           prodh	equ	0xFF4
  4879                           prodl	equ	0xFF3
  4880                           postinc0	equ	0xFEE
  4881                           wreg	equ	0xFE8
  4882                           postinc2	equ	0xFDE
  4883                           postdec2	equ	0xFDD
  4884                           fsr2h	equ	0xFDA
  4885                           fsr2l	equ	0xFD9
  4886                           status	equ	0xFD8
  4887                           
  4888 ;; *************** function ___fttol *****************
  4889 ;; Defined at:
  4890 ;;		line 44 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/fttol.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;  f1              3   42[COMRAM] float 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  lval            4   52[COMRAM] unsigned long 
  4895 ;;  exp1            1   56[COMRAM] unsigned char 
  4896 ;;  sign1           1   51[COMRAM] unsigned char 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  4   42[COMRAM] long 
  4899 ;; Registers used:
  4900 ;;		wreg, status,2, status,0
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4906 ;;      Params:         4       0       0       0       0       0       0       0       0
  4907 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4908 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4909 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4910 ;;Total ram usage:       15 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; This function calls:
  4913 ;;		Nothing
  4914 ;; This function is called by:
  4915 ;;		_USART_Init
  4916 ;;		_printf
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text19
  4921  001C58                     __ptext19:
  4922                           	opt stack 0
  4923  001C58                     ___fttol:
  4924                           	opt stack 29
  4925                           
  4926                           ;incstack = 0
  4927  001C58  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4928  001C5C  6A30               	clrf	(??___fttol+1)& (0+255),c
  4929  001C5E  6A31               	clrf	(??___fttol+2)& (0+255),c
  4930  001C60  342C               	rlcf	___fttol@f1+1,w,c
  4931  001C62  362F               	rlcf	??___fttol& (0+255),f,c
  4932  001C64  E301               	bnc	u3041
  4933  001C66  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4934  001C68                     u3041:
  4935  001C68  502F               	movf	??___fttol,w,c
  4936  001C6A  6E39               	movwf	___fttol@exp1,c
  4937  001C6C  5039               	movf	___fttol@exp1,w,c
  4938  001C6E  A4D8               	btfss	status,2,c
  4939  001C70  D009               	goto	l1567
  4940  001C72  0E00               	movlw	0
  4941  001C74  6E2B               	movwf	?___fttol,c
  4942  001C76  0E00               	movlw	0
  4943  001C78  6E2C               	movwf	?___fttol+1,c
  4944  001C7A  0E00               	movlw	0
  4945  001C7C  6E2D               	movwf	?___fttol+2,c
  4946  001C7E  0E00               	movlw	0
  4947  001C80  6E2E               	movwf	?___fttol+3,c
  4948  001C82  0012               	return	
  4949  001C84                     l1567:
  4950  001C84  0E17               	movlw	23
  4951  001C86  6E2F               	movwf	??___fttol& (0+255),c
  4952  001C88  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4953  001C8C  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4954  001C90  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4955  001C94  282F               	incf	??___fttol,w,c
  4956  001C96  6E33               	movwf	(??___fttol+4)& (0+255),c
  4957  001C98  D004               	goto	u3060
  4958  001C9A                     u3065:
  4959  001C9A  90D8               	bcf	status,0,c
  4960  001C9C  3232               	rrcf	??___fttol+3,f,c
  4961  001C9E  3231               	rrcf	??___fttol+2,f,c
  4962  001CA0  3230               	rrcf	??___fttol+1,f,c
  4963  001CA2                     u3060:
  4964  001CA2  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4965  001CA4  D7FA               	goto	u3065
  4966  001CA6  5030               	movf	??___fttol+1,w,c
  4967  001CA8  6E34               	movwf	___fttol@sign1,c
  4968  001CAA  8E2C               	bsf	___fttol@f1+1,7,c
  4969  001CAC  0EFF               	movlw	255
  4970  001CAE  162B               	andwf	___fttol@f1,f,c
  4971  001CB0  0EFF               	movlw	255
  4972  001CB2  162C               	andwf	___fttol@f1+1,f,c
  4973  001CB4  0E00               	movlw	0
  4974  001CB6  162D               	andwf	___fttol@f1+2,f,c
  4975  001CB8  502B               	movf	___fttol@f1,w,c
  4976  001CBA  6E35               	movwf	___fttol@lval,c
  4977  001CBC  502C               	movf	___fttol@f1+1,w,c
  4978  001CBE  6E36               	movwf	___fttol@lval+1,c
  4979  001CC0  502D               	movf	___fttol@f1+2,w,c
  4980  001CC2  6E37               	movwf	___fttol@lval+2,c
  4981  001CC4  6A38               	clrf	___fttol@lval+3,c
  4982  001CC6  0E8E               	movlw	142
  4983  001CC8  5E39               	subwf	___fttol@exp1,f,c
  4984  001CCA  AE39               	btfss	___fttol@exp1,7,c
  4985  001CCC  D016               	goto	l1569
  4986  001CCE  5039               	movf	___fttol@exp1,w,c
  4987  001CD0  0A80               	xorlw	128
  4988  001CD2  0F8F               	addlw	143
  4989  001CD4  B0D8               	btfsc	status,0,c
  4990  001CD6  D009               	goto	l1570
  4991  001CD8  0E00               	movlw	0
  4992  001CDA  6E2B               	movwf	?___fttol,c
  4993  001CDC  0E00               	movlw	0
  4994  001CDE  6E2C               	movwf	?___fttol+1,c
  4995  001CE0  0E00               	movlw	0
  4996  001CE2  6E2D               	movwf	?___fttol+2,c
  4997  001CE4  0E00               	movlw	0
  4998  001CE6  6E2E               	movwf	?___fttol+3,c
  4999  001CE8  0012               	return	
  5000  001CEA                     l1570:
  5001  001CEA  90D8               	bcf	status,0,c
  5002  001CEC  3238               	rrcf	___fttol@lval+3,f,c
  5003  001CEE  3237               	rrcf	___fttol@lval+2,f,c
  5004  001CF0  3236               	rrcf	___fttol@lval+1,f,c
  5005  001CF2  3235               	rrcf	___fttol@lval,f,c
  5006  001CF4  3E39               	incfsz	___fttol@exp1,f,c
  5007  001CF6  D7F9               	goto	l1570
  5008  001CF8  D015               	goto	u3100
  5009  001CFA                     l1569:
  5010  001CFA  0E17               	movlw	23
  5011  001CFC  6439               	cpfsgt	___fttol@exp1,c
  5012  001CFE  D00F               	goto	l1575
  5013  001D00  0E00               	movlw	0
  5014  001D02  6E2B               	movwf	?___fttol,c
  5015  001D04  0E00               	movlw	0
  5016  001D06  6E2C               	movwf	?___fttol+1,c
  5017  001D08  0E00               	movlw	0
  5018  001D0A  6E2D               	movwf	?___fttol+2,c
  5019  001D0C  0E00               	movlw	0
  5020  001D0E  6E2E               	movwf	?___fttol+3,c
  5021  001D10  0012               	return	
  5022  001D12  90D8               	bcf	status,0,c
  5023  001D14  3635               	rlcf	___fttol@lval,f,c
  5024  001D16  3636               	rlcf	___fttol@lval+1,f,c
  5025  001D18  3637               	rlcf	___fttol@lval+2,f,c
  5026  001D1A  3638               	rlcf	___fttol@lval+3,f,c
  5027  001D1C  0639               	decf	___fttol@exp1,f,c
  5028  001D1E                     l1575:
  5029  001D1E  5039               	movf	___fttol@exp1,w,c
  5030  001D20  A4D8               	btfss	status,2,c
  5031  001D22  D7F7               	goto	l1576
  5032  001D24                     u3100:
  5033  001D24  5034               	movf	___fttol@sign1,w,c
  5034  001D26  B4D8               	btfsc	status,2,c
  5035  001D28  D008               	goto	l1578
  5036  001D2A  1E38               	comf	___fttol@lval+3,f,c
  5037  001D2C  1E37               	comf	___fttol@lval+2,f,c
  5038  001D2E  1E36               	comf	___fttol@lval+1,f,c
  5039  001D30  6C35               	negf	___fttol@lval,c
  5040  001D32  0E00               	movlw	0
  5041  001D34  2236               	addwfc	___fttol@lval+1,f,c
  5042  001D36  2237               	addwfc	___fttol@lval+2,f,c
  5043  001D38  2238               	addwfc	___fttol@lval+3,f,c
  5044  001D3A                     l1578:
  5045  001D3A  C035  F02B         	movff	___fttol@lval,?___fttol
  5046  001D3E  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5047  001D42  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5048  001D46  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5049  001D4A  0012               	return	
  5050  001D4C                     __end_of___fttol:
  5051                           	opt stack 0
  5052                           tblptru	equ	0xFF8
  5053                           tblptrh	equ	0xFF7
  5054                           tblptrl	equ	0xFF6
  5055                           tablat	equ	0xFF5
  5056                           prodh	equ	0xFF4
  5057                           prodl	equ	0xFF3
  5058                           postinc0	equ	0xFEE
  5059                           wreg	equ	0xFE8
  5060                           postinc2	equ	0xFDE
  5061                           postdec2	equ	0xFDD
  5062                           fsr2h	equ	0xFDA
  5063                           fsr2l	equ	0xFD9
  5064                           status	equ	0xFD8
  5065                           
  5066 ;; *************** function ___ftdiv *****************
  5067 ;; Defined at:
  5068 ;;		line 54 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/ftdiv.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  f1              3   18[COMRAM] float 
  5071 ;;  f2              3   21[COMRAM] float 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  f3              3   28[COMRAM] float 
  5074 ;;  sign            1   32[COMRAM] unsigned char 
  5075 ;;  exp             1   31[COMRAM] unsigned char 
  5076 ;;  cntr            1   27[COMRAM] unsigned char 
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  3   18[COMRAM] float 
  5079 ;; Registers used:
  5080 ;;		wreg, status,2, status,0, cstack
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5086 ;;      Params:         6       0       0       0       0       0       0       0       0
  5087 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5088 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5089 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5090 ;;Total ram usage:       15 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    1
  5093 ;; This function calls:
  5094 ;;		___ftpack
  5095 ;; This function is called by:
  5096 ;;		_USART_Init
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           	psect	text20
  5101  001F26                     __ptext20:
  5102                           	opt stack 0
  5103  001F26                     ___ftdiv:
  5104                           	opt stack 27
  5105                           
  5106                           ;incstack = 0
  5107  001F26  C015  F019         	movff	___ftdiv@f1+2,??___ftdiv
  5108  001F2A  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  5109  001F2C  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  5110  001F2E  3414               	rlcf	___ftdiv@f1+1,w,c
  5111  001F30  3619               	rlcf	??___ftdiv& (0+255),f,c
  5112  001F32  E301               	bnc	u2811
  5113  001F34  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  5114  001F36                     u2811:
  5115  001F36  5019               	movf	??___ftdiv,w,c
  5116  001F38  6E20               	movwf	___ftdiv@exp,c
  5117  001F3A  5020               	movf	___ftdiv@exp,w,c
  5118  001F3C  A4D8               	btfss	status,2,c
  5119  001F3E  D007               	goto	l1514
  5120  001F40  0E00               	movlw	0
  5121  001F42  6E13               	movwf	?___ftdiv,c
  5122  001F44  0E00               	movlw	0
  5123  001F46  6E14               	movwf	?___ftdiv+1,c
  5124  001F48  0E00               	movlw	0
  5125  001F4A  6E15               	movwf	?___ftdiv+2,c
  5126  001F4C  0012               	return	
  5127  001F4E                     l1514:
  5128  001F4E  C018  F019         	movff	___ftdiv@f2+2,??___ftdiv
  5129  001F52  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  5130  001F54  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  5131  001F56  3417               	rlcf	___ftdiv@f2+1,w,c
  5132  001F58  3619               	rlcf	??___ftdiv& (0+255),f,c
  5133  001F5A  E301               	bnc	u2831
  5134  001F5C  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  5135  001F5E                     u2831:
  5136  001F5E  5019               	movf	??___ftdiv,w,c
  5137  001F60  6E21               	movwf	___ftdiv@sign,c
  5138  001F62  5021               	movf	___ftdiv@sign,w,c
  5139  001F64  A4D8               	btfss	status,2,c
  5140  001F66  D007               	goto	l1516
  5141  001F68  0E00               	movlw	0
  5142  001F6A  6E13               	movwf	?___ftdiv,c
  5143  001F6C  0E00               	movlw	0
  5144  001F6E  6E14               	movwf	?___ftdiv+1,c
  5145  001F70  0E00               	movlw	0
  5146  001F72  6E15               	movwf	?___ftdiv+2,c
  5147  001F74  0012               	return	
  5148  001F76                     l1516:
  5149  001F76  0E00               	movlw	0
  5150  001F78  6E1D               	movwf	___ftdiv@f3,c
  5151  001F7A  0E00               	movlw	0
  5152  001F7C  6E1E               	movwf	___ftdiv@f3+1,c
  5153  001F7E  0E00               	movlw	0
  5154  001F80  6E1F               	movwf	___ftdiv@f3+2,c
  5155  001F82  5021               	movf	___ftdiv@sign,w,c
  5156  001F84  0F89               	addlw	137
  5157  001F86  5E20               	subwf	___ftdiv@exp,f,c
  5158  001F88  C015  F021         	movff	___ftdiv@f1+2,___ftdiv@sign
  5159  001F8C  5018               	movf	___ftdiv@f2+2,w,c
  5160  001F8E  1A21               	xorwf	___ftdiv@sign,f,c
  5161  001F90  0E80               	movlw	128
  5162  001F92  1621               	andwf	___ftdiv@sign,f,c
  5163  001F94  8E14               	bsf	___ftdiv@f1+1,7,c
  5164  001F96  0EFF               	movlw	255
  5165  001F98  1613               	andwf	___ftdiv@f1,f,c
  5166  001F9A  0EFF               	movlw	255
  5167  001F9C  1614               	andwf	___ftdiv@f1+1,f,c
  5168  001F9E  0E00               	movlw	0
  5169  001FA0  1615               	andwf	___ftdiv@f1+2,f,c
  5170  001FA2  8E17               	bsf	___ftdiv@f2+1,7,c
  5171  001FA4  0EFF               	movlw	255
  5172  001FA6  1616               	andwf	___ftdiv@f2,f,c
  5173  001FA8  0EFF               	movlw	255
  5174  001FAA  1617               	andwf	___ftdiv@f2+1,f,c
  5175  001FAC  0E00               	movlw	0
  5176  001FAE  1618               	andwf	___ftdiv@f2+2,f,c
  5177  001FB0  0E18               	movlw	24
  5178  001FB2  6E1C               	movwf	___ftdiv@cntr,c
  5179  001FB4  90D8               	bcf	status,0,c
  5180  001FB6  361D               	rlcf	___ftdiv@f3,f,c
  5181  001FB8  361E               	rlcf	___ftdiv@f3+1,f,c
  5182  001FBA  361F               	rlcf	___ftdiv@f3+2,f,c
  5183  001FBC  5016               	movf	___ftdiv@f2,w,c
  5184  001FBE  5C13               	subwf	___ftdiv@f1,w,c
  5185  001FC0  5017               	movf	___ftdiv@f2+1,w,c
  5186  001FC2  5814               	subwfb	___ftdiv@f1+1,w,c
  5187  001FC4  5018               	movf	___ftdiv@f2+2,w,c
  5188  001FC6  5815               	subwfb	___ftdiv@f1+2,w,c
  5189  001FC8  A0D8               	btfss	status,0,c
  5190  001FCA  D007               	goto	l1518
  5191  001FCC  5016               	movf	___ftdiv@f2,w,c
  5192  001FCE  5E13               	subwf	___ftdiv@f1,f,c
  5193  001FD0  5017               	movf	___ftdiv@f2+1,w,c
  5194  001FD2  5A14               	subwfb	___ftdiv@f1+1,f,c
  5195  001FD4  5018               	movf	___ftdiv@f2+2,w,c
  5196  001FD6  5A15               	subwfb	___ftdiv@f1+2,f,c
  5197  001FD8  801D               	bsf	___ftdiv@f3,0,c
  5198  001FDA                     l1518:
  5199  001FDA  90D8               	bcf	status,0,c
  5200  001FDC  3613               	rlcf	___ftdiv@f1,f,c
  5201  001FDE  3614               	rlcf	___ftdiv@f1+1,f,c
  5202  001FE0  3615               	rlcf	___ftdiv@f1+2,f,c
  5203  001FE2  2E1C               	decfsz	___ftdiv@cntr,f,c
  5204  001FE4  D7E7               	goto	l1517
  5205  001FE6  C01D  F001         	movff	___ftdiv@f3,___ftpack@arg
  5206  001FEA  C01E  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5207  001FEE  C01F  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5208  001FF2  C020  F004         	movff	___ftdiv@exp,___ftpack@exp
  5209  001FF6  C021  F005         	movff	___ftdiv@sign,___ftpack@sign
  5210  001FFA  EC06  F010         	call	___ftpack	;wreg free
  5211  001FFE  C001  F013         	movff	?___ftpack,?___ftdiv
  5212  002002  C002  F014         	movff	?___ftpack+1,?___ftdiv+1
  5213  002006  C003  F015         	movff	?___ftpack+2,?___ftdiv+2
  5214  00200A  0012               	return	
  5215  00200C                     __end_of___ftdiv:
  5216                           	opt stack 0
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           prodh	equ	0xFF4
  5222                           prodl	equ	0xFF3
  5223                           postinc0	equ	0xFEE
  5224                           wreg	equ	0xFE8
  5225                           postinc2	equ	0xFDE
  5226                           postdec2	equ	0xFDD
  5227                           fsr2h	equ	0xFDA
  5228                           fsr2l	equ	0xFD9
  5229                           status	equ	0xFD8
  5230                           
  5231 ;; *************** function ___ftadd *****************
  5232 ;; Defined at:
  5233 ;;		line 86 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/ftadd.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;  f1              3   45[COMRAM] float 
  5236 ;;  f2              3   48[COMRAM] float 
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;  exp1            1   56[COMRAM] unsigned char 
  5239 ;;  exp2            1   55[COMRAM] unsigned char 
  5240 ;;  sign            1   54[COMRAM] unsigned char 
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  3   45[COMRAM] float 
  5243 ;; Registers used:
  5244 ;;		wreg, status,2, status,0, cstack
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5250 ;;      Params:         6       0       0       0       0       0       0       0       0
  5251 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5252 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5253 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5254 ;;Total ram usage:       12 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; Hardware stack levels required when called:    1
  5257 ;; This function calls:
  5258 ;;		___ftpack
  5259 ;; This function is called by:
  5260 ;;		_main
  5261 ;;		_USART_Init
  5262 ;;		_printf
  5263 ;;		___ftsub
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           	psect	text21
  5268  00175E                     __ptext21:
  5269                           	opt stack 0
  5270  00175E                     ___ftadd:
  5271                           	opt stack 27
  5272                           
  5273                           ;incstack = 0
  5274  00175E  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5275  001762  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5276  001764  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5277  001766  342F               	rlcf	___ftadd@f1+1,w,c
  5278  001768  3634               	rlcf	??___ftadd& (0+255),f,c
  5279  00176A  E301               	bnc	u2601
  5280  00176C  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5281  00176E                     u2601:
  5282  00176E  5034               	movf	??___ftadd,w,c
  5283  001770  6E39               	movwf	___ftadd@exp1,c
  5284  001772  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5285  001776  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5286  001778  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5287  00177A  3432               	rlcf	___ftadd@f2+1,w,c
  5288  00177C  3634               	rlcf	??___ftadd& (0+255),f,c
  5289  00177E  E301               	bnc	u2611
  5290  001780  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5291  001782                     u2611:
  5292  001782  5034               	movf	??___ftadd,w,c
  5293  001784  6E38               	movwf	___ftadd@exp2,c
  5294  001786  5039               	movf	___ftadd@exp1,w,c
  5295  001788  B4D8               	btfsc	status,2,c
  5296  00178A  D00B               	goto	u2640
  5297  00178C  5038               	movf	___ftadd@exp2,w,c
  5298  00178E  5C39               	subwf	___ftadd@exp1,w,c
  5299  001790  B0D8               	btfsc	status,0,c
  5300  001792  D00E               	goto	l1481
  5301  001794  5039               	movf	___ftadd@exp1,w,c
  5302  001796  0800               	sublw	0
  5303  001798  2438               	addwf	___ftadd@exp2,w,c
  5304  00179A  6E34               	movwf	??___ftadd& (0+255),c
  5305  00179C  0E18               	movlw	24
  5306  00179E  6434               	cpfsgt	??___ftadd,c
  5307  0017A0  D007               	goto	l1481
  5308  0017A2                     u2640:
  5309  0017A2  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5310  0017A6  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5311  0017AA  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5312  0017AE  0012               	return	
  5313  0017B0                     l1481:
  5314  0017B0  5038               	movf	___ftadd@exp2,w,c
  5315  0017B2  B4D8               	btfsc	status,2,c
  5316  0017B4  D00B               	goto	u2670
  5317  0017B6  5039               	movf	___ftadd@exp1,w,c
  5318  0017B8  5C38               	subwf	___ftadd@exp2,w,c
  5319  0017BA  B0D8               	btfsc	status,0,c
  5320  0017BC  D00E               	goto	l1485
  5321  0017BE  5038               	movf	___ftadd@exp2,w,c
  5322  0017C0  0800               	sublw	0
  5323  0017C2  2439               	addwf	___ftadd@exp1,w,c
  5324  0017C4  6E34               	movwf	??___ftadd& (0+255),c
  5325  0017C6  0E18               	movlw	24
  5326  0017C8  6434               	cpfsgt	??___ftadd,c
  5327  0017CA  D007               	goto	l1485
  5328  0017CC                     u2670:
  5329  0017CC  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5330  0017D0  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5331  0017D4  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5332  0017D8  0012               	return	
  5333  0017DA                     l1485:
  5334  0017DA  0E06               	movlw	6
  5335  0017DC  6E37               	movwf	___ftadd@sign,c
  5336  0017DE  BE30               	btfsc	___ftadd@f1+2,7,c
  5337  0017E0  8E37               	bsf	___ftadd@sign,7,c
  5338  0017E2  BE33               	btfsc	___ftadd@f2+2,7,c
  5339  0017E4  8C37               	bsf	___ftadd@sign,6,c
  5340  0017E6  8E2F               	bsf	___ftadd@f1+1,7,c
  5341  0017E8  0EFF               	movlw	255
  5342  0017EA  162E               	andwf	___ftadd@f1,f,c
  5343  0017EC  0EFF               	movlw	255
  5344  0017EE  162F               	andwf	___ftadd@f1+1,f,c
  5345  0017F0  0E00               	movlw	0
  5346  0017F2  1630               	andwf	___ftadd@f1+2,f,c
  5347  0017F4  8E32               	bsf	___ftadd@f2+1,7,c
  5348  0017F6  0EFF               	movlw	255
  5349  0017F8  1631               	andwf	___ftadd@f2,f,c
  5350  0017FA  0EFF               	movlw	255
  5351  0017FC  1632               	andwf	___ftadd@f2+1,f,c
  5352  0017FE  0E00               	movlw	0
  5353  001800  1633               	andwf	___ftadd@f2+2,f,c
  5354  001802  5038               	movf	___ftadd@exp2,w,c
  5355  001804  5C39               	subwf	___ftadd@exp1,w,c
  5356  001806  B0D8               	btfsc	status,0,c
  5357  001808  D01B               	goto	l1490
  5358  00180A                     u2700:
  5359  00180A  90D8               	bcf	status,0,c
  5360  00180C  3631               	rlcf	___ftadd@f2,f,c
  5361  00180E  3632               	rlcf	___ftadd@f2+1,f,c
  5362  001810  3633               	rlcf	___ftadd@f2+2,f,c
  5363  001812  0638               	decf	___ftadd@exp2,f,c
  5364  001814  5039               	movf	___ftadd@exp1,w,c
  5365  001816  1838               	xorwf	___ftadd@exp2,w,c
  5366  001818  B4D8               	btfsc	status,2,c
  5367  00181A  D00D               	goto	l1495
  5368  00181C  0637               	decf	___ftadd@sign,f,c
  5369  00181E  C037  F034         	movff	___ftadd@sign,??___ftadd
  5370  001822  0E07               	movlw	7
  5371  001824  1634               	andwf	??___ftadd,f,c
  5372  001826  B4D8               	btfsc	status,2,c
  5373  001828  D006               	goto	l1495
  5374  00182A  D7EF               	goto	u2700
  5375  00182C  90D8               	bcf	status,0,c
  5376  00182E  3230               	rrcf	___ftadd@f1+2,f,c
  5377  001830  322F               	rrcf	___ftadd@f1+1,f,c
  5378  001832  322E               	rrcf	___ftadd@f1,f,c
  5379  001834  2A39               	incf	___ftadd@exp1,f,c
  5380  001836                     l1495:
  5381  001836  5038               	movf	___ftadd@exp2,w,c
  5382  001838  1839               	xorwf	___ftadd@exp1,w,c
  5383  00183A  B4D8               	btfsc	status,2,c
  5384  00183C  D01F               	goto	u2770
  5385  00183E  D7F6               	goto	l1496
  5386  001840                     l1490:
  5387  001840  5039               	movf	___ftadd@exp1,w,c
  5388  001842  5C38               	subwf	___ftadd@exp2,w,c
  5389  001844  B0D8               	btfsc	status,0,c
  5390  001846  D01A               	goto	u2770
  5391  001848                     u2740:
  5392  001848  90D8               	bcf	status,0,c
  5393  00184A  362E               	rlcf	___ftadd@f1,f,c
  5394  00184C  362F               	rlcf	___ftadd@f1+1,f,c
  5395  00184E  3630               	rlcf	___ftadd@f1+2,f,c
  5396  001850  0639               	decf	___ftadd@exp1,f,c
  5397  001852  5039               	movf	___ftadd@exp1,w,c
  5398  001854  1838               	xorwf	___ftadd@exp2,w,c
  5399  001856  B4D8               	btfsc	status,2,c
  5400  001858  D00D               	goto	l1504
  5401  00185A  0637               	decf	___ftadd@sign,f,c
  5402  00185C  C037  F034         	movff	___ftadd@sign,??___ftadd
  5403  001860  0E07               	movlw	7
  5404  001862  1634               	andwf	??___ftadd,f,c
  5405  001864  B4D8               	btfsc	status,2,c
  5406  001866  D006               	goto	l1504
  5407  001868  D7EF               	goto	u2740
  5408  00186A  90D8               	bcf	status,0,c
  5409  00186C  3233               	rrcf	___ftadd@f2+2,f,c
  5410  00186E  3232               	rrcf	___ftadd@f2+1,f,c
  5411  001870  3231               	rrcf	___ftadd@f2,f,c
  5412  001872  2A38               	incf	___ftadd@exp2,f,c
  5413  001874                     l1504:
  5414  001874  5038               	movf	___ftadd@exp2,w,c
  5415  001876  1839               	xorwf	___ftadd@exp1,w,c
  5416  001878  A4D8               	btfss	status,2,c
  5417  00187A  D7F7               	goto	l1505
  5418  00187C                     u2770:
  5419  00187C  AE37               	btfss	___ftadd@sign,7,c
  5420  00187E  D00C               	goto	l1507
  5421  001880  0EFF               	movlw	255
  5422  001882  1A2E               	xorwf	___ftadd@f1,f,c
  5423  001884  0EFF               	movlw	255
  5424  001886  1A2F               	xorwf	___ftadd@f1+1,f,c
  5425  001888  0EFF               	movlw	255
  5426  00188A  1A30               	xorwf	___ftadd@f1+2,f,c
  5427  00188C  0E01               	movlw	1
  5428  00188E  262E               	addwf	___ftadd@f1,f,c
  5429  001890  0E00               	movlw	0
  5430  001892  222F               	addwfc	___ftadd@f1+1,f,c
  5431  001894  0E00               	movlw	0
  5432  001896  2230               	addwfc	___ftadd@f1+2,f,c
  5433  001898                     l1507:
  5434  001898  AC37               	btfss	___ftadd@sign,6,c
  5435  00189A  D00C               	goto	l1508
  5436  00189C  0EFF               	movlw	255
  5437  00189E  1A31               	xorwf	___ftadd@f2,f,c
  5438  0018A0  0EFF               	movlw	255
  5439  0018A2  1A32               	xorwf	___ftadd@f2+1,f,c
  5440  0018A4  0EFF               	movlw	255
  5441  0018A6  1A33               	xorwf	___ftadd@f2+2,f,c
  5442  0018A8  0E01               	movlw	1
  5443  0018AA  2631               	addwf	___ftadd@f2,f,c
  5444  0018AC  0E00               	movlw	0
  5445  0018AE  2232               	addwfc	___ftadd@f2+1,f,c
  5446  0018B0  0E00               	movlw	0
  5447  0018B2  2233               	addwfc	___ftadd@f2+2,f,c
  5448  0018B4                     l1508:
  5449  0018B4  0E00               	movlw	0
  5450  0018B6  6E37               	movwf	___ftadd@sign,c
  5451  0018B8  502E               	movf	___ftadd@f1,w,c
  5452  0018BA  2631               	addwf	___ftadd@f2,f,c
  5453  0018BC  502F               	movf	___ftadd@f1+1,w,c
  5454  0018BE  2232               	addwfc	___ftadd@f2+1,f,c
  5455  0018C0  5030               	movf	___ftadd@f1+2,w,c
  5456  0018C2  2233               	addwfc	___ftadd@f2+2,f,c
  5457  0018C4  AE33               	btfss	___ftadd@f2+2,7,c
  5458  0018C6  D00E               	goto	l1509
  5459  0018C8  0EFF               	movlw	255
  5460  0018CA  1A31               	xorwf	___ftadd@f2,f,c
  5461  0018CC  0EFF               	movlw	255
  5462  0018CE  1A32               	xorwf	___ftadd@f2+1,f,c
  5463  0018D0  0EFF               	movlw	255
  5464  0018D2  1A33               	xorwf	___ftadd@f2+2,f,c
  5465  0018D4  0E01               	movlw	1
  5466  0018D6  2631               	addwf	___ftadd@f2,f,c
  5467  0018D8  0E00               	movlw	0
  5468  0018DA  2232               	addwfc	___ftadd@f2+1,f,c
  5469  0018DC  0E00               	movlw	0
  5470  0018DE  2233               	addwfc	___ftadd@f2+2,f,c
  5471  0018E0  0E01               	movlw	1
  5472  0018E2  6E37               	movwf	___ftadd@sign,c
  5473  0018E4                     l1509:
  5474  0018E4  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5475  0018E8  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5476  0018EC  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5477  0018F0  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5478  0018F4  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5479  0018F8  EC06  F010         	call	___ftpack	;wreg free
  5480  0018FC  C001  F02E         	movff	?___ftpack,?___ftadd
  5481  001900  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5482  001904  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5483  001908  0012               	return	
  5484  00190A                     __end_of___ftadd:
  5485                           	opt stack 0
  5486                           tblptru	equ	0xFF8
  5487                           tblptrh	equ	0xFF7
  5488                           tblptrl	equ	0xFF6
  5489                           tablat	equ	0xFF5
  5490                           prodh	equ	0xFF4
  5491                           prodl	equ	0xFF3
  5492                           postinc0	equ	0xFEE
  5493                           wreg	equ	0xFE8
  5494                           postinc2	equ	0xFDE
  5495                           postdec2	equ	0xFDD
  5496                           fsr2h	equ	0xFDA
  5497                           fsr2l	equ	0xFD9
  5498                           status	equ	0xFD8
  5499                           
  5500 ;; *************** function ___altoft *****************
  5501 ;; Defined at:
  5502 ;;		line 42 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/altoft.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  c               4    8[COMRAM] long 
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;  sign            1   17[COMRAM] unsigned char 
  5507 ;;  exp             1   16[COMRAM] unsigned char 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  3    8[COMRAM] float 
  5510 ;; Registers used:
  5511 ;;		wreg, status,2, status,0, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5517 ;;      Params:         4       0       0       0       0       0       0       0       0
  5518 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5519 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5520 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5521 ;;Total ram usage:       10 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    1
  5524 ;; This function calls:
  5525 ;;		___ftpack
  5526 ;; This function is called by:
  5527 ;;		_USART_Init
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           	psect	text22
  5532  00244A                     __ptext22:
  5533                           	opt stack 0
  5534  00244A                     ___altoft:
  5535                           	opt stack 27
  5536                           
  5537                           ;incstack = 0
  5538  00244A  0E00               	movlw	0
  5539  00244C  6E12               	movwf	___altoft@sign,c
  5540  00244E  0E8E               	movlw	142
  5541  002450  6E11               	movwf	___altoft@exp,c
  5542  002452  AE0C               	btfss	___altoft@c+3,7,c
  5543  002454  D011               	goto	l1303
  5544  002456  1E0C               	comf	___altoft@c+3,f,c
  5545  002458  1E0B               	comf	___altoft@c+2,f,c
  5546  00245A  1E0A               	comf	___altoft@c+1,f,c
  5547  00245C  6C09               	negf	___altoft@c,c
  5548  00245E  0E00               	movlw	0
  5549  002460  220A               	addwfc	___altoft@c+1,f,c
  5550  002462  220B               	addwfc	___altoft@c+2,f,c
  5551  002464  220C               	addwfc	___altoft@c+3,f,c
  5552  002466  0E01               	movlw	1
  5553  002468  6E12               	movwf	___altoft@sign,c
  5554  00246A  D006               	goto	l1303
  5555  00246C  90D8               	bcf	status,0,c
  5556  00246E  320C               	rrcf	___altoft@c+3,f,c
  5557  002470  320B               	rrcf	___altoft@c+2,f,c
  5558  002472  320A               	rrcf	___altoft@c+1,f,c
  5559  002474  3209               	rrcf	___altoft@c,f,c
  5560  002476  2A11               	incf	___altoft@exp,f,c
  5561  002478                     l1303:
  5562  002478  0E00               	movlw	0
  5563  00247A  1409               	andwf	___altoft@c,w,c
  5564  00247C  6E0D               	movwf	??___altoft& (0+255),c
  5565  00247E  0E00               	movlw	0
  5566  002480  140A               	andwf	___altoft@c+1,w,c
  5567  002482  6E0E               	movwf	(??___altoft+1)& (0+255),c
  5568  002484  0E00               	movlw	0
  5569  002486  140B               	andwf	___altoft@c+2,w,c
  5570  002488  6E0F               	movwf	(??___altoft+2)& (0+255),c
  5571  00248A  0EFF               	movlw	255
  5572  00248C  140C               	andwf	___altoft@c+3,w,c
  5573  00248E  6E10               	movwf	(??___altoft+3)& (0+255),c
  5574  002490  500D               	movf	??___altoft,w,c
  5575  002492  100E               	iorwf	??___altoft+1,w,c
  5576  002494  100F               	iorwf	??___altoft+2,w,c
  5577  002496  1010               	iorwf	??___altoft+3,w,c
  5578  002498  A4D8               	btfss	status,2,c
  5579  00249A  D7E8               	goto	l1304
  5580  00249C  C009  F001         	movff	___altoft@c,___ftpack@arg
  5581  0024A0  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  5582  0024A4  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  5583  0024A8  C011  F004         	movff	___altoft@exp,___ftpack@exp
  5584  0024AC  C012  F005         	movff	___altoft@sign,___ftpack@sign
  5585  0024B0  EC06  F010         	call	___ftpack	;wreg free
  5586  0024B4  C001  F009         	movff	?___ftpack,?___altoft
  5587  0024B8  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  5588  0024BC  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  5589  0024C0  0012               	return	
  5590  0024C2                     __end_of___altoft:
  5591                           	opt stack 0
  5592                           tblptru	equ	0xFF8
  5593                           tblptrh	equ	0xFF7
  5594                           tblptrl	equ	0xFF6
  5595                           tablat	equ	0xFF5
  5596                           prodh	equ	0xFF4
  5597                           prodl	equ	0xFF3
  5598                           postinc0	equ	0xFEE
  5599                           wreg	equ	0xFE8
  5600                           postinc2	equ	0xFDE
  5601                           postdec2	equ	0xFDD
  5602                           fsr2h	equ	0xFDA
  5603                           fsr2l	equ	0xFD9
  5604                           status	equ	0xFD8
  5605                           
  5606 ;; *************** function ___awtoft *****************
  5607 ;; Defined at:
  5608 ;;		line 32 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/awtoft.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  c               2    8[COMRAM] int 
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;  sign            1   11[COMRAM] unsigned char 
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  3    8[COMRAM] float 
  5615 ;; Registers used:
  5616 ;;		wreg, status,2, status,0, cstack
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5622 ;;      Params:         3       0       0       0       0       0       0       0       0
  5623 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5625 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5626 ;;Total ram usage:        4 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:    1
  5629 ;; This function calls:
  5630 ;;		___ftpack
  5631 ;; This function is called by:
  5632 ;;		_main
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           	psect	text23
  5637  0026DA                     __ptext23:
  5638                           	opt stack 0
  5639  0026DA                     ___awtoft:
  5640                           	opt stack 29
  5641                           
  5642                           ;incstack = 0
  5643  0026DA  0E00               	movlw	0
  5644  0026DC  6E0C               	movwf	___awtoft@sign,c
  5645  0026DE  AE0A               	btfss	___awtoft@c+1,7,c
  5646  0026E0  D006               	goto	l1414
  5647  0026E2  6C09               	negf	___awtoft@c,c
  5648  0026E4  1E0A               	comf	___awtoft@c+1,f,c
  5649  0026E6  B0D8               	btfsc	status,0,c
  5650  0026E8  2A0A               	incf	___awtoft@c+1,f,c
  5651  0026EA  0E01               	movlw	1
  5652  0026EC  6E0C               	movwf	___awtoft@sign,c
  5653  0026EE                     l1414:
  5654  0026EE  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5655  0026F2  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5656  0026F6  6A03               	clrf	___ftpack@arg+2,c
  5657  0026F8  0E8E               	movlw	142
  5658  0026FA  6E04               	movwf	___ftpack@exp,c
  5659  0026FC  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5660  002700  EC06  F010         	call	___ftpack	;wreg free
  5661  002704  C001  F009         	movff	?___ftpack,?___awtoft
  5662  002708  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5663  00270C  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5664  002710  0012               	return	
  5665  002712                     __end_of___awtoft:
  5666                           	opt stack 0
  5667                           tblptru	equ	0xFF8
  5668                           tblptrh	equ	0xFF7
  5669                           tblptrl	equ	0xFF6
  5670                           tablat	equ	0xFF5
  5671                           prodh	equ	0xFF4
  5672                           prodl	equ	0xFF3
  5673                           postinc0	equ	0xFEE
  5674                           wreg	equ	0xFE8
  5675                           postinc2	equ	0xFDE
  5676                           postdec2	equ	0xFDD
  5677                           fsr2h	equ	0xFDA
  5678                           fsr2l	equ	0xFD9
  5679                           status	equ	0xFD8
  5680                           
  5681 ;; *************** function ___ftpack *****************
  5682 ;; Defined at:
  5683 ;;		line 62 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/float.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;  arg             3    0[COMRAM] unsigned um
  5686 ;;  exp             1    3[COMRAM] unsigned char 
  5687 ;;  sign            1    4[COMRAM] unsigned char 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;		None
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  3    0[COMRAM] float 
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5699 ;;      Params:         5       0       0       0       0       0       0       0       0
  5700 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5701 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5702 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5703 ;;Total ram usage:        8 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; This function calls:
  5706 ;;		Nothing
  5707 ;; This function is called by:
  5708 ;;		___altoft
  5709 ;;		___awtoft
  5710 ;;		___ftadd
  5711 ;;		___ftdiv
  5712 ;;		___ftmul
  5713 ;;		___lltoft
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           	psect	text24
  5718  00200C                     __ptext24:
  5719                           	opt stack 0
  5720  00200C                     ___ftpack:
  5721                           	opt stack 27
  5722                           
  5723                           ;incstack = 0
  5724  00200C  5004               	movf	___ftpack@exp,w,c
  5725  00200E  B4D8               	btfsc	status,2,c
  5726  002010  D005               	goto	u2400
  5727  002012  5001               	movf	___ftpack@arg,w,c
  5728  002014  1002               	iorwf	___ftpack@arg+1,w,c
  5729  002016  1003               	iorwf	___ftpack@arg+2,w,c
  5730  002018  A4D8               	btfss	status,2,c
  5731  00201A  D00C               	goto	l1450
  5732  00201C                     u2400:
  5733  00201C  0E00               	movlw	0
  5734  00201E  6E01               	movwf	?___ftpack,c
  5735  002020  0E00               	movlw	0
  5736  002022  6E02               	movwf	?___ftpack+1,c
  5737  002024  0E00               	movlw	0
  5738  002026  6E03               	movwf	?___ftpack+2,c
  5739  002028  0012               	return	
  5740  00202A  2A04               	incf	___ftpack@exp,f,c
  5741  00202C  90D8               	bcf	status,0,c
  5742  00202E  3203               	rrcf	___ftpack@arg+2,f,c
  5743  002030  3202               	rrcf	___ftpack@arg+1,f,c
  5744  002032  3201               	rrcf	___ftpack@arg,f,c
  5745  002034                     l1450:
  5746  002034  0E00               	movlw	0
  5747  002036  1401               	andwf	___ftpack@arg,w,c
  5748  002038  6E06               	movwf	??___ftpack& (0+255),c
  5749  00203A  0E00               	movlw	0
  5750  00203C  1402               	andwf	___ftpack@arg+1,w,c
  5751  00203E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5752  002040  0EFE               	movlw	254
  5753  002042  1403               	andwf	___ftpack@arg+2,w,c
  5754  002044  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5755  002046  5006               	movf	??___ftpack,w,c
  5756  002048  1007               	iorwf	??___ftpack+1,w,c
  5757  00204A  1008               	iorwf	??___ftpack+2,w,c
  5758  00204C  B4D8               	btfsc	status,2,c
  5759  00204E  D00C               	goto	l1453
  5760  002050  D7EC               	goto	l1451
  5761  002052  2A04               	incf	___ftpack@exp,f,c
  5762  002054  0E01               	movlw	1
  5763  002056  2601               	addwf	___ftpack@arg,f,c
  5764  002058  0E00               	movlw	0
  5765  00205A  2202               	addwfc	___ftpack@arg+1,f,c
  5766  00205C  0E00               	movlw	0
  5767  00205E  2203               	addwfc	___ftpack@arg+2,f,c
  5768  002060  90D8               	bcf	status,0,c
  5769  002062  3203               	rrcf	___ftpack@arg+2,f,c
  5770  002064  3202               	rrcf	___ftpack@arg+1,f,c
  5771  002066  3201               	rrcf	___ftpack@arg,f,c
  5772  002068                     l1453:
  5773  002068  0E00               	movlw	0
  5774  00206A  1401               	andwf	___ftpack@arg,w,c
  5775  00206C  6E06               	movwf	??___ftpack& (0+255),c
  5776  00206E  0E00               	movlw	0
  5777  002070  1402               	andwf	___ftpack@arg+1,w,c
  5778  002072  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5779  002074  0EFF               	movlw	255
  5780  002076  1403               	andwf	___ftpack@arg+2,w,c
  5781  002078  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5782  00207A  5006               	movf	??___ftpack,w,c
  5783  00207C  1007               	iorwf	??___ftpack+1,w,c
  5784  00207E  1008               	iorwf	??___ftpack+2,w,c
  5785  002080  B4D8               	btfsc	status,2,c
  5786  002082  D006               	goto	l1456
  5787  002084  D7E6               	goto	l1454
  5788  002086  0604               	decf	___ftpack@exp,f,c
  5789  002088  90D8               	bcf	status,0,c
  5790  00208A  3601               	rlcf	___ftpack@arg,f,c
  5791  00208C  3602               	rlcf	___ftpack@arg+1,f,c
  5792  00208E  3603               	rlcf	___ftpack@arg+2,f,c
  5793  002090                     l1456:
  5794  002090  BE02               	btfsc	___ftpack@arg+1,7,c
  5795  002092  D003               	goto	u2440
  5796  002094  0E02               	movlw	2
  5797  002096  6004               	cpfslt	___ftpack@exp,c
  5798  002098  D7F6               	goto	l1457
  5799  00209A                     u2440:
  5800  00209A  A004               	btfss	___ftpack@exp,0,c
  5801  00209C  9E02               	bcf	___ftpack@arg+1,7,c
  5802  00209E  90D8               	bcf	status,0,c
  5803  0020A0  3204               	rrcf	___ftpack@exp,f,c
  5804  0020A2  5004               	movf	___ftpack@exp,w,c
  5805  0020A4  1203               	iorwf	___ftpack@arg+2,f,c
  5806  0020A6  5005               	movf	___ftpack@sign,w,c
  5807  0020A8  A4D8               	btfss	status,2,c
  5808  0020AA  8E03               	bsf	___ftpack@arg+2,7,c
  5809  0020AC  C001  F001         	movff	___ftpack@arg,?___ftpack
  5810  0020B0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5811  0020B4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5812  0020B8  0012               	return	
  5813  0020BA                     __end_of___ftpack:
  5814                           	opt stack 0
  5815                           tblptru	equ	0xFF8
  5816                           tblptrh	equ	0xFF7
  5817                           tblptrl	equ	0xFF6
  5818                           tablat	equ	0xFF5
  5819                           prodh	equ	0xFF4
  5820                           prodl	equ	0xFF3
  5821                           postinc0	equ	0xFEE
  5822                           wreg	equ	0xFE8
  5823                           postinc2	equ	0xFDE
  5824                           postdec2	equ	0xFDD
  5825                           fsr2h	equ	0xFDA
  5826                           fsr2l	equ	0xFD9
  5827                           status	equ	0xFD8
  5828                           
  5829 ;; *************** function _OpenI2C *****************
  5830 ;; Defined at:
  5831 ;;		line 14 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/pic18/plib/i2c/i2c_open.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;  sync_mode       1    wreg     unsigned char 
  5834 ;;  slew            1    0[COMRAM] unsigned char 
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;  sync_mode       1    1[COMRAM] unsigned char 
  5837 ;; Return value:  Size  Location     Type
  5838 ;;                  1    wreg      void 
  5839 ;; Registers used:
  5840 ;;		wreg, status,2, status,0
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5846 ;;      Params:         1       0       0       0       0       0       0       0       0
  5847 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5848 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5849 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5850 ;;Total ram usage:        2 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; This function calls:
  5853 ;;		Nothing
  5854 ;; This function is called by:
  5855 ;;		_main
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           	psect	text25
  5860  0027C2                     __ptext25:
  5861                           	opt stack 0
  5862  0027C2                     _OpenI2C:
  5863                           	opt stack 30
  5864                           
  5865                           ;incstack = 0
  5866                           ;OpenI2C@sync_mode stored from wreg
  5867  0027C2  6E02               	movwf	OpenI2C@sync_mode,c
  5868  0027C4  0E3F               	movlw	63
  5869  0027C6  16C7               	andwf	4039,f,c	;volatile
  5870  0027C8  0E00               	movlw	0
  5871  0027CA  6EC6               	movwf	4038,c	;volatile
  5872  0027CC  0E00               	movlw	0
  5873  0027CE  6EC5               	movwf	4037,c	;volatile
  5874  0027D0  5002               	movf	OpenI2C@sync_mode,w,c
  5875  0027D2  12C6               	iorwf	4038,f,c	;volatile
  5876  0027D4  5001               	movf	OpenI2C@slew,w,c
  5877  0027D6  12C7               	iorwf	4039,f,c	;volatile
  5878  0027D8  8293               	bsf	3987,1,c	;volatile
  5879  0027DA  8093               	bsf	3987,0,c	;volatile
  5880  0027DC  8AC6               	bsf	4038,5,c	;volatile
  5881  0027DE  0012               	return		;funcret
  5882  0027E0                     __end_of_OpenI2C:
  5883                           	opt stack 0
  5884                           tblptru	equ	0xFF8
  5885                           tblptrh	equ	0xFF7
  5886                           tblptrl	equ	0xFF6
  5887                           tablat	equ	0xFF5
  5888                           prodh	equ	0xFF4
  5889                           prodl	equ	0xFF3
  5890                           postinc0	equ	0xFEE
  5891                           wreg	equ	0xFE8
  5892                           postinc2	equ	0xFDE
  5893                           postdec2	equ	0xFDD
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function _MPU6050_testConnection *****************
  5899 ;; Defined at:
  5900 ;;		line 73 in file "MPU6050.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;		None
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      unsigned char 
  5907 ;; Registers used:
  5908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5914 ;;      Params:         0       0       0       0       0       0       0       0       0
  5915 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5916 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5917 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5918 ;;Total ram usage:        0 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    6
  5921 ;; This function calls:
  5922 ;;		_MPU6050_getDeviceID
  5923 ;; This function is called by:
  5924 ;;		_main
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           	psect	text26
  5929  0028E2                     __ptext26:
  5930                           	opt stack 0
  5931  0028E2                     _MPU6050_testConnection:
  5932                           	opt stack 24
  5933                           
  5934                           ;MPU6050.c: 74: return MPU6050_getDeviceID() == 0x34;
  5935                           
  5936                           ;incstack = 0
  5937  0028E2  ECF0  F013         	call	_MPU6050_getDeviceID	;wreg free
  5938  0028E6  0A34               	xorlw	52
  5939  0028E8  A4D8               	btfss	status,2,c
  5940  0028EA  D002               	goto	u3880
  5941  0028EC  0E01               	movlw	1
  5942  0028EE  0012               	return	
  5943  0028F0                     u3880:
  5944  0028F0  0E00               	movlw	0
  5945  0028F2  0012               	return	
  5946  0028F4                     __end_of_MPU6050_testConnection:
  5947                           	opt stack 0
  5948                           tblptru	equ	0xFF8
  5949                           tblptrh	equ	0xFF7
  5950                           tblptrl	equ	0xFF6
  5951                           tablat	equ	0xFF5
  5952                           prodh	equ	0xFF4
  5953                           prodl	equ	0xFF3
  5954                           postinc0	equ	0xFEE
  5955                           wreg	equ	0xFE8
  5956                           postinc2	equ	0xFDE
  5957                           postdec2	equ	0xFDD
  5958                           fsr2h	equ	0xFDA
  5959                           fsr2l	equ	0xFD9
  5960                           status	equ	0xFD8
  5961                           
  5962 ;; *************** function _MPU6050_getDeviceID *****************
  5963 ;; Defined at:
  5964 ;;		line 2696 in file "MPU6050.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      unsigned char 
  5971 ;; Registers used:
  5972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5978 ;;      Params:         0       0       0       0       0       0       0       0       0
  5979 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5981 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5982 ;;Total ram usage:        0 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    5
  5985 ;; This function calls:
  5986 ;;		_I2Cdev_readBits
  5987 ;; This function is called by:
  5988 ;;		_MPU6050_testConnection
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text27
  5993  0027E0                     __ptext27:
  5994                           	opt stack 0
  5995  0027E0                     _MPU6050_getDeviceID:
  5996                           	opt stack 24
  5997                           
  5998                           ;MPU6050.c: 2697: I2Cdev_readBits(mpu6050.devAddr, 0x75, 6, 6, mpu6050.buffer);
  5999                           
  6000                           ;incstack = 0
  6001  0027E0  0E75               	movlw	117
  6002  0027E2  6E25               	movwf	I2Cdev_readBits@regAddr,c
  6003  0027E4  0E06               	movlw	6
  6004  0027E6  6E26               	movwf	I2Cdev_readBits@bitStart,c
  6005  0027E8  0E06               	movlw	6
  6006  0027EA  6E27               	movwf	I2Cdev_readBits@length,c
  6007  0027EC  0E4D               	movlw	low (_mpu6050+1)
  6008  0027EE  6E28               	movwf	I2Cdev_readBits@data,c
  6009  0027F0  0E00               	movlw	high (_mpu6050+1)
  6010  0027F2  6E29               	movwf	I2Cdev_readBits@data+1,c
  6011  0027F4  504C               	movf	_mpu6050,w,c
  6012  0027F6  ECAA  F011         	call	_I2Cdev_readBits
  6013                           
  6014                           ;MPU6050.c: 2698: return mpu6050.buffer[0];
  6015  0027FA  504D               	movf	_mpu6050+1,w,c
  6016  0027FC  0012               	return	
  6017  0027FE                     __end_of_MPU6050_getDeviceID:
  6018                           	opt stack 0
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           postinc0	equ	0xFEE
  6026                           wreg	equ	0xFE8
  6027                           postinc2	equ	0xFDE
  6028                           postdec2	equ	0xFDD
  6029                           fsr2h	equ	0xFDA
  6030                           fsr2l	equ	0xFD9
  6031                           status	equ	0xFD8
  6032                           
  6033 ;; *************** function _I2Cdev_readBits *****************
  6034 ;; Defined at:
  6035 ;;		line 206 in file "I2Cdev.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  devAddr         1    wreg     unsigned char 
  6038 ;;  regAddr         1   36[COMRAM] unsigned char 
  6039 ;;  bitStart        1   37[COMRAM] unsigned char 
  6040 ;;  length          1   38[COMRAM] unsigned char 
  6041 ;;  data            2   39[COMRAM] PTR unsigned char 
  6042 ;;		 -> mpu6050(15), 
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;  devAddr         1   45[COMRAM] unsigned char 
  6045 ;;  mask            1   46[COMRAM] unsigned char 
  6046 ;;  b               1   47[COMRAM] unsigned char 
  6047 ;;  count           1   44[COMRAM] unsigned char 
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  1    wreg      char 
  6050 ;; Registers used:
  6051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6057 ;;      Params:         5       0       0       0       0       0       0       0       0
  6058 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6059 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6060 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6061 ;;Total ram usage:       12 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    4
  6064 ;; This function calls:
  6065 ;;		_I2Cdev_readByte
  6066 ;; This function is called by:
  6067 ;;		_MPU6050_getDeviceID
  6068 ;;		_MPU6050_getExternalFrameSync
  6069 ;;		_MPU6050_getDLPFMode
  6070 ;;		_MPU6050_getFullScaleGyroRange
  6071 ;;		_MPU6050_getFullScaleAccelRange
  6072 ;;		_MPU6050_getDHPFMode
  6073 ;;		_MPU6050_getMasterClockSpeed
  6074 ;;		_MPU6050_getSlaveDataLength
  6075 ;;		_MPU6050_getSlave4MasterDelay
  6076 ;;		_MPU6050_getAccelerometerPowerOnDelay
  6077 ;;		_MPU6050_getFreefallDetectionCounterDecrement
  6078 ;;		_MPU6050_getMotionDetectionCounterDecrement
  6079 ;;		_MPU6050_getClockSource
  6080 ;;		_MPU6050_getWakeFrequency
  6081 ;;		_MPU6050_getXGyroOffsetTC
  6082 ;;		_MPU6050_getYGyroOffsetTC
  6083 ;;		_MPU6050_getZGyroOffsetTC
  6084 ;; This function uses a non-reentrant model
  6085 ;;
  6086                           
  6087                           	psect	text28
  6088  002354                     __ptext28:
  6089                           	opt stack 0
  6090  002354                     _I2Cdev_readBits:
  6091                           	opt stack 24
  6092                           
  6093                           ;incstack = 0
  6094                           ;I2Cdev_readBits@devAddr stored from wreg
  6095  002354  6E2E               	movwf	I2Cdev_readBits@devAddr,c
  6096                           
  6097                           ;I2Cdev.c: 212: uint8_t count, b;
  6098                           ;I2Cdev.c: 213: if ((count = I2Cdev_readByte(devAddr, regAddr, &b)) != 0) {
  6099  002356  C025  F021         	movff	I2Cdev_readBits@regAddr,I2Cdev_readByte@regAddr
  6100  00235A  0E30               	movlw	low I2Cdev_readBits@b
  6101  00235C  6E22               	movwf	I2Cdev_readByte@data,c
  6102  00235E  0E00               	movlw	high I2Cdev_readBits@b
  6103  002360  6E23               	movwf	I2Cdev_readByte@data+1,c
  6104  002362  502E               	movf	I2Cdev_readBits@devAddr,w,c
  6105  002364  EC4E  F014         	call	_I2Cdev_readByte
  6106  002368  6E2D               	movwf	I2Cdev_readBits@count,c
  6107  00236A  502D               	movf	I2Cdev_readBits@count,w,c
  6108  00236C  B4D8               	btfsc	status,2,c
  6109  00236E  0012               	return	
  6110                           
  6111                           ;I2Cdev.c: 214: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
  6112  002370  5027               	movf	I2Cdev_readBits@length,w,c
  6113  002372  0800               	sublw	0
  6114  002374  2426               	addwf	I2Cdev_readBits@bitStart,w,c
  6115  002376  6E2A               	movwf	??_I2Cdev_readBits& (0+255),c
  6116  002378  0E01               	movlw	1
  6117  00237A  262A               	addwf	??_I2Cdev_readBits,f,c
  6118  00237C  C027  F02B         	movff	I2Cdev_readBits@length,??_I2Cdev_readBits+1
  6119  002380  0E01               	movlw	1
  6120  002382  6E2C               	movwf	(??_I2Cdev_readBits+2)& (0+255),c
  6121  002384  2A2B               	incf	??_I2Cdev_readBits+1,f,c
  6122  002386  D002               	goto	u2484
  6123  002388                     u2485:
  6124  002388  90D8               	bcf	status,0,c
  6125  00238A  362C               	rlcf	??_I2Cdev_readBits+2,f,c
  6126  00238C                     u2484:
  6127  00238C  2E2B               	decfsz	??_I2Cdev_readBits+1,f,c
  6128  00238E  D7FC               	goto	u2485
  6129  002390  0EFF               	movlw	255
  6130  002392  262C               	addwf	??_I2Cdev_readBits+2,f,c
  6131  002394  2A2A               	incf	??_I2Cdev_readBits,f,c
  6132  002396  D002               	goto	u2494
  6133  002398                     u2495:
  6134  002398  90D8               	bcf	status,0,c
  6135  00239A  362C               	rlcf	??_I2Cdev_readBits+2,f,c
  6136  00239C                     u2494:
  6137  00239C  2E2A               	decfsz	??_I2Cdev_readBits,f,c
  6138  00239E  D7FC               	goto	u2495
  6139  0023A0  502C               	movf	??_I2Cdev_readBits+2,w,c
  6140  0023A2  6E2F               	movwf	I2Cdev_readBits@mask,c
  6141                           
  6142                           ;I2Cdev.c: 215: b &= mask;
  6143  0023A4  502F               	movf	I2Cdev_readBits@mask,w,c
  6144  0023A6  1630               	andwf	I2Cdev_readBits@b,f,c
  6145                           
  6146                           ;I2Cdev.c: 216: b >>= (bitStart - length + 1);
  6147  0023A8  5027               	movf	I2Cdev_readBits@length,w,c
  6148  0023AA  0800               	sublw	0
  6149  0023AC  2426               	addwf	I2Cdev_readBits@bitStart,w,c
  6150  0023AE  6E2A               	movwf	??_I2Cdev_readBits& (0+255),c
  6151  0023B0  0E01               	movlw	1
  6152  0023B2  262A               	addwf	??_I2Cdev_readBits,f,c
  6153  0023B4  282A               	incf	??_I2Cdev_readBits,w,c
  6154  0023B6  6E2B               	movwf	(??_I2Cdev_readBits+1)& (0+255),c
  6155  0023B8  D002               	goto	u2500
  6156  0023BA                     u2505:
  6157  0023BA  90D8               	bcf	status,0,c
  6158  0023BC  3230               	rrcf	I2Cdev_readBits@b,f,c
  6159  0023BE                     u2500:
  6160  0023BE  2E2B               	decfsz	(??_I2Cdev_readBits+1)& (0+255),f,c
  6161  0023C0  D7FC               	goto	u2505
  6162                           
  6163                           ;I2Cdev.c: 217: *data = b;
  6164  0023C2  C028  FFD9         	movff	I2Cdev_readBits@data,fsr2l
  6165  0023C6  C029  FFDA         	movff	I2Cdev_readBits@data+1,fsr2h
  6166  0023CA  C030  FFDF         	movff	I2Cdev_readBits@b,indf2
  6167  0023CE  0012               	return	
  6168  0023D0                     __end_of_I2Cdev_readBits:
  6169                           	opt stack 0
  6170                           tblptru	equ	0xFF8
  6171                           tblptrh	equ	0xFF7
  6172                           tblptrl	equ	0xFF6
  6173                           tablat	equ	0xFF5
  6174                           prodh	equ	0xFF4
  6175                           prodl	equ	0xFF3
  6176                           postinc0	equ	0xFEE
  6177                           wreg	equ	0xFE8
  6178                           indf2	equ	0xFDF
  6179                           postinc2	equ	0xFDE
  6180                           postdec2	equ	0xFDD
  6181                           fsr2h	equ	0xFDA
  6182                           fsr2l	equ	0xFD9
  6183                           status	equ	0xFD8
  6184                           
  6185 ;; *************** function _MPU6050_initialize *****************
  6186 ;; Defined at:
  6187 ;;		line 62 in file "MPU6050.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;		None
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;		None
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      void 
  6194 ;; Registers used:
  6195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6201 ;;      Params:         0       0       0       0       0       0       0       0       0
  6202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6204 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6205 ;;Total ram usage:        0 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:    6
  6208 ;; This function calls:
  6209 ;;		_MPU6050_setClockSource
  6210 ;;		_MPU6050_setFullScaleAccelRange
  6211 ;;		_MPU6050_setFullScaleGyroRange
  6212 ;;		_MPU6050_setSleepEnabled
  6213 ;; This function is called by:
  6214 ;;		_main
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           	psect	text29
  6219  00281A                     __ptext29:
  6220                           	opt stack 0
  6221  00281A                     _MPU6050_initialize:
  6222                           	opt stack 24
  6223                           
  6224                           ;MPU6050.c: 63: MPU6050_setClockSource(0x01);
  6225                           
  6226                           ;incstack = 0
  6227  00281A  0E01               	movlw	1
  6228  00281C  EC34  F014         	call	_MPU6050_setClockSource
  6229                           
  6230                           ;MPU6050.c: 64: MPU6050_setFullScaleGyroRange(0x00);
  6231  002820  0E00               	movlw	0
  6232  002822  EC1A  F014         	call	_MPU6050_setFullScaleGyroRange
  6233                           
  6234                           ;MPU6050.c: 65: MPU6050_setFullScaleAccelRange(0x00);
  6235  002826  0E00               	movlw	0
  6236  002828  EC27  F014         	call	_MPU6050_setFullScaleAccelRange
  6237                           
  6238                           ;MPU6050.c: 66: MPU6050_setSleepEnabled(0);
  6239  00282C  0E00               	movlw	0
  6240  00282E  EC66  F014         	call	_MPU6050_setSleepEnabled
  6241  002832  0012               	return		;funcret
  6242  002834                     __end_of_MPU6050_initialize:
  6243                           	opt stack 0
  6244                           tblptru	equ	0xFF8
  6245                           tblptrh	equ	0xFF7
  6246                           tblptrl	equ	0xFF6
  6247                           tablat	equ	0xFF5
  6248                           prodh	equ	0xFF4
  6249                           prodl	equ	0xFF3
  6250                           postinc0	equ	0xFEE
  6251                           wreg	equ	0xFE8
  6252                           indf2	equ	0xFDF
  6253                           postinc2	equ	0xFDE
  6254                           postdec2	equ	0xFDD
  6255                           fsr2h	equ	0xFDA
  6256                           fsr2l	equ	0xFD9
  6257                           status	equ	0xFD8
  6258                           
  6259 ;; *************** function _MPU6050_setSleepEnabled *****************
  6260 ;; Defined at:
  6261 ;;		line 2382 in file "MPU6050.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;  enabled         1    wreg     unsigned char 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  enabled         1   48[COMRAM] unsigned char 
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      void 
  6268 ;; Registers used:
  6269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6275 ;;      Params:         0       0       0       0       0       0       0       0       0
  6276 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6278 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6279 ;;Total ram usage:        1 bytes
  6280 ;; Hardware stack levels used:    1
  6281 ;; Hardware stack levels required when called:    5
  6282 ;; This function calls:
  6283 ;;		_I2Cdev_writeBit
  6284 ;; This function is called by:
  6285 ;;		_MPU6050_initialize
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text30
  6290  0028CC                     __ptext30:
  6291                           	opt stack 0
  6292  0028CC                     _MPU6050_setSleepEnabled:
  6293                           	opt stack 24
  6294                           
  6295                           ;incstack = 0
  6296                           ;MPU6050_setSleepEnabled@enabled stored from wreg
  6297  0028CC  6E31               	movwf	MPU6050_setSleepEnabled@enabled,c
  6298                           
  6299                           ;MPU6050.c: 2383: I2Cdev_writeBit(mpu6050.devAddr, 0x6B, 6, enabled);
  6300  0028CE  0E6B               	movlw	107
  6301  0028D0  6E25               	movwf	I2Cdev_writeBit@regAddr,c
  6302  0028D2  0E06               	movlw	6
  6303  0028D4  6E26               	movwf	I2Cdev_writeBit@bitNum,c
  6304  0028D6  C031  F027         	movff	MPU6050_setSleepEnabled@enabled,I2Cdev_writeBit@data
  6305  0028DA  504C               	movf	_mpu6050,w,c
  6306  0028DC  EC6B  F011         	call	_I2Cdev_writeBit
  6307  0028E0  0012               	return		;funcret
  6308  0028E2                     __end_of_MPU6050_setSleepEnabled:
  6309                           	opt stack 0
  6310                           tblptru	equ	0xFF8
  6311                           tblptrh	equ	0xFF7
  6312                           tblptrl	equ	0xFF6
  6313                           tablat	equ	0xFF5
  6314                           prodh	equ	0xFF4
  6315                           prodl	equ	0xFF3
  6316                           postinc0	equ	0xFEE
  6317                           wreg	equ	0xFE8
  6318                           indf2	equ	0xFDF
  6319                           postinc2	equ	0xFDE
  6320                           postdec2	equ	0xFDD
  6321                           fsr2h	equ	0xFDA
  6322                           fsr2l	equ	0xFD9
  6323                           status	equ	0xFD8
  6324                           
  6325 ;; *************** function _I2Cdev_writeBit *****************
  6326 ;; Defined at:
  6327 ;;		line 344 in file "I2Cdev.c"
  6328 ;; Parameters:    Size  Location     Type
  6329 ;;  devAddr         1    wreg     unsigned char 
  6330 ;;  regAddr         1   36[COMRAM] unsigned char 
  6331 ;;  bitNum          1   37[COMRAM] unsigned char 
  6332 ;;  data            1   38[COMRAM] unsigned char 
  6333 ;; Auto vars:     Size  Location     Type
  6334 ;;  devAddr         1   46[COMRAM] unsigned char 
  6335 ;;  b               1   47[COMRAM] unsigned char 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  1    wreg      unsigned char 
  6338 ;; Registers used:
  6339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6345 ;;      Params:         3       0       0       0       0       0       0       0       0
  6346 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6347 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6348 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6349 ;;Total ram usage:       12 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    4
  6352 ;; This function calls:
  6353 ;;		_I2Cdev_readByte
  6354 ;;		_I2Cdev_writeByte
  6355 ;; This function is called by:
  6356 ;;		_MPU6050_setSleepEnabled
  6357 ;;		_MPU6050_setAuxVDDIOLevel
  6358 ;;		_MPU6050_setAccelXSelfTest
  6359 ;;		_MPU6050_setAccelYSelfTest
  6360 ;;		_MPU6050_setAccelZSelfTest
  6361 ;;		_MPU6050_setTempFIFOEnabled
  6362 ;;		_MPU6050_setXGyroFIFOEnabled
  6363 ;;		_MPU6050_setYGyroFIFOEnabled
  6364 ;;		_MPU6050_setZGyroFIFOEnabled
  6365 ;;		_MPU6050_setAccelFIFOEnabled
  6366 ;;		_MPU6050_setSlave2FIFOEnabled
  6367 ;;		_MPU6050_setSlave1FIFOEnabled
  6368 ;;		_MPU6050_setSlave0FIFOEnabled
  6369 ;;		_MPU6050_setMultiMasterEnabled
  6370 ;;		_MPU6050_setWaitForExternalSensorEnabled
  6371 ;;		_MPU6050_setSlave3FIFOEnabled
  6372 ;;		_MPU6050_setSlaveReadWriteTransitionEnabled
  6373 ;;		_MPU6050_setSlaveEnabled
  6374 ;;		_MPU6050_setSlaveWordByteSwap
  6375 ;;		_MPU6050_setSlaveWriteMode
  6376 ;;		_MPU6050_setSlaveWordGroupOffset
  6377 ;;		_MPU6050_setSlave4Enabled
  6378 ;;		_MPU6050_setSlave4InterruptEnabled
  6379 ;;		_MPU6050_setSlave4WriteMode
  6380 ;;		_MPU6050_setInterruptMode
  6381 ;;		_MPU6050_setInterruptDrive
  6382 ;;		_MPU6050_setInterruptLatch
  6383 ;;		_MPU6050_setInterruptLatchClear
  6384 ;;		_MPU6050_setFSyncInterruptLevel
  6385 ;;		_MPU6050_setFSyncInterruptEnabled
  6386 ;;		_MPU6050_setI2CBypassEnabled
  6387 ;;		_MPU6050_setClockOutputEnabled
  6388 ;;		_MPU6050_setIntFreefallEnabled
  6389 ;;		_MPU6050_setIntMotionEnabled
  6390 ;;		_MPU6050_setIntZeroMotionEnabled
  6391 ;;		_MPU6050_setIntFIFOBufferOverflowEnabled
  6392 ;;		_MPU6050_setIntI2CMasterEnabled
  6393 ;;		_MPU6050_setIntDataReadyEnabled
  6394 ;;		_MPU6050_setExternalShadowDelayEnabled
  6395 ;;		_MPU6050_setSlaveDelayEnabled
  6396 ;;		_MPU6050_resetGyroscopePath
  6397 ;;		_MPU6050_resetAccelerometerPath
  6398 ;;		_MPU6050_resetTemperaturePath
  6399 ;;		_MPU6050_setFIFOEnabled
  6400 ;;		_MPU6050_setI2CMasterModeEnabled
  6401 ;;		_MPU6050_switchSPIEnabled
  6402 ;;		_MPU6050_resetFIFO
  6403 ;;		_MPU6050_resetI2CMaster
  6404 ;;		_MPU6050_resetSensors
  6405 ;;		_MPU6050_reset
  6406 ;;		_MPU6050_setWakeCycleEnabled
  6407 ;;		_MPU6050_setTempSensorEnabled
  6408 ;;		_MPU6050_setStandbyXAccelEnabled
  6409 ;;		_MPU6050_setStandbyYAccelEnabled
  6410 ;;		_MPU6050_setStandbyZAccelEnabled
  6411 ;;		_MPU6050_setStandbyXGyroEnabled
  6412 ;;		_MPU6050_setStandbyYGyroEnabled
  6413 ;;		_MPU6050_setStandbyZGyroEnabled
  6414 ;;		_MPU6050_setOTPBankValid
  6415 ;;		_MPU6050_setIntPLLReadyEnabled
  6416 ;;		_MPU6050_setIntDMPEnabled
  6417 ;;		_MPU6050_setDMPEnabled
  6418 ;;		_MPU6050_resetDMP
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text31
  6423  0022D6                     __ptext31:
  6424                           	opt stack 0
  6425  0022D6                     _I2Cdev_writeBit:
  6426                           	opt stack 24
  6427                           
  6428                           ;incstack = 0
  6429                           ;I2Cdev_writeBit@devAddr stored from wreg
  6430  0022D6  6E2F               	movwf	I2Cdev_writeBit@devAddr,c
  6431                           
  6432                           ;I2Cdev.c: 345: uint8_t b;
  6433                           ;I2Cdev.c: 346: I2Cdev_readByte(devAddr, regAddr, &b);
  6434  0022D8  C025  F021         	movff	I2Cdev_writeBit@regAddr,I2Cdev_readByte@regAddr
  6435  0022DC  0E30               	movlw	low I2Cdev_writeBit@b
  6436  0022DE  6E22               	movwf	I2Cdev_readByte@data,c
  6437  0022E0  0E00               	movlw	high I2Cdev_writeBit@b
  6438  0022E2  6E23               	movwf	I2Cdev_readByte@data+1,c
  6439  0022E4  502F               	movf	I2Cdev_writeBit@devAddr,w,c
  6440  0022E6  EC4E  F014         	call	_I2Cdev_readByte
  6441                           
  6442                           ;I2Cdev.c: 347: b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
  6443  0022EA  5027               	movf	I2Cdev_writeBit@data,w,c
  6444  0022EC  A4D8               	btfss	status,2,c
  6445  0022EE  D012               	goto	l220
  6446  0022F0  C026  F028         	movff	I2Cdev_writeBit@bitNum,??_I2Cdev_writeBit
  6447  0022F4  0E01               	movlw	1
  6448  0022F6  6E29               	movwf	(??_I2Cdev_writeBit+1)& (0+255),c
  6449  0022F8  2A28               	incf	??_I2Cdev_writeBit,f,c
  6450  0022FA  D002               	goto	u2524
  6451  0022FC                     u2525:
  6452  0022FC  90D8               	bcf	status,0,c
  6453  0022FE  3629               	rlcf	??_I2Cdev_writeBit+1,f,c
  6454  002300                     u2524:
  6455  002300  2E28               	decfsz	??_I2Cdev_writeBit,f,c
  6456  002302  D7FC               	goto	u2525
  6457  002304  5029               	movf	??_I2Cdev_writeBit+1,w,c
  6458  002306  0AFF               	xorlw	255
  6459  002308  1430               	andwf	I2Cdev_writeBit@b,w,c
  6460  00230A  6E2A               	movwf	(??_I2Cdev_writeBit+2)& (0+255),c
  6461  00230C  502A               	movf	??_I2Cdev_writeBit+2,w,c
  6462  00230E  6E2D               	movwf	_I2Cdev_writeBit$422,c
  6463  002310  6A2E               	clrf	_I2Cdev_writeBit$422+1,c
  6464  002312  D016               	goto	l222
  6465  002314                     l220:
  6466  002314  C026  F028         	movff	I2Cdev_writeBit@bitNum,??_I2Cdev_writeBit
  6467  002318  0E01               	movlw	1
  6468  00231A  6E29               	movwf	(??_I2Cdev_writeBit+1)& (0+255),c
  6469  00231C  0E00               	movlw	0
  6470  00231E  6E2A               	movwf	(??_I2Cdev_writeBit+2)& (0+255),c
  6471  002320  2A28               	incf	??_I2Cdev_writeBit,f,c
  6472  002322  D003               	goto	u2534
  6473  002324                     u2535:
  6474  002324  90D8               	bcf	status,0,c
  6475  002326  3629               	rlcf	??_I2Cdev_writeBit+1,f,c
  6476  002328  362A               	rlcf	??_I2Cdev_writeBit+2,f,c
  6477  00232A                     u2534:
  6478  00232A  2E28               	decfsz	??_I2Cdev_writeBit,f,c
  6479  00232C  D7FB               	goto	u2535
  6480  00232E  5030               	movf	I2Cdev_writeBit@b,w,c
  6481  002330  6E2B               	movwf	(??_I2Cdev_writeBit+3)& (0+255),c
  6482  002332  6A2C               	clrf	(??_I2Cdev_writeBit+4)& (0+255),c
  6483  002334  5029               	movf	??_I2Cdev_writeBit+1,w,c
  6484  002336  102B               	iorwf	??_I2Cdev_writeBit+3,w,c
  6485  002338  6E2D               	movwf	_I2Cdev_writeBit$422,c
  6486  00233A  502A               	movf	??_I2Cdev_writeBit+2,w,c
  6487  00233C  102C               	iorwf	??_I2Cdev_writeBit+4,w,c
  6488  00233E  6E2E               	movwf	_I2Cdev_writeBit$422+1,c
  6489  002340                     l222:
  6490  002340  C02D  F030         	movff	_I2Cdev_writeBit$422,I2Cdev_writeBit@b
  6491                           
  6492                           ;I2Cdev.c: 348: return I2Cdev_writeByte(devAddr, regAddr, b);
  6493                           ;	Return value of _I2Cdev_writeBit is never used
  6494  002344  C025  F009         	movff	I2Cdev_writeBit@regAddr,I2Cdev_writeByte@regAddr
  6495  002348  C030  F00A         	movff	I2Cdev_writeBit@b,I2Cdev_writeByte@data
  6496  00234C  502F               	movf	I2Cdev_writeBit@devAddr,w,c
  6497  00234E  EC41  F014         	call	_I2Cdev_writeByte
  6498  002352  0012               	return	
  6499  002354                     __end_of_I2Cdev_writeBit:
  6500                           	opt stack 0
  6501                           tblptru	equ	0xFF8
  6502                           tblptrh	equ	0xFF7
  6503                           tblptrl	equ	0xFF6
  6504                           tablat	equ	0xFF5
  6505                           prodh	equ	0xFF4
  6506                           prodl	equ	0xFF3
  6507                           postinc0	equ	0xFEE
  6508                           wreg	equ	0xFE8
  6509                           indf2	equ	0xFDF
  6510                           postinc2	equ	0xFDE
  6511                           postdec2	equ	0xFDD
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function _MPU6050_setFullScaleGyroRange *****************
  6517 ;; Defined at:
  6518 ;;		line 251 in file "MPU6050.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  range           1    wreg     unsigned char 
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;  range           1   46[COMRAM] unsigned char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;                  1    wreg      void 
  6525 ;; Registers used:
  6526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6532 ;;      Params:         0       0       0       0       0       0       0       0       0
  6533 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6535 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6536 ;;Total ram usage:        1 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    5
  6539 ;; This function calls:
  6540 ;;		_I2Cdev_writeBits
  6541 ;; This function is called by:
  6542 ;;		_MPU6050_initialize
  6543 ;; This function uses a non-reentrant model
  6544 ;;
  6545                           
  6546                           	psect	text32
  6547  002834                     __ptext32:
  6548                           	opt stack 0
  6549  002834                     _MPU6050_setFullScaleGyroRange:
  6550                           	opt stack 24
  6551                           
  6552                           ;incstack = 0
  6553                           ;MPU6050_setFullScaleGyroRange@range stored from wreg
  6554  002834  6E2F               	movwf	MPU6050_setFullScaleGyroRange@range,c
  6555                           
  6556                           ;MPU6050.c: 252: I2Cdev_writeBits(mpu6050.devAddr, 0x1B, 4, 2, range);
  6557  002836  0E1B               	movlw	27
  6558  002838  6E25               	movwf	I2Cdev_writeBits@regAddr,c
  6559  00283A  0E04               	movlw	4
  6560  00283C  6E26               	movwf	I2Cdev_writeBits@bitStart,c
  6561  00283E  0E02               	movlw	2
  6562  002840  6E27               	movwf	I2Cdev_writeBits@length,c
  6563  002842  C02F  F028         	movff	MPU6050_setFullScaleGyroRange@range,I2Cdev_writeBits@data
  6564  002846  504C               	movf	_mpu6050,w,c
  6565  002848  ECA5  F010         	call	_I2Cdev_writeBits
  6566  00284C  0012               	return		;funcret
  6567  00284E                     __end_of_MPU6050_setFullScaleGyroRange:
  6568                           	opt stack 0
  6569                           tblptru	equ	0xFF8
  6570                           tblptrh	equ	0xFF7
  6571                           tblptrl	equ	0xFF6
  6572                           tablat	equ	0xFF5
  6573                           prodh	equ	0xFF4
  6574                           prodl	equ	0xFF3
  6575                           postinc0	equ	0xFEE
  6576                           wreg	equ	0xFE8
  6577                           indf2	equ	0xFDF
  6578                           postinc2	equ	0xFDE
  6579                           postdec2	equ	0xFDD
  6580                           fsr2h	equ	0xFDA
  6581                           fsr2l	equ	0xFD9
  6582                           status	equ	0xFD8
  6583                           
  6584 ;; *************** function _MPU6050_setFullScaleAccelRange *****************
  6585 ;; Defined at:
  6586 ;;		line 327 in file "MPU6050.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;  range           1    wreg     unsigned char 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  range           1   46[COMRAM] unsigned char 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  1    wreg      void 
  6593 ;; Registers used:
  6594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6600 ;;      Params:         0       0       0       0       0       0       0       0       0
  6601 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6603 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6604 ;;Total ram usage:        1 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    5
  6607 ;; This function calls:
  6608 ;;		_I2Cdev_writeBits
  6609 ;; This function is called by:
  6610 ;;		_MPU6050_initialize
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text33
  6615  00284E                     __ptext33:
  6616                           	opt stack 0
  6617  00284E                     _MPU6050_setFullScaleAccelRange:
  6618                           	opt stack 24
  6619                           
  6620                           ;incstack = 0
  6621                           ;MPU6050_setFullScaleAccelRange@range stored from wreg
  6622  00284E  6E2F               	movwf	MPU6050_setFullScaleAccelRange@range,c
  6623                           
  6624                           ;MPU6050.c: 328: I2Cdev_writeBits(mpu6050.devAddr, 0x1C, 4, 2, range);
  6625  002850  0E1C               	movlw	28
  6626  002852  6E25               	movwf	I2Cdev_writeBits@regAddr,c
  6627  002854  0E04               	movlw	4
  6628  002856  6E26               	movwf	I2Cdev_writeBits@bitStart,c
  6629  002858  0E02               	movlw	2
  6630  00285A  6E27               	movwf	I2Cdev_writeBits@length,c
  6631  00285C  C02F  F028         	movff	MPU6050_setFullScaleAccelRange@range,I2Cdev_writeBits@data
  6632  002860  504C               	movf	_mpu6050,w,c
  6633  002862  ECA5  F010         	call	_I2Cdev_writeBits
  6634  002866  0012               	return		;funcret
  6635  002868                     __end_of_MPU6050_setFullScaleAccelRange:
  6636                           	opt stack 0
  6637                           tblptru	equ	0xFF8
  6638                           tblptrh	equ	0xFF7
  6639                           tblptrl	equ	0xFF6
  6640                           tablat	equ	0xFF5
  6641                           prodh	equ	0xFF4
  6642                           prodl	equ	0xFF3
  6643                           postinc0	equ	0xFEE
  6644                           wreg	equ	0xFE8
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           postdec2	equ	0xFDD
  6648                           fsr2h	equ	0xFDA
  6649                           fsr2l	equ	0xFD9
  6650                           status	equ	0xFD8
  6651                           
  6652 ;; *************** function _MPU6050_setClockSource *****************
  6653 ;; Defined at:
  6654 ;;		line 2475 in file "MPU6050.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;  source          1    wreg     unsigned char 
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;  source          1   46[COMRAM] unsigned char 
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      void 
  6661 ;; Registers used:
  6662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6668 ;;      Params:         0       0       0       0       0       0       0       0       0
  6669 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6670 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6671 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6672 ;;Total ram usage:        1 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    5
  6675 ;; This function calls:
  6676 ;;		_I2Cdev_writeBits
  6677 ;; This function is called by:
  6678 ;;		_MPU6050_initialize
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           	psect	text34
  6683  002868                     __ptext34:
  6684                           	opt stack 0
  6685  002868                     _MPU6050_setClockSource:
  6686                           	opt stack 24
  6687                           
  6688                           ;incstack = 0
  6689                           ;MPU6050_setClockSource@source stored from wreg
  6690  002868  6E2F               	movwf	MPU6050_setClockSource@source,c
  6691                           
  6692                           ;MPU6050.c: 2476: I2Cdev_writeBits(mpu6050.devAddr, 0x6B, 2, 3, source);
  6693  00286A  0E6B               	movlw	107
  6694  00286C  6E25               	movwf	I2Cdev_writeBits@regAddr,c
  6695  00286E  0E02               	movlw	2
  6696  002870  6E26               	movwf	I2Cdev_writeBits@bitStart,c
  6697  002872  0E03               	movlw	3
  6698  002874  6E27               	movwf	I2Cdev_writeBits@length,c
  6699  002876  C02F  F028         	movff	MPU6050_setClockSource@source,I2Cdev_writeBits@data
  6700  00287A  504C               	movf	_mpu6050,w,c
  6701  00287C  ECA5  F010         	call	_I2Cdev_writeBits
  6702  002880  0012               	return		;funcret
  6703  002882                     __end_of_MPU6050_setClockSource:
  6704                           	opt stack 0
  6705                           tblptru	equ	0xFF8
  6706                           tblptrh	equ	0xFF7
  6707                           tblptrl	equ	0xFF6
  6708                           tablat	equ	0xFF5
  6709                           prodh	equ	0xFF4
  6710                           prodl	equ	0xFF3
  6711                           postinc0	equ	0xFEE
  6712                           wreg	equ	0xFE8
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           fsr2h	equ	0xFDA
  6717                           fsr2l	equ	0xFD9
  6718                           status	equ	0xFD8
  6719                           
  6720 ;; *************** function _I2Cdev_writeBits *****************
  6721 ;; Defined at:
  6722 ;;		line 373 in file "I2Cdev.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  devAddr         1    wreg     unsigned char 
  6725 ;;  regAddr         1   36[COMRAM] unsigned char 
  6726 ;;  bitStart        1   37[COMRAM] unsigned char 
  6727 ;;  length          1   38[COMRAM] unsigned char 
  6728 ;;  data            1   39[COMRAM] unsigned char 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  devAddr         1   43[COMRAM] unsigned char 
  6731 ;;  mask            1   44[COMRAM] unsigned char 
  6732 ;;  b               1   45[COMRAM] unsigned char 
  6733 ;; Return value:  Size  Location     Type
  6734 ;;                  1    wreg      unsigned char 
  6735 ;; Registers used:
  6736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6742 ;;      Params:         4       0       0       0       0       0       0       0       0
  6743 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6744 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6745 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6746 ;;Total ram usage:       10 bytes
  6747 ;; Hardware stack levels used:    1
  6748 ;; Hardware stack levels required when called:    4
  6749 ;; This function calls:
  6750 ;;		_I2Cdev_readByte
  6751 ;;		_I2Cdev_writeByte
  6752 ;; This function is called by:
  6753 ;;		_MPU6050_setFullScaleGyroRange
  6754 ;;		_MPU6050_setFullScaleAccelRange
  6755 ;;		_MPU6050_setClockSource
  6756 ;;		_MPU6050_setExternalFrameSync
  6757 ;;		_MPU6050_setDLPFMode
  6758 ;;		_MPU6050_setDHPFMode
  6759 ;;		_MPU6050_setMasterClockSpeed
  6760 ;;		_MPU6050_setSlaveDataLength
  6761 ;;		_MPU6050_setSlave4MasterDelay
  6762 ;;		_MPU6050_setAccelerometerPowerOnDelay
  6763 ;;		_MPU6050_setFreefallDetectionCounterDecrement
  6764 ;;		_MPU6050_setMotionDetectionCounterDecrement
  6765 ;;		_MPU6050_setWakeFrequency
  6766 ;;		_MPU6050_setDeviceID
  6767 ;;		_MPU6050_setXGyroOffsetTC
  6768 ;;		_MPU6050_setYGyroOffsetTC
  6769 ;;		_MPU6050_setZGyroOffsetTC
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text35
  6774  00214A                     __ptext35:
  6775                           	opt stack 0
  6776  00214A                     _I2Cdev_writeBits:
  6777                           	opt stack 24
  6778                           
  6779                           ;incstack = 0
  6780                           ;I2Cdev_writeBits@devAddr stored from wreg
  6781  00214A  6E2C               	movwf	I2Cdev_writeBits@devAddr,c
  6782                           
  6783                           ;I2Cdev.c: 381: uint8_t b;
  6784                           ;I2Cdev.c: 382: if (I2Cdev_readByte(devAddr, regAddr, &b) != 0) {
  6785  00214C  C025  F021         	movff	I2Cdev_writeBits@regAddr,I2Cdev_readByte@regAddr
  6786  002150  0E2E               	movlw	low I2Cdev_writeBits@b
  6787  002152  6E22               	movwf	I2Cdev_readByte@data,c
  6788  002154  0E00               	movlw	high I2Cdev_writeBits@b
  6789  002156  6E23               	movwf	I2Cdev_readByte@data+1,c
  6790  002158  502C               	movf	I2Cdev_writeBits@devAddr,w,c
  6791  00215A  EC4E  F014         	call	_I2Cdev_readByte
  6792  00215E  0900               	iorlw	0
  6793  002160  B4D8               	btfsc	status,2,c
  6794  002162  0012               	return	
  6795                           
  6796                           ;I2Cdev.c: 383: uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
  6797  002164  5027               	movf	I2Cdev_writeBits@length,w,c
  6798  002166  0800               	sublw	0
  6799  002168  2426               	addwf	I2Cdev_writeBits@bitStart,w,c
  6800  00216A  6E29               	movwf	??_I2Cdev_writeBits& (0+255),c
  6801  00216C  0E01               	movlw	1
  6802  00216E  2629               	addwf	??_I2Cdev_writeBits,f,c
  6803  002170  C027  F02A         	movff	I2Cdev_writeBits@length,??_I2Cdev_writeBits+1
  6804  002174  0E01               	movlw	1
  6805  002176  6E2B               	movwf	(??_I2Cdev_writeBits+2)& (0+255),c
  6806  002178  2A2A               	incf	??_I2Cdev_writeBits+1,f,c
  6807  00217A  D002               	goto	u2554
  6808  00217C                     u2555:
  6809  00217C  90D8               	bcf	status,0,c
  6810  00217E  362B               	rlcf	??_I2Cdev_writeBits+2,f,c
  6811  002180                     u2554:
  6812  002180  2E2A               	decfsz	??_I2Cdev_writeBits+1,f,c
  6813  002182  D7FC               	goto	u2555
  6814  002184  0EFF               	movlw	255
  6815  002186  262B               	addwf	??_I2Cdev_writeBits+2,f,c
  6816  002188  2A29               	incf	??_I2Cdev_writeBits,f,c
  6817  00218A  D002               	goto	u2564
  6818  00218C                     u2565:
  6819  00218C  90D8               	bcf	status,0,c
  6820  00218E  362B               	rlcf	??_I2Cdev_writeBits+2,f,c
  6821  002190                     u2564:
  6822  002190  2E29               	decfsz	??_I2Cdev_writeBits,f,c
  6823  002192  D7FC               	goto	u2565
  6824  002194  502B               	movf	??_I2Cdev_writeBits+2,w,c
  6825  002196  6E2D               	movwf	I2Cdev_writeBits@mask,c
  6826                           
  6827                           ;I2Cdev.c: 384: data <<= (bitStart - length + 1);
  6828  002198  5027               	movf	I2Cdev_writeBits@length,w,c
  6829  00219A  0800               	sublw	0
  6830  00219C  2426               	addwf	I2Cdev_writeBits@bitStart,w,c
  6831  00219E  6E29               	movwf	??_I2Cdev_writeBits& (0+255),c
  6832  0021A0  0E01               	movlw	1
  6833  0021A2  2629               	addwf	??_I2Cdev_writeBits,f,c
  6834  0021A4  2829               	incf	??_I2Cdev_writeBits,w,c
  6835  0021A6  6E2A               	movwf	(??_I2Cdev_writeBits+1)& (0+255),c
  6836  0021A8  D002               	goto	u2570
  6837  0021AA                     u2575:
  6838  0021AA  90D8               	bcf	status,0,c
  6839  0021AC  3628               	rlcf	I2Cdev_writeBits@data,f,c
  6840  0021AE                     u2570:
  6841  0021AE  2E2A               	decfsz	(??_I2Cdev_writeBits+1)& (0+255),f,c
  6842  0021B0  D7FC               	goto	u2575
  6843                           
  6844                           ;I2Cdev.c: 385: data &= mask;
  6845  0021B2  502D               	movf	I2Cdev_writeBits@mask,w,c
  6846  0021B4  1628               	andwf	I2Cdev_writeBits@data,f,c
  6847                           
  6848                           ;I2Cdev.c: 386: b &= ~(mask);
  6849  0021B6  502D               	movf	I2Cdev_writeBits@mask,w,c
  6850  0021B8  0AFF               	xorlw	255
  6851  0021BA  162E               	andwf	I2Cdev_writeBits@b,f,c
  6852                           
  6853                           ;I2Cdev.c: 387: b |= data;
  6854  0021BC  5028               	movf	I2Cdev_writeBits@data,w,c
  6855  0021BE  122E               	iorwf	I2Cdev_writeBits@b,f,c
  6856                           
  6857                           ;I2Cdev.c: 388: return I2Cdev_writeByte(devAddr, regAddr, b);
  6858                           ;	Return value of _I2Cdev_writeBits is never used
  6859  0021C0  C025  F009         	movff	I2Cdev_writeBits@regAddr,I2Cdev_writeByte@regAddr
  6860  0021C4  C02E  F00A         	movff	I2Cdev_writeBits@b,I2Cdev_writeByte@data
  6861  0021C8  502C               	movf	I2Cdev_writeBits@devAddr,w,c
  6862  0021CA  EC41  F014         	call	_I2Cdev_writeByte
  6863                           
  6864                           ;I2Cdev.c: 390: return 0;
  6865                           ;	Return value of _I2Cdev_writeBits is never used
  6866                           
  6867                           ;I2Cdev.c: 389: } else {
  6868  0021CE  0012               	return	
  6869  0021D0                     __end_of_I2Cdev_writeBits:
  6870                           	opt stack 0
  6871                           tblptru	equ	0xFF8
  6872                           tblptrh	equ	0xFF7
  6873                           tblptrl	equ	0xFF6
  6874                           tablat	equ	0xFF5
  6875                           prodh	equ	0xFF4
  6876                           prodl	equ	0xFF3
  6877                           postinc0	equ	0xFEE
  6878                           wreg	equ	0xFE8
  6879                           indf2	equ	0xFDF
  6880                           postinc2	equ	0xFDE
  6881                           postdec2	equ	0xFDD
  6882                           fsr2h	equ	0xFDA
  6883                           fsr2l	equ	0xFD9
  6884                           status	equ	0xFD8
  6885                           
  6886 ;; *************** function _I2Cdev_writeByte *****************
  6887 ;; Defined at:
  6888 ;;		line 286 in file "I2Cdev.c"
  6889 ;; Parameters:    Size  Location     Type
  6890 ;;  devAddr         1    wreg     unsigned char 
  6891 ;;  regAddr         1    8[COMRAM] unsigned char 
  6892 ;;  data            1    9[COMRAM] unsigned char 
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;  devAddr         1   10[COMRAM] unsigned char 
  6895 ;; Return value:  Size  Location     Type
  6896 ;;                  1    wreg      unsigned char 
  6897 ;; Registers used:
  6898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6899 ;; Tracked objects:
  6900 ;;		On entry : 0/0
  6901 ;;		On exit  : 0/0
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6904 ;;      Params:         2       0       0       0       0       0       0       0       0
  6905 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6906 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6907 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6908 ;;Total ram usage:        3 bytes
  6909 ;; Hardware stack levels used:    1
  6910 ;; Hardware stack levels required when called:    3
  6911 ;; This function calls:
  6912 ;;		_I2Cdev_writeBytes
  6913 ;; This function is called by:
  6914 ;;		_I2Cdev_writeBit
  6915 ;;		_I2Cdev_writeBits
  6916 ;;		_MPU6050_setRate
  6917 ;;		_MPU6050_setFreefallDetectionThreshold
  6918 ;;		_MPU6050_setFreefallDetectionDuration
  6919 ;;		_MPU6050_setMotionDetectionThreshold
  6920 ;;		_MPU6050_setMotionDetectionDuration
  6921 ;;		_MPU6050_setZeroMotionDetectionThreshold
  6922 ;;		_MPU6050_setZeroMotionDetectionDuration
  6923 ;;		_MPU6050_setSlaveAddress
  6924 ;;		_MPU6050_setSlaveRegister
  6925 ;;		_MPU6050_setSlave4Address
  6926 ;;		_MPU6050_setSlave4Register
  6927 ;;		_MPU6050_setSlave4OutputByte
  6928 ;;		_MPU6050_setIntEnabled
  6929 ;;		_MPU6050_setSlaveOutputByte
  6930 ;;		_MPU6050_setFIFOByte
  6931 ;;		_MPU6050_setXFineGain
  6932 ;;		_MPU6050_setYFineGain
  6933 ;;		_MPU6050_setZFineGain
  6934 ;;		_MPU6050_setMemoryBank
  6935 ;;		_MPU6050_setMemoryStartAddress
  6936 ;;		_MPU6050_writeMemoryByte
  6937 ;;		_MPU6050_setDMPConfig1
  6938 ;;		_MPU6050_setDMPConfig2
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text36
  6943  002882                     __ptext36:
  6944                           	opt stack 0
  6945  002882                     _I2Cdev_writeByte:
  6946                           	opt stack 24
  6947                           
  6948                           ;incstack = 0
  6949                           ;I2Cdev_writeByte@devAddr stored from wreg
  6950  002882  6E0B               	movwf	I2Cdev_writeByte@devAddr,c
  6951                           
  6952                           ;I2Cdev.c: 287: return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
  6953  002884  C009  F003         	movff	I2Cdev_writeByte@regAddr,I2Cdev_writeBytes@regAddr
  6954  002888  0E01               	movlw	1
  6955  00288A  6E04               	movwf	I2Cdev_writeBytes@length,c
  6956  00288C  0E0A               	movlw	low I2Cdev_writeByte@data
  6957  00288E  6E05               	movwf	I2Cdev_writeBytes@data,c
  6958  002890  0E00               	movlw	high I2Cdev_writeByte@data
  6959  002892  6E06               	movwf	I2Cdev_writeBytes@data+1,c
  6960  002894  500B               	movf	I2Cdev_writeByte@devAddr,w,c
  6961  002896  ECFA  F012         	call	_I2Cdev_writeBytes
  6962  00289A  0012               	return	
  6963  00289C                     __end_of_I2Cdev_writeByte:
  6964                           	opt stack 0
  6965                           tblptru	equ	0xFF8
  6966                           tblptrh	equ	0xFF7
  6967                           tblptrl	equ	0xFF6
  6968                           tablat	equ	0xFF5
  6969                           prodh	equ	0xFF4
  6970                           prodl	equ	0xFF3
  6971                           postinc0	equ	0xFEE
  6972                           wreg	equ	0xFE8
  6973                           indf2	equ	0xFDF
  6974                           postinc2	equ	0xFDE
  6975                           postdec2	equ	0xFDD
  6976                           fsr2h	equ	0xFDA
  6977                           fsr2l	equ	0xFD9
  6978                           status	equ	0xFD8
  6979                           
  6980 ;; *************** function _I2Cdev_writeBytes *****************
  6981 ;; Defined at:
  6982 ;;		line 254 in file "I2Cdev.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;  devAddr         1    wreg     unsigned char 
  6985 ;;  regAddr         1    2[COMRAM] unsigned char 
  6986 ;;  length          1    3[COMRAM] unsigned char 
  6987 ;;  data            2    4[COMRAM] PTR unsigned char 
  6988 ;;		 -> I2Cdev_writeByte@data(1), 
  6989 ;; Auto vars:     Size  Location     Type
  6990 ;;  devAddr         1    6[COMRAM] unsigned char 
  6991 ;;  i               1    7[COMRAM] unsigned char 
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      unsigned char 
  6994 ;; Registers used:
  6995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7001 ;;      Params:         4       0       0       0       0       0       0       0       0
  7002 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7004 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7005 ;;Total ram usage:        6 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    2
  7008 ;; This function calls:
  7009 ;;		_IdleI2C
  7010 ;;		_WriteI2C
  7011 ;; This function is called by:
  7012 ;;		_I2Cdev_writeByte
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           	psect	text37
  7017  0025F4                     __ptext37:
  7018                           	opt stack 0
  7019  0025F4                     _I2Cdev_writeBytes:
  7020                           	opt stack 24
  7021                           
  7022                           ;incstack = 0
  7023                           ;I2Cdev_writeBytes@devAddr stored from wreg
  7024  0025F4  6E07               	movwf	I2Cdev_writeBytes@devAddr,c
  7025                           
  7026                           ;I2Cdev.c: 256: IdleI2C();
  7027  0025F6  EC7A  F014         	call	_IdleI2C	;wreg free
  7028                           
  7029                           ;I2Cdev.c: 257: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  7030  0025FA  80C5               	bsf	4037,0,c	;volatile
  7031  0025FC  B0C5               	btfsc	4037,0,c	;volatile
  7032  0025FE  D7FE               	goto	l190
  7033                           
  7034                           ;I2Cdev.c: 260: IdleI2C();
  7035  002600  EC7A  F014         	call	_IdleI2C	;wreg free
  7036                           
  7037                           ;I2Cdev.c: 261: WriteI2C(devAddr << 1 | 0x00);
  7038  002604  5007               	movf	I2Cdev_writeBytes@devAddr,w,c
  7039  002606  2407               	addwf	I2Cdev_writeBytes@devAddr,w,c
  7040  002608  EC27  F013         	call	_WriteI2C
  7041                           
  7042                           ;I2Cdev.c: 264: IdleI2C();
  7043  00260C  EC7A  F014         	call	_IdleI2C	;wreg free
  7044                           
  7045                           ;I2Cdev.c: 265: WriteI2C(regAddr);
  7046  002610  5003               	movf	I2Cdev_writeBytes@regAddr,w,c
  7047  002612  EC27  F013         	call	_WriteI2C
  7048                           
  7049                           ;I2Cdev.c: 267: for (uint8_t i = 0; i < length; i++) {
  7050  002616  0E00               	movlw	0
  7051  002618  6E08               	movwf	I2Cdev_writeBytes@i,c
  7052  00261A  D00E               	goto	l192
  7053  00261C                     
  7054                           ;I2Cdev.c: 269: IdleI2C();
  7055  00261C  EC7A  F014         	call	_IdleI2C	;wreg free
  7056                           
  7057                           ;I2Cdev.c: 270: WriteI2C(data[i]);
  7058  002620  5008               	movf	I2Cdev_writeBytes@i,w,c
  7059  002622  0D01               	mullw	1
  7060  002624  50F3               	movf	prodl,w,c
  7061  002626  2405               	addwf	I2Cdev_writeBytes@data,w,c
  7062  002628  6ED9               	movwf	fsr2l,c
  7063  00262A  50F4               	movf	prodh,w,c
  7064  00262C  2006               	addwfc	I2Cdev_writeBytes@data+1,w,c
  7065  00262E  6EDA               	movwf	fsr2h,c
  7066  002630  50DF               	movf	indf2,w,c
  7067  002632  EC27  F013         	call	_WriteI2C
  7068  002636  2A08               	incf	I2Cdev_writeBytes@i,f,c
  7069  002638                     l192:
  7070  002638  5004               	movf	I2Cdev_writeBytes@length,w,c
  7071  00263A  5C08               	subwf	I2Cdev_writeBytes@i,w,c
  7072  00263C  A0D8               	btfss	status,0,c
  7073  00263E  D7EE               	goto	l193
  7074                           
  7075                           ;I2Cdev.c: 271: }
  7076                           ;I2Cdev.c: 274: IdleI2C();
  7077  002640  EC7A  F014         	call	_IdleI2C	;wreg free
  7078                           
  7079                           ;I2Cdev.c: 275: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  7080  002644  84C5               	bsf	4037,2,c	;volatile
  7081  002646  B4C5               	btfsc	4037,2,c	;volatile
  7082  002648  D7FE               	goto	l196
  7083                           
  7084                           ;I2Cdev.c: 277: return 1;
  7085  00264A  0E01               	movlw	1
  7086  00264C  0012               	return	
  7087  00264E                     __end_of_I2Cdev_writeBytes:
  7088                           	opt stack 0
  7089                           tblptru	equ	0xFF8
  7090                           tblptrh	equ	0xFF7
  7091                           tblptrl	equ	0xFF6
  7092                           tablat	equ	0xFF5
  7093                           prodh	equ	0xFF4
  7094                           prodl	equ	0xFF3
  7095                           postinc0	equ	0xFEE
  7096                           wreg	equ	0xFE8
  7097                           indf2	equ	0xFDF
  7098                           postinc2	equ	0xFDE
  7099                           postdec2	equ	0xFDD
  7100                           fsr2h	equ	0xFDA
  7101                           fsr2l	equ	0xFD9
  7102                           status	equ	0xFD8
  7103                           
  7104 ;; *************** function _I2Cdev_readByte *****************
  7105 ;; Defined at:
  7106 ;;		line 95 in file "I2Cdev.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;  devAddr         1    wreg     unsigned char 
  7109 ;;  regAddr         1   32[COMRAM] unsigned char 
  7110 ;;  data            2   33[COMRAM] PTR unsigned char 
  7111 ;;		 -> mpu6050(15), I2Cdev_writeBits@b(1), I2Cdev_writeBit@b(1), I2Cdev_readBits@b(1), 
  7112 ;;		 -> I2Cdev_readBit@b(1), 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;  devAddr         1   35[COMRAM] unsigned char 
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      char 
  7117 ;; Registers used:
  7118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7124 ;;      Params:         3       0       0       0       0       0       0       0       0
  7125 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7126 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7127 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7128 ;;Total ram usage:        4 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    3
  7131 ;; This function calls:
  7132 ;;		_I2Cdev_readBytes
  7133 ;; This function is called by:
  7134 ;;		_I2Cdev_readBits
  7135 ;;		_I2Cdev_writeBit
  7136 ;;		_I2Cdev_writeBits
  7137 ;;		_I2Cdev_readBit
  7138 ;;		_MPU6050_getRate
  7139 ;;		_MPU6050_getFreefallDetectionThreshold
  7140 ;;		_MPU6050_getFreefallDetectionDuration
  7141 ;;		_MPU6050_getMotionDetectionThreshold
  7142 ;;		_MPU6050_getMotionDetectionDuration
  7143 ;;		_MPU6050_getZeroMotionDetectionThreshold
  7144 ;;		_MPU6050_getZeroMotionDetectionDuration
  7145 ;;		_MPU6050_getSlaveAddress
  7146 ;;		_MPU6050_getSlaveRegister
  7147 ;;		_MPU6050_getSlave4Address
  7148 ;;		_MPU6050_getSlave4Register
  7149 ;;		_MPU6050_getSlate4InputByte
  7150 ;;		_MPU6050_getIntEnabled
  7151 ;;		_MPU6050_getIntStatus
  7152 ;;		_MPU6050_getExternalSensorByte
  7153 ;;		_MPU6050_getFIFOByte
  7154 ;;		_MPU6050_getXFineGain
  7155 ;;		_MPU6050_getYFineGain
  7156 ;;		_MPU6050_getZFineGain
  7157 ;;		_MPU6050_readMemoryByte
  7158 ;;		_MPU6050_getDMPConfig1
  7159 ;;		_MPU6050_getDMPConfig2
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           	psect	text38
  7164  00289C                     __ptext38:
  7165                           	opt stack 0
  7166  00289C                     _I2Cdev_readByte:
  7167                           	opt stack 24
  7168                           
  7169                           ;incstack = 0
  7170                           ;I2Cdev_readByte@devAddr stored from wreg
  7171  00289C  6E24               	movwf	I2Cdev_readByte@devAddr,c
  7172                           
  7173                           ;I2Cdev.c: 96: return I2Cdev_readBytes(devAddr, regAddr, 1, data);
  7174  00289E  C021  F015         	movff	I2Cdev_readByte@regAddr,I2Cdev_readBytes@regAddr
  7175  0028A2  0E01               	movlw	1
  7176  0028A4  6E16               	movwf	I2Cdev_readBytes@length,c
  7177  0028A6  C022  F017         	movff	I2Cdev_readByte@data,I2Cdev_readBytes@data
  7178  0028AA  C023  F018         	movff	I2Cdev_readByte@data+1,I2Cdev_readBytes@data+1
  7179  0028AE  5024               	movf	I2Cdev_readByte@devAddr,w,c
  7180  0028B0  EC1E  F00F         	call	_I2Cdev_readBytes
  7181  0028B4  0012               	return	
  7182  0028B6                     __end_of_I2Cdev_readByte:
  7183                           	opt stack 0
  7184                           tblptru	equ	0xFF8
  7185                           tblptrh	equ	0xFF7
  7186                           tblptrl	equ	0xFF6
  7187                           tablat	equ	0xFF5
  7188                           prodh	equ	0xFF4
  7189                           prodl	equ	0xFF3
  7190                           postinc0	equ	0xFEE
  7191                           wreg	equ	0xFE8
  7192                           indf2	equ	0xFDF
  7193                           postinc2	equ	0xFDE
  7194                           postdec2	equ	0xFDD
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           
  7199 ;; *************** function _MPU6050_getMotion6 *****************
  7200 ;; Defined at:
  7201 ;;		line 1733 in file "MPU6050.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;  ax              2   32[COMRAM] PTR int 
  7204 ;;		 -> main@ax(2), 
  7205 ;;  ay              2   34[COMRAM] PTR int 
  7206 ;;		 -> main@ay(2), 
  7207 ;;  az              2   36[COMRAM] PTR int 
  7208 ;;		 -> main@az(2), 
  7209 ;;  gx              2   38[COMRAM] PTR int 
  7210 ;;		 -> main@gx(2), 
  7211 ;;  gy              2   40[COMRAM] PTR int 
  7212 ;;		 -> main@gy(2), 
  7213 ;;  gz              2   42[COMRAM] PTR int 
  7214 ;;		 -> main@gz(2), 
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;		None
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      void 
  7219 ;; Registers used:
  7220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7226 ;;      Params:        12       0       0       0       0       0       0       0       0
  7227 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7228 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7229 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7230 ;;Total ram usage:       14 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    3
  7233 ;; This function calls:
  7234 ;;		_I2Cdev_readBytes
  7235 ;; This function is called by:
  7236 ;;		_main
  7237 ;;		_MPU6050_getMotion9
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text39
  7242  001D4C                     __ptext39:
  7243                           	opt stack 0
  7244  001D4C                     _MPU6050_getMotion6:
  7245                           	opt stack 27
  7246                           
  7247                           ;MPU6050.c: 1734: I2Cdev_readBytes(mpu6050.devAddr, 0x3B, 14, mpu6050.buffer);
  7248                           
  7249                           ;incstack = 0
  7250  001D4C  0E3B               	movlw	59
  7251  001D4E  6E15               	movwf	I2Cdev_readBytes@regAddr,c
  7252  001D50  0E0E               	movlw	14
  7253  001D52  6E16               	movwf	I2Cdev_readBytes@length,c
  7254  001D54  0E4D               	movlw	low (_mpu6050+1)
  7255  001D56  6E17               	movwf	I2Cdev_readBytes@data,c
  7256  001D58  0E00               	movlw	high (_mpu6050+1)
  7257  001D5A  6E18               	movwf	I2Cdev_readBytes@data+1,c
  7258  001D5C  504C               	movf	_mpu6050,w,c
  7259  001D5E  EC1E  F00F         	call	_I2Cdev_readBytes
  7260                           
  7261                           ;MPU6050.c: 1735: *ax = (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
  7262  001D62  504E               	movf	_mpu6050+2,w,c
  7263  001D64  C04D  F02D         	movff	_mpu6050+1,??_MPU6050_getMotion6
  7264  001D68  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  7265  001D6A  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  7266  001D6E  6A2D               	clrf	??_MPU6050_getMotion6,c
  7267  001D70  122D               	iorwf	??_MPU6050_getMotion6,f,c
  7268  001D72  0E00               	movlw	0
  7269  001D74  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  7270  001D76  C021  FFD9         	movff	MPU6050_getMotion6@ax,fsr2l
  7271  001D7A  C022  FFDA         	movff	MPU6050_getMotion6@ax+1,fsr2h
  7272  001D7E  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  7273  001D82  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  7274                           
  7275                           ;MPU6050.c: 1736: *ay = (((int16_t)mpu6050.buffer[2]) << 8) | mpu6050.buffer[3];
  7276  001D86  5050               	movf	_mpu6050+4,w,c
  7277  001D88  C04F  F02D         	movff	_mpu6050+3,??_MPU6050_getMotion6
  7278  001D8C  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  7279  001D8E  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  7280  001D92  6A2D               	clrf	??_MPU6050_getMotion6,c
  7281  001D94  122D               	iorwf	??_MPU6050_getMotion6,f,c
  7282  001D96  0E00               	movlw	0
  7283  001D98  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  7284  001D9A  C023  FFD9         	movff	MPU6050_getMotion6@ay,fsr2l
  7285  001D9E  C024  FFDA         	movff	MPU6050_getMotion6@ay+1,fsr2h
  7286  001DA2  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  7287  001DA6  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  7288                           
  7289                           ;MPU6050.c: 1737: *az = (((int16_t)mpu6050.buffer[4]) << 8) | mpu6050.buffer[5];
  7290  001DAA  5052               	movf	_mpu6050+6,w,c
  7291  001DAC  C051  F02D         	movff	_mpu6050+5,??_MPU6050_getMotion6
  7292  001DB0  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  7293  001DB2  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  7294  001DB6  6A2D               	clrf	??_MPU6050_getMotion6,c
  7295  001DB8  122D               	iorwf	??_MPU6050_getMotion6,f,c
  7296  001DBA  0E00               	movlw	0
  7297  001DBC  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  7298  001DBE  C025  FFD9         	movff	MPU6050_getMotion6@az,fsr2l
  7299  001DC2  C026  FFDA         	movff	MPU6050_getMotion6@az+1,fsr2h
  7300  001DC6  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  7301  001DCA  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  7302                           
  7303                           ;MPU6050.c: 1738: *gx = (((int16_t)mpu6050.buffer[8]) << 8) | mpu6050.buffer[9];
  7304  001DCE  5056               	movf	_mpu6050+10,w,c
  7305  001DD0  C055  F02D         	movff	_mpu6050+9,??_MPU6050_getMotion6
  7306  001DD4  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  7307  001DD6  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  7308  001DDA  6A2D               	clrf	??_MPU6050_getMotion6,c
  7309  001DDC  122D               	iorwf	??_MPU6050_getMotion6,f,c
  7310  001DDE  0E00               	movlw	0
  7311  001DE0  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  7312  001DE2  C027  FFD9         	movff	MPU6050_getMotion6@gx,fsr2l
  7313  001DE6  C028  FFDA         	movff	MPU6050_getMotion6@gx+1,fsr2h
  7314  001DEA  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  7315  001DEE  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  7316                           
  7317                           ;MPU6050.c: 1739: *gy = (((int16_t)mpu6050.buffer[10]) << 8) | mpu6050.buffer[11];
  7318  001DF2  5058               	movf	_mpu6050+12,w,c
  7319  001DF4  C057  F02D         	movff	_mpu6050+11,??_MPU6050_getMotion6
  7320  001DF8  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  7321  001DFA  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  7322  001DFE  6A2D               	clrf	??_MPU6050_getMotion6,c
  7323  001E00  122D               	iorwf	??_MPU6050_getMotion6,f,c
  7324  001E02  0E00               	movlw	0
  7325  001E04  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  7326  001E06  C029  FFD9         	movff	MPU6050_getMotion6@gy,fsr2l
  7327  001E0A  C02A  FFDA         	movff	MPU6050_getMotion6@gy+1,fsr2h
  7328  001E0E  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  7329  001E12  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  7330                           
  7331                           ;MPU6050.c: 1740: *gz = (((int16_t)mpu6050.buffer[12]) << 8) | mpu6050.buffer[13];
  7332  001E16  505A               	movf	_mpu6050+14,w,c
  7333  001E18  C059  F02D         	movff	_mpu6050+13,??_MPU6050_getMotion6
  7334  001E1C  6A2E               	clrf	(??_MPU6050_getMotion6+1)& (0+255),c
  7335  001E1E  C02D  F02E         	movff	??_MPU6050_getMotion6,??_MPU6050_getMotion6+1
  7336  001E22  6A2D               	clrf	??_MPU6050_getMotion6,c
  7337  001E24  122D               	iorwf	??_MPU6050_getMotion6,f,c
  7338  001E26  0E00               	movlw	0
  7339  001E28  122E               	iorwf	??_MPU6050_getMotion6+1,f,c
  7340  001E2A  C02B  FFD9         	movff	MPU6050_getMotion6@gz,fsr2l
  7341  001E2E  C02C  FFDA         	movff	MPU6050_getMotion6@gz+1,fsr2h
  7342  001E32  C02D  FFDE         	movff	??_MPU6050_getMotion6,postinc2
  7343  001E36  C02E  FFDD         	movff	??_MPU6050_getMotion6+1,postdec2
  7344  001E3A  0012               	return		;funcret
  7345  001E3C                     __end_of_MPU6050_getMotion6:
  7346                           	opt stack 0
  7347                           tblptru	equ	0xFF8
  7348                           tblptrh	equ	0xFF7
  7349                           tblptrl	equ	0xFF6
  7350                           tablat	equ	0xFF5
  7351                           prodh	equ	0xFF4
  7352                           prodl	equ	0xFF3
  7353                           postinc0	equ	0xFEE
  7354                           wreg	equ	0xFE8
  7355                           indf2	equ	0xFDF
  7356                           postinc2	equ	0xFDE
  7357                           postdec2	equ	0xFDD
  7358                           fsr2h	equ	0xFDA
  7359                           fsr2l	equ	0xFD9
  7360                           status	equ	0xFD8
  7361                           
  7362 ;; *************** function _I2Cdev_readBytes *****************
  7363 ;; Defined at:
  7364 ;;		line 43 in file "I2Cdev.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  devAddr         1    wreg     unsigned char 
  7367 ;;  regAddr         1   20[COMRAM] unsigned char 
  7368 ;;  length          1   21[COMRAM] unsigned char 
  7369 ;;  data            2   22[COMRAM] PTR unsigned char 
  7370 ;;		 -> mpu6050(15), I2Cdev_writeBits@b(1), I2Cdev_writeBit@b(1), I2Cdev_readBits@b(1), 
  7371 ;;		 -> I2Cdev_readBit@b(1), 
  7372 ;; Auto vars:     Size  Location     Type
  7373 ;;  devAddr         1   30[COMRAM] unsigned char 
  7374 ;;  count           1   31[COMRAM] char 
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  1    wreg      char 
  7377 ;; Registers used:
  7378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7384 ;;      Params:         4       0       0       0       0       0       0       0       0
  7385 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7386 ;;      Temps:          6       0       0       0       0       0       0       0       0
  7387 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7388 ;;Total ram usage:       12 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; Hardware stack levels required when called:    2
  7391 ;; This function calls:
  7392 ;;		_IdleI2C
  7393 ;;		_ReadI2C
  7394 ;;		_WriteI2C
  7395 ;;		___wmul
  7396 ;; This function is called by:
  7397 ;;		_I2Cdev_readByte
  7398 ;;		_MPU6050_getMotion6
  7399 ;;		_MPU6050_getAcceleration
  7400 ;;		_MPU6050_getAccelerationX
  7401 ;;		_MPU6050_getAccelerationY
  7402 ;;		_MPU6050_getAccelerationZ
  7403 ;;		_MPU6050_getTemperature
  7404 ;;		_MPU6050_getRotation
  7405 ;;		_MPU6050_getRotationX
  7406 ;;		_MPU6050_getRotationY
  7407 ;;		_MPU6050_getRotationZ
  7408 ;;		_MPU6050_getExternalSensorWord
  7409 ;;		_MPU6050_getExternalSensorDWord
  7410 ;;		_MPU6050_getFIFOCount
  7411 ;;		_MPU6050_getFIFOBytes
  7412 ;;		_MPU6050_getXAccelOffset
  7413 ;;		_MPU6050_getYAccelOffset
  7414 ;;		_MPU6050_getZAccelOffset
  7415 ;;		_MPU6050_getXGyroOffset
  7416 ;;		_MPU6050_getYGyroOffset
  7417 ;;		_MPU6050_getZGyroOffset
  7418 ;;		_MPU6050_readMemoryBlock
  7419 ;; This function uses a non-reentrant model
  7420 ;;
  7421                           
  7422                           	psect	text40
  7423  001E3C                     __ptext40:
  7424                           	opt stack 0
  7425  001E3C                     _I2Cdev_readBytes:
  7426                           	opt stack 24
  7427                           
  7428                           ;incstack = 0
  7429                           ;I2Cdev_readBytes@devAddr stored from wreg
  7430  001E3C  6E1F               	movwf	I2Cdev_readBytes@devAddr,c
  7431                           
  7432                           ;I2Cdev.c: 44: int8_t count = 0;
  7433  001E3E  0E00               	movlw	0
  7434  001E40  6E20               	movwf	I2Cdev_readBytes@count,c
  7435                           
  7436                           ;I2Cdev.c: 47: IdleI2C();
  7437  001E42  EC7A  F014         	call	_IdleI2C	;wreg free
  7438                           
  7439                           ;I2Cdev.c: 48: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  7440  001E46  80C5               	bsf	4037,0,c	;volatile
  7441  001E48  B0C5               	btfsc	4037,0,c	;volatile
  7442  001E4A  D7FE               	goto	l121
  7443                           
  7444                           ;I2Cdev.c: 51: IdleI2C();
  7445  001E4C  EC7A  F014         	call	_IdleI2C	;wreg free
  7446                           
  7447                           ;I2Cdev.c: 52: WriteI2C(devAddr << 1 | 0x00);
  7448  001E50  501F               	movf	I2Cdev_readBytes@devAddr,w,c
  7449  001E52  241F               	addwf	I2Cdev_readBytes@devAddr,w,c
  7450  001E54  EC27  F013         	call	_WriteI2C
  7451                           
  7452                           ;I2Cdev.c: 55: IdleI2C();
  7453  001E58  EC7A  F014         	call	_IdleI2C	;wreg free
  7454                           
  7455                           ;I2Cdev.c: 56: WriteI2C(regAddr);
  7456  001E5C  5015               	movf	I2Cdev_readBytes@regAddr,w,c
  7457  001E5E  EC27  F013         	call	_WriteI2C
  7458                           
  7459                           ;I2Cdev.c: 59: IdleI2C();
  7460  001E62  EC7A  F014         	call	_IdleI2C	;wreg free
  7461                           
  7462                           ;I2Cdev.c: 60: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  7463  001E66  82C5               	bsf	4037,1,c	;volatile
  7464  001E68  B2C5               	btfsc	4037,1,c	;volatile
  7465  001E6A  D7FE               	goto	l124
  7466                           
  7467                           ;I2Cdev.c: 63: IdleI2C();
  7468  001E6C  EC7A  F014         	call	_IdleI2C	;wreg free
  7469                           
  7470                           ;I2Cdev.c: 64: WriteI2C(devAddr << 1 | 0x01);
  7471  001E70  80D8               	bsf	status,0,c
  7472  001E72  341F               	rlcf	I2Cdev_readBytes@devAddr,w,c
  7473  001E74  EC27  F013         	call	_WriteI2C
  7474                           
  7475                           ;I2Cdev.c: 66: for (count = 0; count < length; count++) {
  7476  001E78  0E00               	movlw	0
  7477  001E7A  6E20               	movwf	I2Cdev_readBytes@count,c
  7478  001E7C  D03B               	goto	l126
  7479  001E7E                     
  7480                           ;I2Cdev.c: 68: IdleI2C();
  7481  001E7E  EC7A  F014         	call	_IdleI2C	;wreg free
  7482                           
  7483                           ;I2Cdev.c: 69: data[count] = ReadI2C();
  7484  001E82  5020               	movf	I2Cdev_readBytes@count,w,c
  7485  001E84  6E0F               	movwf	___wmul@multiplier,c
  7486  001E86  6A10               	clrf	___wmul@multiplier+1,c
  7487  001E88  BE0F               	btfsc	___wmul@multiplier,7,c
  7488  001E8A  0610               	decf	___wmul@multiplier+1,f,c
  7489  001E8C  0E00               	movlw	0
  7490  001E8E  6E12               	movwf	___wmul@multiplicand+1,c
  7491  001E90  0E01               	movlw	1
  7492  001E92  6E11               	movwf	___wmul@multiplicand,c
  7493  001E94  EC89  F013         	call	___wmul	;wreg free
  7494  001E98  500F               	movf	?___wmul,w,c
  7495  001E9A  2417               	addwf	I2Cdev_readBytes@data,w,c
  7496  001E9C  6ED9               	movwf	fsr2l,c
  7497  001E9E  5010               	movf	?___wmul+1,w,c
  7498  001EA0  2018               	addwfc	I2Cdev_readBytes@data+1,w,c
  7499  001EA2  6EDA               	movwf	fsr2h,c
  7500  001EA4  ECFF  F013         	call	_ReadI2C	;wreg free
  7501  001EA8  6EDF               	movwf	indf2,c
  7502                           
  7503                           ;I2Cdev.c: 71: if (count == length - 1) {
  7504  001EAA  C020  F019         	movff	I2Cdev_readBytes@count,??_I2Cdev_readBytes
  7505  001EAE  6A1A               	clrf	(??_I2Cdev_readBytes+1)& (0+255),c
  7506  001EB0  BE19               	btfsc	??_I2Cdev_readBytes& (0+255),7,c
  7507  001EB2  061A               	decf	(??_I2Cdev_readBytes+1)& (0+255),f,c
  7508  001EB4  0EFF               	movlw	255
  7509  001EB6  6E1B               	movwf	(??_I2Cdev_readBytes+2)& (0+255),c
  7510  001EB8  0EFF               	movlw	255
  7511  001EBA  6E1C               	movwf	(??_I2Cdev_readBytes+3)& (0+255),c
  7512  001EBC  5016               	movf	I2Cdev_readBytes@length,w,c
  7513  001EBE  6E1D               	movwf	(??_I2Cdev_readBytes+4)& (0+255),c
  7514  001EC0  6A1E               	clrf	(??_I2Cdev_readBytes+5)& (0+255),c
  7515  001EC2  501B               	movf	??_I2Cdev_readBytes+2,w,c
  7516  001EC4  261D               	addwf	??_I2Cdev_readBytes+4,f,c
  7517  001EC6  501C               	movf	??_I2Cdev_readBytes+3,w,c
  7518  001EC8  221E               	addwfc	??_I2Cdev_readBytes+5,f,c
  7519  001ECA  5019               	movf	??_I2Cdev_readBytes,w,c
  7520  001ECC  181D               	xorwf	??_I2Cdev_readBytes+4,w,c
  7521  001ECE  E10B               	bnz	l4026
  7522  001ED0  501A               	movf	??_I2Cdev_readBytes+1,w,c
  7523  001ED2  181E               	xorwf	??_I2Cdev_readBytes+5,w,c
  7524  001ED4  A4D8               	btfss	status,2,c
  7525  001ED6  D007               	goto	l128
  7526                           
  7527                           ;I2Cdev.c: 73: IdleI2C();
  7528  001ED8  EC7A  F014         	call	_IdleI2C	;wreg free
  7529                           
  7530                           ;I2Cdev.c: 74: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  7531  001EDC  8AC5               	bsf	4037,5,c	;volatile
  7532  001EDE  88C5               	bsf	4037,4,c	;volatile
  7533  001EE0  A8C5               	btfss	4037,4,c	;volatile
  7534  001EE2  D007               	goto	u2330
  7535  001EE4  D7FD               	goto	l130
  7536  001EE6                     l128:
  7537  001EE6                     l4026:
  7538                           
  7539                           ;I2Cdev.c: 77: IdleI2C();
  7540  001EE6  EC7A  F014         	call	_IdleI2C	;wreg free
  7541                           
  7542                           ;I2Cdev.c: 78: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  7543  001EEA  9AC5               	bcf	4037,5,c	;volatile
  7544  001EEC  88C5               	bsf	4037,4,c	;volatile
  7545  001EEE  B8C5               	btfsc	4037,4,c	;volatile
  7546  001EF0  D7FE               	goto	l134
  7547  001EF2                     u2330:
  7548  001EF2  2A20               	incf	I2Cdev_readBytes@count,f,c
  7549  001EF4                     l126:
  7550  001EF4  5016               	movf	I2Cdev_readBytes@length,w,c
  7551  001EF6  6E19               	movwf	??_I2Cdev_readBytes& (0+255),c
  7552  001EF8  6A1A               	clrf	(??_I2Cdev_readBytes+1)& (0+255),c
  7553  001EFA  C020  F01B         	movff	I2Cdev_readBytes@count,??_I2Cdev_readBytes+2
  7554  001EFE  6A1C               	clrf	(??_I2Cdev_readBytes+3)& (0+255),c
  7555  001F00  BE1B               	btfsc	(??_I2Cdev_readBytes+2)& (0+255),7,c
  7556  001F02  061C               	decf	(??_I2Cdev_readBytes+3)& (0+255),f,c
  7557  001F04  5019               	movf	??_I2Cdev_readBytes,w,c
  7558  001F06  5C1B               	subwf	??_I2Cdev_readBytes+2,w,c
  7559  001F08  501C               	movf	??_I2Cdev_readBytes+3,w,c
  7560  001F0A  0A80               	xorlw	128
  7561  001F0C  6E1D               	movwf	(??_I2Cdev_readBytes+4)& (0+255),c
  7562  001F0E  501A               	movf	??_I2Cdev_readBytes+1,w,c
  7563  001F10  0A80               	xorlw	128
  7564  001F12  581D               	subwfb	(??_I2Cdev_readBytes+4)& (0+255),w,c
  7565  001F14  A0D8               	btfss	status,0,c
  7566  001F16  D7B3               	goto	l127
  7567                           
  7568                           ;I2Cdev.c: 79: }
  7569                           ;I2Cdev.c: 80: }
  7570                           ;I2Cdev.c: 83: IdleI2C();
  7571  001F18  EC7A  F014         	call	_IdleI2C	;wreg free
  7572                           
  7573                           ;I2Cdev.c: 84: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  7574  001F1C  84C5               	bsf	4037,2,c	;volatile
  7575  001F1E  B4C5               	btfsc	4037,2,c	;volatile
  7576  001F20  D7FE               	goto	l138
  7577                           
  7578                           ;I2Cdev.c: 86: return count;
  7579  001F22  5020               	movf	I2Cdev_readBytes@count,w,c
  7580  001F24  0012               	return	
  7581  001F26                     __end_of_I2Cdev_readBytes:
  7582                           	opt stack 0
  7583                           tblptru	equ	0xFF8
  7584                           tblptrh	equ	0xFF7
  7585                           tblptrl	equ	0xFF6
  7586                           tablat	equ	0xFF5
  7587                           prodh	equ	0xFF4
  7588                           prodl	equ	0xFF3
  7589                           postinc0	equ	0xFEE
  7590                           wreg	equ	0xFE8
  7591                           indf2	equ	0xFDF
  7592                           postinc2	equ	0xFDE
  7593                           postdec2	equ	0xFDD
  7594                           fsr2h	equ	0xFDA
  7595                           fsr2l	equ	0xFD9
  7596                           status	equ	0xFD8
  7597                           
  7598 ;; *************** function ___wmul *****************
  7599 ;; Defined at:
  7600 ;;		line 15 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  7601 ;; Parameters:    Size  Location     Type
  7602 ;;  multiplier      2   14[COMRAM] unsigned int 
  7603 ;;  multiplicand    2   16[COMRAM] unsigned int 
  7604 ;; Auto vars:     Size  Location     Type
  7605 ;;  product         2   18[COMRAM] unsigned int 
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  2   14[COMRAM] unsigned int 
  7608 ;; Registers used:
  7609 ;;		wreg, status,2, status,0, prodl, prodh
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7615 ;;      Params:         4       0       0       0       0       0       0       0       0
  7616 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7617 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7618 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7619 ;;Total ram usage:        6 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; This function calls:
  7622 ;;		Nothing
  7623 ;; This function is called by:
  7624 ;;		_I2Cdev_readBytes
  7625 ;;		_fround
  7626 ;;		_scale
  7627 ;;		_printf
  7628 ;;		_I2Cdev_readWords
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           	psect	text41
  7633  002712                     __ptext41:
  7634                           	opt stack 0
  7635  002712                     ___wmul:
  7636                           	opt stack 28
  7637                           
  7638                           ;incstack = 0
  7639  002712  500F               	movf	___wmul@multiplier,w,c
  7640  002714  0211               	mulwf	___wmul@multiplicand,c
  7641  002716  CFF3 F013          	movff	prodl,___wmul@product
  7642  00271A  CFF4 F014          	movff	prodh,___wmul@product+1
  7643  00271E  500F               	movf	___wmul@multiplier,w,c
  7644  002720  0212               	mulwf	___wmul@multiplicand+1,c
  7645  002722  50F3               	movf	prodl,w,c
  7646  002724  2614               	addwf	___wmul@product+1,f,c
  7647  002726  5010               	movf	___wmul@multiplier+1,w,c
  7648  002728  0211               	mulwf	___wmul@multiplicand,c
  7649  00272A  50F3               	movf	prodl,w,c
  7650  00272C  2614               	addwf	___wmul@product+1,f,c
  7651  00272E  C013  F00F         	movff	___wmul@product,?___wmul
  7652  002732  C014  F010         	movff	___wmul@product+1,?___wmul+1
  7653  002736  0012               	return	
  7654  002738                     __end_of___wmul:
  7655                           	opt stack 0
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           prodh	equ	0xFF4
  7661                           prodl	equ	0xFF3
  7662                           postinc0	equ	0xFEE
  7663                           wreg	equ	0xFE8
  7664                           indf2	equ	0xFDF
  7665                           postinc2	equ	0xFDE
  7666                           postdec2	equ	0xFDD
  7667                           fsr2h	equ	0xFDA
  7668                           fsr2l	equ	0xFD9
  7669                           status	equ	0xFD8
  7670                           
  7671 ;; *************** function _WriteI2C *****************
  7672 ;; Defined at:
  7673 ;;		line 12 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/pic18/plib/i2c/i2c_writ.c"
  7674 ;; Parameters:    Size  Location     Type
  7675 ;;  data_out        1    wreg     unsigned char 
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;  data_out        1    1[COMRAM] unsigned char 
  7678 ;; Return value:  Size  Location     Type
  7679 ;;                  1    wreg      char 
  7680 ;; Registers used:
  7681 ;;		wreg, status,2, status,0, cstack
  7682 ;; Tracked objects:
  7683 ;;		On entry : 0/0
  7684 ;;		On exit  : 0/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7687 ;;      Params:         0       0       0       0       0       0       0       0       0
  7688 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7689 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7690 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7691 ;;Total ram usage:        1 bytes
  7692 ;; Hardware stack levels used:    1
  7693 ;; Hardware stack levels required when called:    1
  7694 ;; This function calls:
  7695 ;;		_IdleI2C
  7696 ;; This function is called by:
  7697 ;;		_I2Cdev_readBytes
  7698 ;;		_I2Cdev_writeBytes
  7699 ;;		_I2Cdev_readWords
  7700 ;;		_I2Cdev_writeWords
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           	psect	text42
  7705  00264E                     __ptext42:
  7706                           	opt stack 0
  7707  00264E                     _WriteI2C:
  7708                           	opt stack 24
  7709                           
  7710                           ;incstack = 0
  7711                           ;WriteI2C@data_out stored from wreg
  7712  00264E  6E02               	movwf	WriteI2C@data_out,c
  7713  002650  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  7714  002654  BEC6               	btfsc	4038,7,c	;volatile
  7715  002656  0012               	return	
  7716                           
  7717                           ;	Return value of _WriteI2C is never used
  7718  002658  50C6               	movf	4038,w,c	;volatile
  7719  00265A  0B0F               	andlw	15
  7720  00265C  0A08               	xorlw	8
  7721  00265E  B4D8               	btfsc	status,2,c
  7722  002660  D00C               	goto	l1204
  7723  002662  50C6               	movf	4038,w,c	;volatile
  7724  002664  0B0F               	andlw	15
  7725  002666  0A0B               	xorlw	11
  7726  002668  B4D8               	btfsc	status,2,c
  7727  00266A  D007               	goto	l1204
  7728  00266C  88C6               	bsf	4038,4,c	;volatile
  7729  00266E  A69E               	btfss	3998,3,c	;volatile
  7730  002670  D7FE               	goto	l1206
  7731  002672  B4C7               	btfsc	4039,2,c	;volatile
  7732  002674  0012               	return	
  7733  002676  50C7               	movf	4039,w,c	;volatile
  7734                           
  7735                           ;	Return value of _WriteI2C is never used
  7736                           
  7737                           ;	Return value of _WriteI2C is never used
  7738  002678  0012               	return	
  7739  00267A                     l1204:
  7740  00267A  50C6               	movf	4038,w,c	;volatile
  7741  00267C  0B0F               	andlw	15
  7742  00267E  0A08               	xorlw	8
  7743  002680  B4D8               	btfsc	status,2,c
  7744  002682  D005               	goto	u2240
  7745  002684  50C6               	movf	4038,w,c	;volatile
  7746  002686  0B0F               	andlw	15
  7747  002688  0A0B               	xorlw	11
  7748  00268A  A4D8               	btfss	status,2,c
  7749  00268C  0012               	return	
  7750  00268E                     u2240:
  7751  00268E  B0C7               	btfsc	4039,0,c	;volatile
  7752  002690  D7FE               	goto	u2240
  7753  002692  EC7A  F014         	call	_IdleI2C	;wreg free
  7754  002696  50C5               	movf	4037,w,c	;volatile
  7755                           
  7756                           ;	Return value of _WriteI2C is never used
  7757                           
  7758                           ;	Return value of _WriteI2C is never used
  7759  002698  0012               	return	
  7760  00269A                     __end_of_WriteI2C:
  7761                           	opt stack 0
  7762                           tblptru	equ	0xFF8
  7763                           tblptrh	equ	0xFF7
  7764                           tblptrl	equ	0xFF6
  7765                           tablat	equ	0xFF5
  7766                           prodh	equ	0xFF4
  7767                           prodl	equ	0xFF3
  7768                           postinc0	equ	0xFEE
  7769                           wreg	equ	0xFE8
  7770                           indf2	equ	0xFDF
  7771                           postinc2	equ	0xFDE
  7772                           postdec2	equ	0xFDD
  7773                           fsr2h	equ	0xFDA
  7774                           fsr2l	equ	0xFD9
  7775                           status	equ	0xFD8
  7776                           
  7777 ;; *************** function _IdleI2C *****************
  7778 ;; Defined at:
  7779 ;;		line 24 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/pic18/plib/i2c/i2c_idle.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;		None
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;		None
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  1    wreg      void 
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7793 ;;      Params:         0       0       0       0       0       0       0       0       0
  7794 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7795 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7796 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7797 ;;Total ram usage:        1 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; This function calls:
  7800 ;;		Nothing
  7801 ;; This function is called by:
  7802 ;;		_I2Cdev_readBytes
  7803 ;;		_I2Cdev_writeBytes
  7804 ;;		_WriteI2C
  7805 ;;		_I2Cdev_readWords
  7806 ;;		_I2Cdev_writeWords
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           	psect	text43
  7811  0028F4                     __ptext43:
  7812                           	opt stack 0
  7813  0028F4                     _IdleI2C:
  7814                           	opt stack 24
  7815                           
  7816                           ;incstack = 0
  7817  0028F4  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  7818  0028F8  0E1F               	movlw	31
  7819  0028FA  1601               	andwf	??_IdleI2C,f,c
  7820  0028FC  A4D8               	btfss	status,2,c
  7821  0028FE  D7FA               	goto	_IdleI2C
  7822  002900  A4C7               	btfss	4039,2,c	;volatile
  7823  002902  0012               	return	
  7824  002904  D7F7               	goto	_IdleI2C
  7825  002906                     __end_of_IdleI2C:
  7826                           	opt stack 0
  7827                           tblptru	equ	0xFF8
  7828                           tblptrh	equ	0xFF7
  7829                           tblptrl	equ	0xFF6
  7830                           tablat	equ	0xFF5
  7831                           prodh	equ	0xFF4
  7832                           prodl	equ	0xFF3
  7833                           postinc0	equ	0xFEE
  7834                           wreg	equ	0xFE8
  7835                           indf2	equ	0xFDF
  7836                           postinc2	equ	0xFDE
  7837                           postdec2	equ	0xFDD
  7838                           fsr2h	equ	0xFDA
  7839                           fsr2l	equ	0xFD9
  7840                           status	equ	0xFD8
  7841                           
  7842 ;; *************** function _ReadI2C *****************
  7843 ;; Defined at:
  7844 ;;		line 11 in file "/home/fbuga/opt/microchip/xc8/v1.45/sources/pic18/plib/i2c/i2c_read.c"
  7845 ;; Parameters:    Size  Location     Type
  7846 ;;		None
  7847 ;; Auto vars:     Size  Location     Type
  7848 ;;		None
  7849 ;; Return value:  Size  Location     Type
  7850 ;;                  1    wreg      unsigned char 
  7851 ;; Registers used:
  7852 ;;		wreg, status,2, status,0
  7853 ;; Tracked objects:
  7854 ;;		On entry : 0/0
  7855 ;;		On exit  : 0/0
  7856 ;;		Unchanged: 0/0
  7857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7858 ;;      Params:         0       0       0       0       0       0       0       0       0
  7859 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7860 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7861 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7862 ;;Total ram usage:        0 bytes
  7863 ;; Hardware stack levels used:    1
  7864 ;; This function calls:
  7865 ;;		Nothing
  7866 ;; This function is called by:
  7867 ;;		_I2Cdev_readBytes
  7868 ;;		_I2Cdev_readWords
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           	psect	text44
  7873  0027FE                     __ptext44:
  7874                           	opt stack 0
  7875  0027FE                     _ReadI2C:
  7876                           	opt stack 25
  7877                           
  7878                           ;incstack = 0
  7879  0027FE  50C6               	movf	4038,w,c	;volatile
  7880  002800  0B0F               	andlw	15
  7881  002802  0A08               	xorlw	8
  7882  002804  B4D8               	btfsc	status,2,c
  7883  002806  D004               	goto	u2270
  7884  002808  50C6               	movf	4038,w,c	;volatile
  7885  00280A  0B0F               	andlw	15
  7886  00280C  0A0B               	xorlw	11
  7887  00280E  B4D8               	btfsc	status,2,c
  7888  002810                     u2270:
  7889  002810  86C5               	bsf	4037,3,c	;volatile
  7890  002812  A0C7               	btfss	4039,0,c	;volatile
  7891  002814  D7FE               	goto	l1178
  7892  002816  50C9               	movf	4041,w,c	;volatile
  7893  002818  0012               	return	
  7894  00281A                     __end_of_ReadI2C:
  7895                           	opt stack 0
  7896                           tblptru	equ	0xFF8
  7897                           tblptrh	equ	0xFF7
  7898                           tblptrl	equ	0xFF6
  7899                           tablat	equ	0xFF5
  7900                           prodh	equ	0xFF4
  7901                           prodl	equ	0xFF3
  7902                           postinc0	equ	0xFEE
  7903                           wreg	equ	0xFE8
  7904                           indf2	equ	0xFDF
  7905                           postinc2	equ	0xFDE
  7906                           postdec2	equ	0xFDD
  7907                           fsr2h	equ	0xFDA
  7908                           fsr2l	equ	0xFD9
  7909                           status	equ	0xFD8
  7910                           
  7911 ;; *************** function _MPU6050 *****************
  7912 ;; Defined at:
  7913 ;;		line 51 in file "MPU6050.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;  address         1    wreg     unsigned char 
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;  address         1    0[COMRAM] unsigned char 
  7918 ;; Return value:  Size  Location     Type
  7919 ;;                  1    wreg      void 
  7920 ;; Registers used:
  7921 ;;		wreg
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7927 ;;      Params:         0       0       0       0       0       0       0       0       0
  7928 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7929 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7930 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7931 ;;Total ram usage:        1 bytes
  7932 ;; Hardware stack levels used:    1
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_main
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           	psect	text45
  7941  002906                     __ptext45:
  7942                           	opt stack 0
  7943  002906                     _MPU6050:
  7944                           	opt stack 30
  7945                           
  7946                           ;incstack = 0
  7947                           ;MPU6050@address stored from wreg
  7948  002906  6E01               	movwf	MPU6050@address,c
  7949                           
  7950                           ;MPU6050.c: 52: mpu6050.devAddr = address;
  7951  002908  C001  F04C         	movff	MPU6050@address,_mpu6050
  7952  00290C  0012               	return		;funcret
  7953  00290E                     __end_of_MPU6050:
  7954                           	opt stack 0
  7955                           tblptru	equ	0xFF8
  7956                           tblptrh	equ	0xFF7
  7957                           tblptrl	equ	0xFF6
  7958                           tablat	equ	0xFF5
  7959                           prodh	equ	0xFF4
  7960                           prodl	equ	0xFF3
  7961                           postinc0	equ	0xFEE
  7962                           wreg	equ	0xFE8
  7963                           indf2	equ	0xFDF
  7964                           postinc2	equ	0xFDE
  7965                           postdec2	equ	0xFDD
  7966                           fsr2h	equ	0xFDA
  7967                           fsr2l	equ	0xFD9
  7968                           status	equ	0xFD8
  7969                           tblptru	equ	0xFF8
  7970                           tblptrh	equ	0xFF7
  7971                           tblptrl	equ	0xFF6
  7972                           tablat	equ	0xFF5
  7973                           prodh	equ	0xFF4
  7974                           prodl	equ	0xFF3
  7975                           postinc0	equ	0xFEE
  7976                           wreg	equ	0xFE8
  7977                           indf2	equ	0xFDF
  7978                           postinc2	equ	0xFDE
  7979                           postdec2	equ	0xFDD
  7980                           fsr2h	equ	0xFDA
  7981                           fsr2l	equ	0xFD9
  7982                           status	equ	0xFD8
  7983                           
  7984                           	psect	rparam
  7985  0000                     tblptru	equ	0xFF8
  7986                           tblptrh	equ	0xFF7
  7987                           tblptrl	equ	0xFF6
  7988                           tablat	equ	0xFF5
  7989                           prodh	equ	0xFF4
  7990                           prodl	equ	0xFF3
  7991                           postinc0	equ	0xFEE
  7992                           wreg	equ	0xFE8
  7993                           indf2	equ	0xFDF
  7994                           postinc2	equ	0xFDE
  7995                           postdec2	equ	0xFDD
  7996                           fsr2h	equ	0xFDA
  7997                           fsr2l	equ	0xFD9
  7998                           status	equ	0xFD8


Data Sizes:
    Strings     49
    Constant    118
    Data        0
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     75      90
    BANK0           160     51      51
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_4(CODE[5]), STR_3(CODE[14]), STR_2(CODE[15]), STR_1(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    MPU6050_getMotion6@gz	PTR int  size(2) Largest target is 2
		 -> main@gz(BANK0[2]), 

    MPU6050_getMotion6@gy	PTR int  size(2) Largest target is 2
		 -> main@gy(BANK0[2]), 

    MPU6050_getMotion6@gx	PTR int  size(2) Largest target is 2
		 -> main@gx(BANK0[2]), 

    MPU6050_getMotion6@az	PTR int  size(2) Largest target is 2
		 -> main@az(BANK0[2]), 

    MPU6050_getMotion6@ay	PTR int  size(2) Largest target is 2
		 -> main@ay(BANK0[2]), 

    MPU6050_getMotion6@ax	PTR int  size(2) Largest target is 2
		 -> main@ax(BANK0[2]), 

    I2Cdev_writeBytes@data	PTR unsigned char  size(2) Largest target is 1
		 -> I2Cdev_writeByte@data(COMRAM[1]), 

    I2Cdev_readBits@data	PTR unsigned char  size(2) Largest target is 15
		 -> mpu6050(COMRAM[15]), 

    I2Cdev_readByte@data	PTR unsigned char  size(2) Largest target is 15
		 -> mpu6050(COMRAM[15]), I2Cdev_writeBits@b(COMRAM[1]), I2Cdev_writeBit@b(COMRAM[1]), I2Cdev_readBits@b(COMRAM[1]), 
		 -> I2Cdev_readBit@b(COMRAM[1]), 

    I2Cdev_readBytes@data	PTR unsigned char  size(2) Largest target is 15
		 -> mpu6050(COMRAM[15]), I2Cdev_writeBits@b(COMRAM[1]), I2Cdev_writeBit@b(COMRAM[1]), I2Cdev_readBits@b(COMRAM[1]), 
		 -> I2Cdev_readBit@b(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    _initBT->_USART_Init
    _USART_Init->___ftadd
    _USART_Init->___fttol
    ___fttol->_scale
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___altoft->___ftpack
    ___awtoft->___ftpack
    _MPU6050_getDeviceID->_I2Cdev_readBits
    _I2Cdev_readBits->_I2Cdev_readByte
    _MPU6050_initialize->_MPU6050_setSleepEnabled
    _MPU6050_setSleepEnabled->_I2Cdev_writeBit
    _I2Cdev_writeBit->_I2Cdev_readByte
    _MPU6050_setFullScaleGyroRange->_I2Cdev_writeBits
    _MPU6050_setFullScaleAccelRange->_I2Cdev_writeBits
    _MPU6050_setClockSource->_I2Cdev_writeBits
    _I2Cdev_writeBits->_I2Cdev_readByte
    _I2Cdev_writeByte->_I2Cdev_writeBytes
    _I2Cdev_writeBytes->_WriteI2C
    _I2Cdev_readByte->_I2Cdev_readBytes
    _MPU6050_getMotion6->_I2Cdev_readBytes
    _I2Cdev_readBytes->___wmul
    ___wmul->___awdiv
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                47    47      0  207781
                                             74 COMRAM     1     1      0
                                             23 BANK0     28    28      0
                            _MPU6050
                 _MPU6050_getMotion6
                 _MPU6050_initialize
             _MPU6050_testConnection
                            _OpenI2C
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                             _initBT
                             _initIO
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   52656
                                             63 COMRAM    11     6      5
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12402
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   12204
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5428
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2689
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5071
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     273
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _initIO                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initBT                                               1     1      0   11111
                                             64 COMRAM     1     1      0
                         _USART_Init
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           7     3      4   11111
                                             57 COMRAM     7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     556
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3102
                                             18 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4574
                                             45 COMRAM    12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___altoft                                            10     6      4    2758
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2787
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2544
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _OpenI2C                                              2     1      1     120
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _MPU6050_testConnection                               0     0      0   17748
                _MPU6050_getDeviceID
 ---------------------------------------------------------------------------------
 (2) _MPU6050_getDeviceID                                  0     0      0   17748
                    _I2Cdev_readBits
 ---------------------------------------------------------------------------------
 (3) _I2Cdev_readBits                                     12     7      5   17748
                                             36 COMRAM    12     7      5
                    _I2Cdev_readByte
 ---------------------------------------------------------------------------------
 (1) _MPU6050_initialize                                   0     0      0   97478
             _MPU6050_setClockSource
     _MPU6050_setFullScaleAccelRange
      _MPU6050_setFullScaleGyroRange
            _MPU6050_setSleepEnabled
 ---------------------------------------------------------------------------------
 (2) _MPU6050_setSleepEnabled                              1     1      0   31232
                                             48 COMRAM     1     1      0
                    _I2Cdev_writeBit
 ---------------------------------------------------------------------------------
 (3) _I2Cdev_writeBit                                     12     9      3   31210
                                             36 COMRAM    12     9      3
                    _I2Cdev_readByte
                   _I2Cdev_writeByte
 ---------------------------------------------------------------------------------
 (2) _MPU6050_setFullScaleGyroRange                        1     1      0   22082
                                             46 COMRAM     1     1      0
                   _I2Cdev_writeBits
 ---------------------------------------------------------------------------------
 (2) _MPU6050_setFullScaleAccelRange                       1     1      0   22082
                                             46 COMRAM     1     1      0
                   _I2Cdev_writeBits
 ---------------------------------------------------------------------------------
 (2) _MPU6050_setClockSource                               1     1      0   22082
                                             46 COMRAM     1     1      0
                   _I2Cdev_writeBits
 ---------------------------------------------------------------------------------
 (3) _I2Cdev_writeBits                                    10     6      4   22060
                                             36 COMRAM    10     6      4
                    _I2Cdev_readByte
                   _I2Cdev_writeByte
 ---------------------------------------------------------------------------------
 (4) _I2Cdev_writeByte                                     3     1      2    4251
                                              8 COMRAM     3     1      2
                  _I2Cdev_writeBytes
 ---------------------------------------------------------------------------------
 (5) _I2Cdev_writeBytes                                    6     2      4     384
                                              2 COMRAM     6     2      4
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _I2Cdev_readByte                                      4     1      3   12326
                                             32 COMRAM     4     1      3
                   _I2Cdev_readBytes
 ---------------------------------------------------------------------------------
 (1) _MPU6050_getMotion6                                  14     2     12    9352
                                             32 COMRAM    14     2     12
                   _I2Cdev_readBytes
 ---------------------------------------------------------------------------------
 (5) _I2Cdev_readBytes                                    12     8      4    8308
                                             20 COMRAM    12     8      4
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3047
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) _WriteI2C                                             1     1      0      22
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (7) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MPU6050                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MPU6050
   _MPU6050_getMotion6
     _I2Cdev_readBytes
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _MPU6050_initialize
     _MPU6050_setClockSource
       _I2Cdev_writeBits
         _I2Cdev_readByte
           _I2Cdev_readBytes
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _I2Cdev_writeByte
           _I2Cdev_writeBytes
             _IdleI2C
             _WriteI2C
               _IdleI2C
     _MPU6050_setFullScaleAccelRange
       _I2Cdev_writeBits
         _I2Cdev_readByte
           _I2Cdev_readBytes
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _I2Cdev_writeByte
           _I2Cdev_writeBytes
             _IdleI2C
             _WriteI2C
               _IdleI2C
     _MPU6050_setFullScaleGyroRange
       _I2Cdev_writeBits
         _I2Cdev_readByte
           _I2Cdev_readBytes
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _I2Cdev_writeByte
           _I2Cdev_writeBytes
             _IdleI2C
             _WriteI2C
               _IdleI2C
     _MPU6050_setSleepEnabled
       _I2Cdev_writeBit
         _I2Cdev_readByte
           _I2Cdev_readBytes
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _I2Cdev_writeByte
           _I2Cdev_writeBytes
             _IdleI2C
             _WriteI2C
               _IdleI2C
   _MPU6050_testConnection
     _MPU6050_getDeviceID
       _I2Cdev_readBits
         _I2Cdev_readByte
           _I2Cdev_readBytes
             _IdleI2C
             _ReadI2C
             _WriteI2C
               _IdleI2C
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _OpenI2C
   ___awtoft
     ___ftpack
   ___ftadd
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftge
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftneg
   ___ftsub
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
   _initBT
     _USART_Init
       ___altoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _initIO
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     33      33       5       31.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4B      5A       1       94.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8D      20        0.0%
DATA                 0      0      8D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 17 08:34:05 2018

                           ___altoft@exp 0011          __size_of_MPU6050_setClockSource 001A  
                            _SSPSTATbits 000FC7                            ___altoft@sign 0012  
                                     l30 1342                                       l32 14E6  
                                     l29 1336                                       l64 27B2  
                                     l69 27BA                             ___awdiv@sign 000C  
                    ___wmul@multiplicand 0011                             ___ftadd@exp1 0039  
                           ___ftadd@exp2 0038                             ___ftadd@sign 0037  
                                    l121 1E48                                      l130 1EE0  
                                    l124 1E68                                      l220 2314  
                                    l126 1EF4                                      l134 1EEE  
                                    l222 2340                                      l127 1E7E  
                                    l128 1EE6                                      l138 1F1E  
                                    l190 25FC                                      l192 2638  
                                    l193 261C                                      l196 2646  
                           __CFG_BOR$OFF 000000                    I2Cdev_readBits@length 0027  
                           ___awmod@sign 0006                                      wreg 000FE8  
                             _TXSTA1bits 000FAC                     ??_MPU6050_initialize 0032  
                            main@data_in 0077                         _I2Cdev_writeBits 214A  
                       _I2Cdev_writeByte 2882                             __CFG_LVP$OFF 000000  
                 I2Cdev_readBits@devAddr 002E           __end_of_MPU6050_testConnection 28F4  
                           ___ftdiv@cntr 001C                          __end_of_MPU6050 290E  
                           ___ftdiv@sign 0021                             __CFG_WDT$OFF 000000  
                                   l1100 08C6                                     l1101 08D6  
                                   l1110 09DC                                     l1111 0A42  
                                   l1104 08D2                                     l1113 0A68  
                                   l1105 08F8                                     l1130 0C2E  
                                   l1114 0AA8                                     l1107 0E64  
                                   l1115 0B70                                     l1204 267A  
                                   l1132 0CD4                                     l1124 0BD6  
                                   l1108 094A                                     l1141 0E5A  
                                   l1133 0CC6                                     l1206 266E  
                                   l1142 0E4C                                     l1118 0B18  
                                   l1303 2478                                     l1135 0CF8  
                                   l1304 246C                                     l1400 24E2  
                                   l1144 0E7E                                     l1136 0CFC  
                                   l1137 0D14                                     l1129 0CBA  
                                   l1402 24F8                                     l1082 1652  
                                   l1138 0E40                                     l1403 24F0  
                                   l1139 0D66                                     l1420 1A78  
                                   l1092 107E                                     l1421 1ABA  
                                   l1085 171E                                     l1093 11CE  
                                   l1414 26EE                                     l1430 1B4C  
                                   l1422 1AEA                                     l1406 2510  
                                   l1431 1B40                                     l1407 251A  
                                   l1095 127E                                     l1504 1874  
                                   l1424 1B28                                     l1408 2528  
                                   l1088 10A2                                     l1505 186A  
                                   l1425 1B18                                     l1089 0FCE  
                                   l1178 2812                                     l1450 2034  
                                   l1514 1F4E                                     l1418 1A5A  
                                   l1522 1936                                     l1451 202A  
                                   l1507 1898                                     l1603 2282  
                                   l1099 08B6                                     l1508 18B4  
                                   l1516 1F76                                     l1540 211A  
                                   l1604 2276                                     l1524 1962  
                                   l1453 2068                                     l1509 18E4  
                                   l1517 1FB4                                     l1613 2550  
                                   l1525 199C                                     l1454 2052  
                                   l1518 1FDA                                     l1614 2544  
                                   l1534 1A24                                     l1526 19C4  
                                   l1390 220A                                     l1550 1BF6  
                                   l1607 22B6                                     l1535 1A18  
                                   l1456 2090                                     l1608 22C4  
                                   l1624 25AA                                     l1528 1A00  
                                   l1552 1C0E                                     l1457 2086  
                                   l1481 17B0                                     l1617 2578  
                                   l1625 259E                                     l1529 19F0  
                                   l1393 2232                                     l1553 1C1E  
                                   l4026 1EE6                                     l1490 1840  
                                   l1570 1CEA                                     l1618 2586  
                                   l1394 223C                                     l1386 21E4  
                                   l1546 1B8C                                     l1539 20EA  
                                   l1563 26B0                                     l1395 224A  
                                   l1387 21F4                                     l1548 1BB4  
                                   l1485 17DA                                     l1557 274E  
                                   l1389 2212                                     l1549 1BE6  
                                   l1495 1836                                     l1575 1D1E  
                                   l1567 1C84                                     l1399 24D6  
                                   l1496 182C                                     l1576 1D12  
                                   l1569 1CFA                                     l1578 1D3A  
                                   l3944 2146                                     l4906 0AF2  
                                   l4950 0CC6                                     l4926 0BDA  
                                   l4898 0AA8                                     STR_1 0877  
                                   STR_2 0886                                     STR_3 0895  
                                   STR_4 08A3                                     u3010 24FC  
                                   u3100 1D24                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   u2240 268E                                     u2400 201C  
                                   _LATD 000F8C                                     u3041 1C68  
                                   _LATE 000F8D                                     u2330 1EF2  
                                   u2500 23BE                                     u3060 1CA2  
                                   u2270 2810                                     u2440 209A  
                                   u2505 23BA                                     u2601 176E  
                                   u3065 1C9A                                     u2611 1782  
                                   u2524 2300                                     u2700 180A  
                                   u3420 1A2A                                     u2525 22FC  
                                   u3341 191A                                     u2534 232A  
                                   u2535 2324                                     u2640 17A2  
                                   u3361 1946                                     u2570 21AE  
                                   u2554 2180                                     u2555 217C  
                                   u2811 1F36                                     u4307 12E0  
                           printf@tmpval 006F                                     u2564 2190  
                                   u2484 238C                                     u2740 1848  
                                   u3700 0A7A                                     u2565 218C  
                                   u2485 2388                                     u4317 1314  
                                   u2494 239C                                     u2670 17CC  
                                   u3710 0ABA                                     u2575 21AA  
                                   u2495 2398                                     u2831 1F5E  
                                   u4327 14EC                                     u3560 2286  
                                   u4337 14FE                                     u2770 187C  
                                   u3490 1B52                                     u3810 0CE2  
                                   u4347 2776                                     u3820 0CF2  
                                   u3740 0AF2                                     u3660 0982  
                                   u2861 1B74                                     u3590 2554  
                                   u2950 2216                                     u2881 1B9C  
                                   u3665 0978                                     u3780 0C12  
                                   _RCIF 007CF5                                     u3880 28F0  
                                   _TXIF 007CF4                             __CFG_PWRT$ON 000000  
                 I2Cdev_readBits@regAddr 0025                                     _main 12A2  
                           ___ftpack@arg 0001                             ___ftpack@exp 0004  
                                   fsr2h 000FDA                                     indf2 000FDF  
                                   fsr2l 000FD9                                     prodh 000FF4  
                                   prodl 000FF3                                     start 0000  
                          __CFG_IESO$OFF 000000                          __end_of_IdleI2C 2906  
                          __CFG_MCLRE$ON 000000                             ___ftmul@cntr 0022  
                           ___param_bank 000000                             ___ftmul@sign 0023  
                        __end_of_ReadI2C 281A                          __end_of_OpenI2C 27E0  
                      _I2Cdev_writeBytes 25F4                             ___fttol@exp1 0039  
                           ___fttol@lval 0035                            __CFG_PLLDIV$2 000000  
                         MPU6050@address 0001                       ?_I2Cdev_writeBytes 0003  
                I2Cdev_readBits@bitStart 0026                                    ?_main 0001  
                        __end_of___awdiv 2254                          __end_of___ftadd 190A  
                        __end_of___awmod 2532                          __end_of___ftdiv 200C  
                        __end_of___ftneg 275C                          __end_of___lldiv 22D6  
                        __end_of___ftmul 1C58                          ___awdiv@divisor 0009  
                        __end_of___llmod 2598                 __size_of_I2Cdev_readBits 007C  
                        __end_of___ftsub 26DA                          __end_of___fttol 1D4C  
               __size_of_I2Cdev_readByte 001A                          ___awdiv@counter 000B  
                                  _RCREG 000FAE                                    _RCSTA 000FAB  
                                  _SPBRG 000FAF                                    _TRISA 000F92  
                                  _TRISB 000F93                  I2Cdev_writeByte@devAddr 000B  
                       I2Cdev_readBits@b 0030                                    _TXSTA 000FAC  
                           ___lltoft@exp 0011                           __CFG_FCMEN$OFF 000000  
                    ??_I2Cdev_writeBytes 0007       MPU6050_setFullScaleGyroRange@range 002F  
                          ___awtoft@sign 000C                  I2Cdev_writeByte@regAddr 0009  
                        __end_of_dpowers 0829                                    _scale 0E9A  
           MPU6050_setClockSource@source 002F                   _MPU6050_setClockSource 2868  
                          ___ftpack@sign 0005                                    main@A 0078  
                                  _putch 27A2                                    tablat 000FF5  
                                  status 000FD8                 __size_of_I2Cdev_writeBit 007E  
                            ?_USART_Init 003A                __end_of_I2Cdev_writeBytes 264E  
                        __initialization 28B6                             __end_of_main 150C  
                                 ??_main 004B                            ___fttol@sign1 0034  
                          __activetblptr 000002          ??_MPU6050_setFullScaleGyroRange 002F  
                   __size_of__tdiv_to_l_ 0132                                ??_MPU6050 0001  
                  I2Cdev_readBytes@count 0020                          __CFG_CCP2MX$OFF 000000  
                I2Cdev_writeBytes@length 0004                         __end_of___altoft 24C2  
                       ___llmod@dividend 0001                                   ?_scale 0024  
                       ___awdiv@dividend 0007                         __end_of_WriteI2C 269A  
                       __end_of___awtoft 2712                                   ?_putch 0001  
                       __end_of___ftpack 20BA                         __end_of___lltoft 25F4  
                            OpenI2C@slew 0001                 ?_MPU6050_setSleepEnabled 0001  
                              ??_IdleI2C 0001                                   _OSCCON 000FD3  
                                 _SSPADD 000FC8                                   _TRISC1 007CA1  
                                 _TRISC2 007CA2                                   _TRISC6 007CA6  
                                 _TRISC7 007CA7                                   _SSPBUF 000FC9  
                                 _TXREG1 000FAD                                ??_ReadI2C 0001  
                              ??_OpenI2C 0002                           __CFG_XINST$OFF 000000  
                       __end_of__powers_ 0850                 __end_of_I2Cdev_readBytes 1F26  
                                 ___ftge 20BA                                   ___wmul 2712  
                              ??___awdiv 000B                                ??___ftadd 0034  
                         __CFG_STVREN$ON 000000                                ??___awmod 0005  
                              ??___ftdiv 0019                                ??___ftneg 0004  
                              ??___lldiv 0009                                ??___ftmul 001B  
                              ??___llmod 0009                                ??___ftsub 0040  
                              ??___fttol 002F                                   _initBT 275C  
                                 _initIO 2780                                   _fround 150C  
                                 clear_0 28BC                         ___awdiv@quotient 000D  
                        ___awmod@divisor 0003                          ___awmod@counter 0005  
                                 _printf 08AA                                   main@ax 008C  
                                 main@ay 0084                                   main@az 0086  
                                 main@dt 007B                                   main@gx 008E  
                                 main@gy 0088                                   main@gz 008A  
                  ___ftmul@f3_as_product 001F              __end_of_MPU6050_getDeviceID 27FE  
                           __mediumconst 0000                         I2Cdev_writeBit@b 0030  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                      __size_of_USART_Init 007A  
                      ??_I2Cdev_readBits 002A                        ??_I2Cdev_readByte 0024  
                             __accesstop 0060                  __end_of__initialization 28C2  
                             ___altoft@c 0009                   I2Cdev_readByte@devAddr 0024  
                        __CFG_PBADEN$OFF 000000                               ___ftadd@f1 002E  
                             ___ftadd@f2 0031           MPU6050_setSleepEnabled@enabled 0031  
                             ___ftge@ff1 0001                               ___ftge@ff2 0004  
                          ___rparam_used 000001                               ___ftdiv@f1 0013  
                             ___ftdiv@f2 0016                               ___ftdiv@f3 001D  
                             ___ftneg@f1 0001                   I2Cdev_readByte@regAddr 0021  
                             ___awtoft@c 0009                               ___ftmul@f1 0015  
                             ___ftmul@f2 0018               __size_of_I2Cdev_writeBytes 005A  
                             ___ftsub@f1 003A                               ___ftsub@f2 003D  
                             ___fttol@f1 002B                           __pcstackCOMRAM 0001  
               __end_of_I2Cdev_writeBits 21D0                 __end_of_I2Cdev_writeByte 289C  
                      ??_I2Cdev_writeBit 0028                               ___lltoft@c 0009  
                          __end_of_scale 12A2                      _I2Cdev_writeBit$422 002D  
                          __end_of_putch 27C2                               __div_to_l_ 1A3C  
        __end_of_MPU6050_setSleepEnabled 28E2              __size_of_MPU6050_getMotion6 00F0  
  __end_of_MPU6050_setFullScaleGyroRange 284E   __size_of_MPU6050_setFullScaleGyroRange 001A  
          _MPU6050_setFullScaleGyroRange 2834                          __div_to_l_@exp1 000C  
                        __div_to_l_@cntr 000B                          __CFG_LPT1OSC$ON 000000  
                                ??_scale 0027                          __div_to_l_@quot 0007  
                                ??_putch 0001                            __div_to_l_@f1 0001  
                          __div_to_l_@f2 0004                 I2Cdev_writeBytes@devAddr 0007  
                 I2Cdev_readBytes@length 0016                                  ?___ftge 0001  
               I2Cdev_writeBytes@regAddr 0003                                  ?___wmul 000F  
                                _CCP1CON 000FBD                                  ?_initBT 0001  
                                ?_initIO 0001                                ?___altoft 0009  
                                ?_fround 0024                                ?_WriteI2C 0001  
                              ?___awtoft 0009                                ?___ftpack 0001  
                                ?_printf 0040                                ?___lltoft 0009  
                                _MPU6050 2906                  ?_MPU6050_setClockSource 0001  
            __size_of_MPU6050_initialize 001A                                  _SSPCON1 000FC6  
                                _SSPCON2 000FC5                                  _SSPSTAT 000FC7  
                                _IdleI2C 28F4                                  _ReadI2C 27FE  
                                _OpenI2C 27C2                             ??_USART_Init 003E  
                      __end_of__npowers_ 0877                                  __Hparam 0000  
                             _scale$2837 0027                                  __Lparam 0000  
                        __size_of___ftge 0090                                  ___awdiv 21D0  
                                ___ftadd 175E                                  ___awmod 24C2  
                                ___ftdiv 1F26                                  ___ftneg 2738  
                                ___lldiv 2254                          __size_of___wmul 0026  
                                ___ftmul 1B64                                  ___llmod 2532  
                                ___ftsub 269A                                  ___fttol 1C58  
                           __psmallconst 0800                               ??___altoft 000D  
                        __size_of_initBT 0024                          __size_of_initIO 0022  
                                __pcinit 28B6                               ??_WriteI2C 0002  
                             ??___awtoft 000C                               ??___ftpack 0006  
                        __size_of_fround 0252                                  __ramtop 0800  
                             ??___lltoft 000D                                  __ptext0 12A2  
                                __ptext1 08AA                                  __ptext2 0E9A  
                                __ptext3 27A2                                  __ptext4 150C  
                                __ptext5 1B64                                  __ptext6 24C2  
                                __ptext7 21D0                                  __ptext8 190A  
                                __ptext9 1A3C                          __size_of_printf 05F0  
                                _mpu6050 004C           __end_of_MPU6050_setClockSource 2882  
                            ?__div_to_l_ 0001                           USART_Init@temp 003E  
                                _dpowers 0801                         ___awmod@dividend 0001  
 __end_of_MPU6050_setFullScaleAccelRange 2868  __size_of_MPU6050_setFullScaleAccelRange 001A  
         _MPU6050_setFullScaleAccelRange 284E                    I2Cdev_writeBit@bitNum 0026  
                     __end_of_USART_Init 244A      MPU6050_setFullScaleAccelRange@range 002F  
                   end_of_initialization 28C2                            __Lmediumconst 0000  
         ?_MPU6050_setFullScaleGyroRange 0001                          ___lldiv@divisor 0005  
                        ___lldiv@counter 000D                        I2Cdev_writeBits@b 002E  
                              _RCSTAbits 000FAB                                  printf@c 0076  
                                printf@f 0040                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                      ?_I2Cdev_readBytes 0015         __size_of_MPU6050_setSleepEnabled 0016  
                         __tdiv_to_l_@f1 0001                           __tdiv_to_l_@f2 0004  
                     ??_I2Cdev_readBytes 0019                            ??__tdiv_to_l_ 0007  
                        _I2Cdev_readBits 2354                          _I2Cdev_readByte 289C  
               ??_MPU6050_testConnection 0031                                _TRISBbits 000F93  
                   I2Cdev_readBits@count 002D                      USART_Init@baud_rate 003A  
                        _I2Cdev_writeBit 22D6                              ___ftdiv@exp 0020  
                    __size_of__div_to_l_ 0128                              ___ftmul@exp 001E  
                      ?_I2Cdev_writeBits 0025                    I2Cdev_writeBytes@data 0005  
                      ?_I2Cdev_writeByte 0009                           __end_of___ftge 214A  
                         __end_of___wmul 2738                       ??_I2Cdev_writeBits 0029  
                     ??_I2Cdev_writeByte 000B                           __end_of_initBT 2780  
                         __end_of_initIO 27A2                           __end_of_fround 175E  
                         __end_of_printf 0E9A                      start_initialization 28B6  
                    __end_of__tdiv_to_l_ 1A3C                         WriteI2C@data_out 0002  
           __size_of_MPU6050_getDeviceID 001E                     I2Cdev_readBytes@data 0017  
                        ___llmod@divisor 0005                          ___llmod@counter 0009  
                __end_of_I2Cdev_readBits 23D0                  __end_of_I2Cdev_readByte 28B6  
                               ??___ftge 0007                                 ??___wmul 0013  
                               ??_initBT 0041                                 ??_initIO 0001  
                               ??_fround 0027                                 ??_printf 0045  
                      __size_of___altoft 0078                               fround@prec 002D  
                      __size_of_WriteI2C 004C                        __size_of___awtoft 0038  
                      __size_of___ftpack 00AE               __end_of_MPU6050_getMotion6 1E3C  
        __size_of_MPU6050_testConnection 0012                        __size_of___lltoft 005C  
                               ?_MPU6050 0001                              __pbssCOMRAM 004C  
                          __pcstackBANK0 0060                  __end_of_I2Cdev_writeBit 2354  
                I2Cdev_readBytes@devAddr 001F                                 ?_IdleI2C 0001  
                I2Cdev_readBytes@regAddr 0015                                 ?_ReadI2C 0001  
                               ?_OpenI2C 0001                                _main$2834 0081  
                _MPU6050_setSleepEnabled 28CC                                 ?___awdiv 0007  
                               ?___ftadd 002E                                 ?___awmod 0001  
                               ?___ftdiv 0013                                 ?___ftneg 0001  
                               ?___lldiv 0001                                 ?___ftmul 0015  
                               ?___llmod 0001                                 ?___ftsub 003A  
                              __npowers_ 0850                                 ?___fttol 002B  
                            __tdiv_to_l_ 190A                             ??__div_to_l_ 0007  
                            __smallconst 0800               __end_of_MPU6050_initialize 2834  
                         __size_of_scale 0408                           __size_of_putch 0020  
                         ___wmul@product 0013                                 _LATCbits 000F8B  
                 _MPU6050_testConnection 28E2         ??_MPU6050_setFullScaleAccelRange 002F  
        ?_MPU6050_setFullScaleAccelRange 0001                                 _PIR1bits 000F9E  
                     __end_of__div_to_l_ 1B64                     I2Cdev_writeBits@data 0028  
                       ?_I2Cdev_readBits 0025                         ?_I2Cdev_readByte 0021  
                   I2Cdev_writeBits@mask 002D                        ___wmul@multiplier 000F  
                    I2Cdev_readBits@data 0028                      I2Cdev_readBits@mask 002F  
                             printf@flag 0065                                main@angle 0090  
                             printf@fval 0073                               printf@prec 0067  
                   I2Cdev_writeByte@data 000A                          main@error_angle 007E  
                       __size_of_MPU6050 0008                __size_of_I2Cdev_readBytes 00EA  
                       ?_I2Cdev_writeBit 0025                 I2Cdev_writeBits@bitStart 0026  
                    I2Cdev_readByte@data 0022                         OpenI2C@sync_mode 0002  
                       __size_of_IdleI2C 0012                               putch@trash 0001  
              ??_MPU6050_setSleepEnabled 0031                         __size_of_ReadI2C 001C  
                               __Hrparam 0000                         __size_of_OpenI2C 001E  
                               __Lrparam 0000                      _MPU6050_getDeviceID 27E0  
                       __size_of___awdiv 0084                         __size_of___ftadd 01AC  
                       __size_of___awmod 0070                         __size_of___ftdiv 00E6  
                       __size_of___ftneg 0024                         __size_of___lldiv 0082  
                               ___altoft 244A                         __size_of___ftmul 00F4  
                       __size_of___llmod 0066                         __size_of___ftsub 0040  
                       __size_of___fttol 00F4                                 _WriteI2C 264E  
                               ___awtoft 26DA                                 ___ftpack 200C  
                            _fround$2835 002A                              _fround$2836 0027  
                               ___lltoft 2598                                 __ptext10 2598  
                               __ptext11 2532                                 __ptext20 1F26  
                               __ptext12 2254                                 __ptext21 175E  
                               __ptext13 269A                                 __ptext30 28CC  
                               __ptext22 244A                                 __ptext14 2738  
                               __ptext31 22D6                                 __ptext23 26DA  
                               __ptext15 20BA                                 __ptext40 1E3C  
                               __ptext32 2834                                 __ptext24 200C  
                               __ptext16 2780                                 __ptext41 2712  
                               __ptext33 284E                                 __ptext25 27C2  
                               __ptext17 275C                                 __ptext42 264E  
                               __ptext34 2868                                 __ptext26 28E2  
                               __ptext18 23D0                                 __ptext43 28F4  
                               __ptext35 214A                                 __ptext27 27E0  
                               __ptext19 1C58                                 __ptext44 27FE  
                               __ptext36 2882                                 __ptext28 2354  
                               __ptext45 2906                                 __ptext37 25F4  
              __size_of_I2Cdev_writeBits 0086                                 __ptext29 281A  
                               __ptext38 289C                                 __ptext39 1D4C  
              __size_of_I2Cdev_writeByte 001A                                 __powers_ 0829  
                   ?_MPU6050_getDeviceID 0001                            __size_of_main 026A  
                    I2Cdev_writeBit@data 0027                   I2Cdev_writeBit@devAddr 002F  
               ??_MPU6050_setClockSource 002F                                printf@exp 006D  
                              printf@val 0069                  I2Cdev_writeBits@devAddr 002C  
                 I2Cdev_writeBit@regAddr 0025                  I2Cdev_writeBits@regAddr 0025  
                              putch@byte 0002                    ??_MPU6050_getDeviceID 0031  
                               scale@scl 002A                         __tdiv_to_l_@exp1 000F  
                       __tdiv_to_l_@cntr 000E                         __tdiv_to_l_@quot 000A  
                     _MPU6050_getMotion6 1D4C                         ___lldiv@dividend 0001  
                   MPU6050_getMotion6@ax 0021                     MPU6050_getMotion6@ay 0023  
                   MPU6050_getMotion6@az 0025                     MPU6050_getMotion6@gx 0027  
                   MPU6050_getMotion6@gy 0029                     MPU6050_getMotion6@gz 002B  
                    ?_MPU6050_getMotion6 0021                                 printf@ap 0063  
                     I2Cdev_writeBytes@i 0008                   I2Cdev_writeBits@length 0027  
                           ?__tdiv_to_l_ 0001                              _printf$2838 0060  
                    __CFG_FOSC$INTOSC_EC 000000                         ___lldiv@quotient 0009  
                   ??_MPU6050_getMotion6 002D                              _SSPCON1bits 000FC6  
                       _I2Cdev_readBytes 1E3C                              _SSPCON2bits 000FC5  
                ?_MPU6050_testConnection 0001                       _MPU6050_initialize 281A  
                             _USART_Init 23D0                      ?_MPU6050_initialize 0001  
